
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800100  000019ee  00001a82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000167  008001be  008001be  00001b40  2**0
                  ALLOC
  3 .stab         00005b38  00000000  00000000  00001b40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bcf  00000000  00000000  00007678  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00009248  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003c0  00000000  00000000  000092e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000064  00000000  00000000  000096a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000218  00000000  00000000  0000970c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	2b c5       	rjmp	.+2646   	; 0xa5a <__vector_1>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	77 c5       	rjmp	.+2798   	; 0xb0a <__vector_13>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	63 c5       	rjmp	.+2758   	; 0xae8 <__vector_16>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	c9 c4       	rjmp	.+2450   	; 0x9b8 <__vector_18>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d4 e0       	ldi	r29, 0x04	; 4
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
      40:	11 e0       	ldi	r17, 0x01	; 1
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	b1 e0       	ldi	r27, 0x01	; 1
      46:	ee ee       	ldi	r30, 0xEE	; 238
      48:	f9 e1       	ldi	r31, 0x19	; 25
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	ae 3b       	cpi	r26, 0xBE	; 190
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	13 e0       	ldi	r17, 0x03	; 3
      58:	ae eb       	ldi	r26, 0xBE	; 190
      5a:	b1 e0       	ldi	r27, 0x01	; 1
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a5 32       	cpi	r26, 0x25	; 37
      62:	b1 07       	cpc	r27, r17
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	ea d5       	rcall	.+3028   	; 0xc3c <main>
      68:	c0 cc       	rjmp	.-1664   	; 0xfffff9ea <__eeprom_end+0xff7ef9ea>

0000006a <__bad_interrupt>:
      6a:	8c c5       	rjmp	.+2840   	; 0xb84 <__vector_default>

0000006c <BarMeter_init>:
#define         BarMeter_MIN        0.0
#define         BarMeter_MAX        8000

float    BarMeter_INTG = (BarMeter_MAX-BarMeter_MIN)/BarMeter_N;

void BarMeter_init(){
      6c:	df 92       	push	r13
      6e:	ef 92       	push	r14
      70:	ff 92       	push	r15
      72:	0f 93       	push	r16
      74:	1f 93       	push	r17
      76:	cf 93       	push	r28
      78:	df 93       	push	r29
    unsigned int code;
    unsigned int addr;
    
    for(code=0;code<6;code++){
      7a:	00 e0       	ldi	r16, 0x00	; 0
      7c:	10 e0       	ldi	r17, 0x00	; 0
        for(addr=0;addr<8;addr++){
            lcd_set_CGRAMaddr(code,addr);
            if( (addr > 1) & (addr < 6) )
                lcd_set_char(~(0x1f>>code));
      7e:	8f e1       	ldi	r24, 0x1F	; 31
      80:	e8 2e       	mov	r14, r24
      82:	f1 2c       	mov	r15, r1
      84:	1e c0       	rjmp	.+60     	; 0xc2 <BarMeter_init+0x56>
    unsigned int code;
    unsigned int addr;
    
    for(code=0;code<6;code++){
        for(addr=0;addr<8;addr++){
            lcd_set_CGRAMaddr(code,addr);
      86:	80 2f       	mov	r24, r16
      88:	6c 2f       	mov	r22, r28
      8a:	bd d2       	rcall	.+1402   	; 0x606 <lcd_set_CGRAMaddr>
            if( (addr > 1) & (addr < 6) )
      8c:	9e 01       	movw	r18, r28
      8e:	22 50       	subi	r18, 0x02	; 2
      90:	30 40       	sbci	r19, 0x00	; 0
      92:	24 30       	cpi	r18, 0x04	; 4
      94:	31 05       	cpc	r19, r1
      96:	10 f4       	brcc	.+4      	; 0x9c <BarMeter_init+0x30>
                lcd_set_char(~(0x1f>>code));
      98:	8d 2d       	mov	r24, r13
      9a:	09 c0       	rjmp	.+18     	; 0xae <BarMeter_init+0x42>
            else if( (addr == 6) | (addr == 1) ) lcd_set_char(0x00);
      9c:	c1 30       	cpi	r28, 0x01	; 1
      9e:	d1 05       	cpc	r29, r1
      a0:	19 f0       	breq	.+6      	; 0xa8 <BarMeter_init+0x3c>
      a2:	c6 30       	cpi	r28, 0x06	; 6
      a4:	d1 05       	cpc	r29, r1
      a6:	11 f4       	brne	.+4      	; 0xac <BarMeter_init+0x40>
      a8:	80 e0       	ldi	r24, 0x00	; 0
      aa:	01 c0       	rjmp	.+2      	; 0xae <BarMeter_init+0x42>
            else                                 lcd_set_char(0x10);
      ac:	80 e1       	ldi	r24, 0x10	; 16
      ae:	8d d1       	rcall	.+794    	; 0x3ca <lcd_set_char>
void BarMeter_init(){
    unsigned int code;
    unsigned int addr;
    
    for(code=0;code<6;code++){
        for(addr=0;addr<8;addr++){
      b0:	21 96       	adiw	r28, 0x01	; 1
      b2:	c8 30       	cpi	r28, 0x08	; 8
      b4:	d1 05       	cpc	r29, r1
      b6:	39 f7       	brne	.-50     	; 0x86 <BarMeter_init+0x1a>

void BarMeter_init(){
    unsigned int code;
    unsigned int addr;
    
    for(code=0;code<6;code++){
      b8:	0f 5f       	subi	r16, 0xFF	; 255
      ba:	1f 4f       	sbci	r17, 0xFF	; 255
      bc:	06 30       	cpi	r16, 0x06	; 6
      be:	11 05       	cpc	r17, r1
      c0:	61 f0       	breq	.+24     	; 0xda <BarMeter_init+0x6e>
        for(addr=0;addr<8;addr++){
            lcd_set_CGRAMaddr(code,addr);
            if( (addr > 1) & (addr < 6) )
                lcd_set_char(~(0x1f>>code));
      c2:	c7 01       	movw	r24, r14
      c4:	00 2e       	mov	r0, r16
      c6:	02 c0       	rjmp	.+4      	; 0xcc <BarMeter_init+0x60>
      c8:	95 95       	asr	r25
      ca:	87 95       	ror	r24
      cc:	0a 94       	dec	r0
      ce:	e2 f7       	brpl	.-8      	; 0xc8 <BarMeter_init+0x5c>
      d0:	d8 2e       	mov	r13, r24
      d2:	d0 94       	com	r13
      d4:	c0 e0       	ldi	r28, 0x00	; 0
      d6:	d0 e0       	ldi	r29, 0x00	; 0
      d8:	d6 cf       	rjmp	.-84     	; 0x86 <BarMeter_init+0x1a>
            else if( (addr == 6) | (addr == 1) ) lcd_set_char(0x00);
            else                                 lcd_set_char(0x10);
        }
    }
}
      da:	df 91       	pop	r29
      dc:	cf 91       	pop	r28
      de:	1f 91       	pop	r17
      e0:	0f 91       	pop	r16
      e2:	ff 90       	pop	r15
      e4:	ef 90       	pop	r14
      e6:	df 90       	pop	r13
      e8:	08 95       	ret

000000ea <BarMeter_disp>:

void BarMeter_disp(unsigned int data){
      ea:	4f 92       	push	r4
      ec:	5f 92       	push	r5
      ee:	7f 92       	push	r7
      f0:	8f 92       	push	r8
      f2:	9f 92       	push	r9
      f4:	af 92       	push	r10
      f6:	bf 92       	push	r11
      f8:	cf 92       	push	r12
      fa:	df 92       	push	r13
      fc:	ef 92       	push	r14
      fe:	ff 92       	push	r15
     100:	0f 93       	push	r16
     102:	1f 93       	push	r17
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
        data = BarMeter_MAX;
    }else if( data < BarMeter_MIN ){
        data = BarMeter_MIN;
    }
    
    conv_data = data - BarMeter_MIN;
     108:	bc 01       	movw	r22, r24
     10a:	8f e1       	ldi	r24, 0x1F	; 31
     10c:	61 34       	cpi	r22, 0x41	; 65
     10e:	78 07       	cpc	r23, r24
     110:	10 f0       	brcs	.+4      	; 0x116 <BarMeter_disp+0x2c>
     112:	60 e4       	ldi	r22, 0x40	; 64
     114:	7f e1       	ldi	r23, 0x1F	; 31
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	11 db       	rcall	.-2526   	; 0xfffff73e <__eeprom_end+0xff7ef73e>
     11c:	e4 da       	rcall	.-2616   	; 0xfffff6e6 <__eeprom_end+0xff7ef6e6>
    INTG = (unsigned int)(conv_data/BarMeter_INTG);
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	0d db       	rcall	.-2534   	; 0xfffff73e <__eeprom_end+0xff7ef73e>
     124:	4b 01       	movw	r8, r22
     126:	5c 01       	movw	r10, r24
     128:	c0 90 00 01 	lds	r12, 0x0100
     12c:	d0 90 01 01 	lds	r13, 0x0101
     130:	e0 90 02 01 	lds	r14, 0x0102
     134:	f0 90 03 01 	lds	r15, 0x0103
     138:	a7 01       	movw	r20, r14
     13a:	96 01       	movw	r18, r12
     13c:	67 da       	rcall	.-2866   	; 0xfffff60c <__eeprom_end+0xff7ef60c>
     13e:	d3 da       	rcall	.-2650   	; 0xfffff6e6 <__eeprom_end+0xff7ef6e6>
     140:	76 2e       	mov	r7, r22
    FRAC = (unsigned int)((conv_data - BarMeter_INTG*INTG)*1.0/BarMeter_INTG * 5);
     142:	06 2f       	mov	r16, r22
     144:	10 e0       	ldi	r17, 0x00	; 0

    for(n=0;n<INTG;n++){
     146:	c0 e0       	ldi	r28, 0x00	; 0
     148:	d0 e0       	ldi	r29, 0x00	; 0
     14a:	28 01       	movw	r4, r16
     14c:	03 c0       	rjmp	.+6      	; 0x154 <BarMeter_disp+0x6a>
        lcd_set_char(0x5);
     14e:	85 e0       	ldi	r24, 0x05	; 5
     150:	3c d1       	rcall	.+632    	; 0x3ca <lcd_set_char>
    
    conv_data = data - BarMeter_MIN;
    INTG = (unsigned int)(conv_data/BarMeter_INTG);
    FRAC = (unsigned int)((conv_data - BarMeter_INTG*INTG)*1.0/BarMeter_INTG * 5);

    for(n=0;n<INTG;n++){
     152:	21 96       	adiw	r28, 0x01	; 1
     154:	c4 15       	cp	r28, r4
     156:	d5 05       	cpc	r29, r5
     158:	d0 f3       	brcs	.-12     	; 0x14e <BarMeter_disp+0x64>
        lcd_set_char(0x5);
    }
    if( INTG != BarMeter_N ) lcd_set_char(FRAC);
     15a:	88 e0       	ldi	r24, 0x08	; 8
     15c:	78 16       	cp	r7, r24
     15e:	d9 f0       	breq	.+54     	; 0x196 <BarMeter_disp+0xac>
        data = BarMeter_MIN;
    }
    
    conv_data = data - BarMeter_MIN;
    INTG = (unsigned int)(conv_data/BarMeter_INTG);
    FRAC = (unsigned int)((conv_data - BarMeter_INTG*INTG)*1.0/BarMeter_INTG * 5);
     160:	b8 01       	movw	r22, r16
     162:	88 27       	eor	r24, r24
     164:	77 fd       	sbrc	r23, 7
     166:	80 95       	com	r24
     168:	98 2f       	mov	r25, r24
     16a:	eb da       	rcall	.-2602   	; 0xfffff742 <__eeprom_end+0xff7ef742>
     16c:	9b 01       	movw	r18, r22
     16e:	ac 01       	movw	r20, r24
     170:	c7 01       	movw	r24, r14
     172:	b6 01       	movw	r22, r12
     174:	96 db       	rcall	.-2260   	; 0xfffff8a2 <__eeprom_end+0xff7ef8a2>
     176:	9b 01       	movw	r18, r22
     178:	ac 01       	movw	r20, r24
     17a:	c5 01       	movw	r24, r10
     17c:	b4 01       	movw	r22, r8
     17e:	dd d9       	rcall	.-3142   	; 0xfffff53a <__eeprom_end+0xff7ef53a>
     180:	a7 01       	movw	r20, r14
     182:	96 01       	movw	r18, r12
     184:	43 da       	rcall	.-2938   	; 0xfffff60c <__eeprom_end+0xff7ef60c>
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	40 ea       	ldi	r20, 0xA0	; 160
     18c:	50 e4       	ldi	r21, 0x40	; 64
     18e:	89 db       	rcall	.-2286   	; 0xfffff8a2 <__eeprom_end+0xff7ef8a2>
     190:	aa da       	rcall	.-2732   	; 0xfffff6e6 <__eeprom_end+0xff7ef6e6>

    for(n=0;n<INTG;n++){
        lcd_set_char(0x5);
    }
    if( INTG != BarMeter_N ) lcd_set_char(FRAC);
     192:	86 2f       	mov	r24, r22
     194:	1a d1       	rcall	.+564    	; 0x3ca <lcd_set_char>
    for(n=INTG+1;n<BarMeter_N;n++){
     196:	c0 e0       	ldi	r28, 0x00	; 0
     198:	d0 e0       	ldi	r29, 0x00	; 0
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <BarMeter_disp+0xb6>
        lcd_set_char(0x0);
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	15 d1       	rcall	.+554    	; 0x3ca <lcd_set_char>
     1a0:	21 96       	adiw	r28, 0x01	; 1

    for(n=0;n<INTG;n++){
        lcd_set_char(0x5);
    }
    if( INTG != BarMeter_N ) lcd_set_char(FRAC);
    for(n=INTG+1;n<BarMeter_N;n++){
     1a2:	ce 01       	movw	r24, r28
     1a4:	84 0d       	add	r24, r4
     1a6:	95 1d       	adc	r25, r5
     1a8:	88 30       	cpi	r24, 0x08	; 8
     1aa:	91 05       	cpc	r25, r1
     1ac:	b8 f3       	brcs	.-18     	; 0x19c <BarMeter_disp+0xb2>
        lcd_set_char(0x0);
    }

}
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	1f 91       	pop	r17
     1b4:	0f 91       	pop	r16
     1b6:	ff 90       	pop	r15
     1b8:	ef 90       	pop	r14
     1ba:	df 90       	pop	r13
     1bc:	cf 90       	pop	r12
     1be:	bf 90       	pop	r11
     1c0:	af 90       	pop	r10
     1c2:	9f 90       	pop	r9
     1c4:	8f 90       	pop	r8
     1c6:	7f 90       	pop	r7
     1c8:	5f 90       	pop	r5
     1ca:	4f 90       	pop	r4
     1cc:	08 95       	ret

000001ce <ExtInterrupt_init>:
#include "ExtInterrupt.h"

void ExtInterrupt_init(void) {

   // INT0, INT1 Pin change interrupt enable
	EIMSK = 0b00000001;
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	8d bb       	out	0x1d, r24	; 29
	// bit 7-2 : not valid ,  bit 1 : INT1 ,  bit 0 : INT0 
	
   // INT0, INT1 Pin change interrupt mode setting
	EICRA = 0b00000011;
     1d2:	83 e0       	ldi	r24, 0x03	; 3
     1d4:	80 93 69 00 	sts	0x0069, r24
	//		10 ... Negative edge
	//		11 ... Positive edge


	// Pin group mask
	PCICR = 0b00000000;
     1d8:	10 92 68 00 	sts	0x0068, r1
	// bit 2 : PCINT 16 - 23

	// Pin mask
	// PCMSK2 is valid, when bit 2 of PCICR is setted 
	// PCINT23, PCINT22, PCINT21, PCINT20, PCINT19, PCINT18, PCINT17, PCINT16
	PCMSK2 = 0b00000000;
     1dc:	10 92 6d 00 	sts	0x006D, r1
	// PCMSK1 is valid, when bit 1 of PCICR is setted 
	//  ----- , PCINT14, PCINT13, PCINT12, PCINT11, PCINT10,  PCINT9,  PCINT8
	PCMSK1 = 0b00000000;
     1e0:	10 92 6c 00 	sts	0x006C, r1
	// PCMSK0 is valid, when bit 0 of PCICR is setted 
	//  PCINT7,  PCINT6,  PCINT5,  PCINT4,  PCINT3,  PCINT2,  PCINT1,  PCINT0
	PCMSK0 = 0b00000000;
     1e4:	10 92 6b 00 	sts	0x006B, r1
     1e8:	08 95       	ret

000001ea <LEDarray>:
// LED Array Variables Declaration
int                 LED_scale;

void  LEDarray(unsigned int rpm){

    if( rpm < RPM_LOW ){
     1ea:	8a 30       	cpi	r24, 0x0A	; 10
     1ec:	91 05       	cpc	r25, r1
     1ee:	28 f4       	brcc	.+10     	; 0x1fa <LEDarray+0x10>
        LED_scale = 0;
     1f0:	10 92 c2 01 	sts	0x01C2, r1
     1f4:	10 92 c1 01 	sts	0x01C1, r1
     1f8:	1d c0       	rjmp	.+58     	; 0x234 <LEDarray+0x4a>
    }else if( rpm > RPM_HIGH ){
     1fa:	23 e2       	ldi	r18, 0x23	; 35
     1fc:	89 32       	cpi	r24, 0x29	; 41
     1fe:	92 07       	cpc	r25, r18
     200:	18 f0       	brcs	.+6      	; 0x208 <LEDarray+0x1e>
        LED_scale = 8;
     202:	88 e0       	ldi	r24, 0x08	; 8
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	12 c0       	rjmp	.+36     	; 0x22c <LEDarray+0x42>
    }else{
        LED_scale = 8.0*( rpm - RPM_LOW )/( RPM_HIGH - RPM_LOW );
     208:	0a 97       	sbiw	r24, 0x0a	; 10
     20a:	bc 01       	movw	r22, r24
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	96 da       	rcall	.-2772   	; 0xfffff73e <__eeprom_end+0xff7ef73e>
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	40 e0       	ldi	r20, 0x00	; 0
     218:	51 e4       	ldi	r21, 0x41	; 65
     21a:	43 db       	rcall	.-2426   	; 0xfffff8a2 <__eeprom_end+0xff7ef8a2>
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	38 e7       	ldi	r19, 0x78	; 120
     220:	4c e0       	ldi	r20, 0x0C	; 12
     222:	56 e4       	ldi	r21, 0x46	; 70
     224:	f3 d9       	rcall	.-3098   	; 0xfffff60c <__eeprom_end+0xff7ef60c>
     226:	5a da       	rcall	.-2892   	; 0xfffff6dc <__eeprom_end+0xff7ef6dc>
     228:	dc 01       	movw	r26, r24
     22a:	cb 01       	movw	r24, r22
     22c:	90 93 c2 01 	sts	0x01C2, r25
     230:	80 93 c1 01 	sts	0x01C1, r24
    }
    send_bits_595_LED(~( 0xff << (int)LED_scale ));
     234:	8f ef       	ldi	r24, 0xFF	; 255
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	00 90 c1 01 	lds	r0, 0x01C1
     23c:	02 c0       	rjmp	.+4      	; 0x242 <LEDarray+0x58>
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	0a 94       	dec	r0
     244:	e2 f7       	brpl	.-8      	; 0x23e <LEDarray+0x54>
     246:	80 95       	com	r24
     248:	18 d2       	rcall	.+1072   	; 0x67a <send_bits_595_LED>
    
     24a:	08 95       	ret

0000024c <SoftSPI_Init>:
unsigned char RS;
unsigned char DATA;

void SoftSPI_Init(void){
    /*MOSI,SCK=出力、他は入力に設定 */
    DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RCK);
     24c:	84 b1       	in	r24, 0x04	; 4
     24e:	87 60       	ori	r24, 0x07	; 7
     250:	84 b9       	out	0x04, r24	; 4
}
     252:	08 95       	ret

00000254 <SoftSPI_TX>:

void SoftSPI_TX(unsigned char cData){
     254:	27 e0       	ldi	r18, 0x07	; 7
     256:	30 e0       	ldi	r19, 0x00	; 0
    unsigned int n;
    for(n=0;n<8;n++){
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
        _delay_us(1);
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
     258:	90 e0       	ldi	r25, 0x00	; 0
}

void SoftSPI_TX(unsigned char cData){
    unsigned int n;
    for(n=0;n<8;n++){
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
     25a:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     25c:	45 e0       	ldi	r20, 0x05	; 5
     25e:	4a 95       	dec	r20
     260:	f1 f7       	brne	.-4      	; 0x25e <SoftSPI_TX+0xa>
     262:	00 00       	nop
        _delay_us(1);
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
     264:	28 98       	cbi	0x05, 0	; 5
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
     266:	65 b1       	in	r22, 0x05	; 5
     268:	ac 01       	movw	r20, r24
     26a:	02 2e       	mov	r0, r18
     26c:	02 c0       	rjmp	.+4      	; 0x272 <SoftSPI_TX+0x1e>
     26e:	55 95       	asr	r21
     270:	47 95       	ror	r20
     272:	0a 94       	dec	r0
     274:	e2 f7       	brpl	.-8      	; 0x26e <SoftSPI_TX+0x1a>
     276:	41 70       	andi	r20, 0x01	; 1
     278:	46 2b       	or	r20, r22
     27a:	45 b9       	out	0x05, r20	; 5
     27c:	45 e0       	ldi	r20, 0x05	; 5
     27e:	4a 95       	dec	r20
     280:	f1 f7       	brne	.-4      	; 0x27e <SoftSPI_TX+0x2a>
     282:	00 00       	nop
        _delay_us(1);
        PORT_SPI |= (1<<DD_SCK);                // Set SCK "H"
     284:	29 9a       	sbi	0x05, 1	; 5
     286:	45 e0       	ldi	r20, 0x05	; 5
     288:	4a 95       	dec	r20
     28a:	f1 f7       	brne	.-4      	; 0x288 <SoftSPI_TX+0x34>
     28c:	00 00       	nop
     28e:	21 50       	subi	r18, 0x01	; 1
     290:	30 40       	sbci	r19, 0x00	; 0
    DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RCK);
}

void SoftSPI_TX(unsigned char cData){
    unsigned int n;
    for(n=0;n<8;n++){
     292:	4f ef       	ldi	r20, 0xFF	; 255
     294:	2f 3f       	cpi	r18, 0xFF	; 255
     296:	34 07       	cpc	r19, r20
     298:	01 f7       	brne	.-64     	; 0x25a <SoftSPI_TX+0x6>
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
        _delay_us(1);
        PORT_SPI |= (1<<DD_SCK);                // Set SCK "H"
        _delay_us(1);
    }
}
     29a:	08 95       	ret

0000029c <send_bits_595>:

void send_bits_595(unsigned char RS, unsigned char E, unsigned char DATA){
    unsigned char bits;
    bits = 0x3f & ( (RS<<5)|(E<<4)|DATA );
     29c:	82 95       	swap	r24
     29e:	88 0f       	add	r24, r24
     2a0:	80 7e       	andi	r24, 0xE0	; 224
     2a2:	84 2b       	or	r24, r20
     2a4:	62 95       	swap	r22
     2a6:	60 7f       	andi	r22, 0xF0	; 240
     2a8:	68 2b       	or	r22, r24
    SoftSPI_TX(bits);
     2aa:	86 2f       	mov	r24, r22
     2ac:	8f 73       	andi	r24, 0x3F	; 63
     2ae:	d2 df       	rcall	.-92     	; 0x254 <SoftSPI_TX>
     2b0:	85 e3       	ldi	r24, 0x35	; 53
     2b2:	8a 95       	dec	r24
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <send_bits_595+0x16>
     2b6:	00 00       	nop
    _delay_us(10);
    PORT_SPI &= ~(1<<DD_RCK);   // Set RCK "L"
     2b8:	2a 98       	cbi	0x05, 2	; 5
    PORT_SPI |=  (1<<DD_RCK);   // Set RCK "H"
     2ba:	2a 9a       	sbi	0x05, 2	; 5
    PORT_SPI &= ~(1<<DD_RCK);   // Set RCK "L"
     2bc:	2a 98       	cbi	0x05, 2	; 5
}
     2be:	08 95       	ret

000002c0 <lcd_set_4bit>:

// fuction for sending control bitpattern
void lcd_set_4bit(unsigned char bitpattern){
	DATA    =   0x0f & bitpattern; // set sending data
     2c0:	48 2f       	mov	r20, r24
     2c2:	4f 70       	andi	r20, 0x0F	; 15
     2c4:	40 93 c3 01 	sts	0x01C3, r20
	E       =   0;
     2c8:	10 92 c4 01 	sts	0x01C4, r1
    send_bits_595(RS,E,DATA);
     2cc:	80 91 c5 01 	lds	r24, 0x01C5
     2d0:	60 e0       	ldi	r22, 0x00	; 0
     2d2:	e4 df       	rcall	.-56     	; 0x29c <send_bits_595>
//	_delay_us(20);
	E       =   1;
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	80 93 c4 01 	sts	0x01C4, r24
    send_bits_595(RS,E,DATA);
     2da:	80 91 c5 01 	lds	r24, 0x01C5
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	40 91 c3 01 	lds	r20, 0x01C3
     2e4:	db df       	rcall	.-74     	; 0x29c <send_bits_595>
//	_delay_us(20);
	E       =   0;
     2e6:	10 92 c4 01 	sts	0x01C4, r1
    send_bits_595(RS,E,DATA);
     2ea:	80 91 c5 01 	lds	r24, 0x01C5
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	40 91 c3 01 	lds	r20, 0x01C3
     2f4:	d3 df       	rcall	.-90     	; 0x29c <send_bits_595>
//	_delay_us(20);
}
     2f6:	08 95       	ret

000002f8 <lcd_init>:

// Initializing LCD
void lcd_init(void){

	// set enable "0"
    E       = 0;
     2f8:	10 92 c4 01 	sts	0x01C4, r1
    // set instruction input mode
	RS      = 0;
     2fc:	10 92 c5 01 	sts	0x01C5, r1
	// initialize data port
	DATA	= 0x00;
     300:	10 92 c3 01 	sts	0x01C3, r1
    send_bits_595(RS,E,DATA);
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	40 e0       	ldi	r20, 0x00	; 0
     30a:	c8 df       	rcall	.-112    	; 0x29c <send_bits_595>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30c:	8f ef       	ldi	r24, 0xFF	; 255
     30e:	99 ef       	ldi	r25, 0xF9	; 249
     310:	a0 e0       	ldi	r26, 0x00	; 0
     312:	81 50       	subi	r24, 0x01	; 1
     314:	90 40       	sbci	r25, 0x00	; 0
     316:	a0 40       	sbci	r26, 0x00	; 0
     318:	e1 f7       	brne	.-8      	; 0x312 <lcd_init+0x1a>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <lcd_init+0x24>
     31c:	00 00       	nop
    
	// wait more than 15ms
	_delay_ms(20);

	// set 8-bit mode
	lcd_set_4bit(0x03);
     31e:	83 e0       	ldi	r24, 0x03	; 3
     320:	cf df       	rcall	.-98     	; 0x2c0 <lcd_set_4bit>
     322:	af e1       	ldi	r26, 0x1F	; 31
     324:	be e4       	ldi	r27, 0x4E	; 78
     326:	11 97       	sbiw	r26, 0x01	; 1
     328:	f1 f7       	brne	.-4      	; 0x326 <lcd_init+0x2e>
     32a:	00 c0       	rjmp	.+0      	; 0x32c <lcd_init+0x34>
     32c:	00 00       	nop
	_delay_ms(5);
	lcd_set_4bit(0x03);
     32e:	83 e0       	ldi	r24, 0x03	; 3
     330:	c7 df       	rcall	.-114    	; 0x2c0 <lcd_set_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     332:	87 eb       	ldi	r24, 0xB7	; 183
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	01 97       	sbiw	r24, 0x01	; 1
     338:	f1 f7       	brne	.-4      	; 0x336 <lcd_init+0x3e>
     33a:	00 c0       	rjmp	.+0      	; 0x33c <lcd_init+0x44>
     33c:	00 00       	nop
	_delay_us(110);
	lcd_set_4bit(0x03);
     33e:	83 e0       	ldi	r24, 0x03	; 3
     340:	bf df       	rcall	.-130    	; 0x2c0 <lcd_set_4bit>
     342:	a7 ec       	ldi	r26, 0xC7	; 199
     344:	b0 e0       	ldi	r27, 0x00	; 0
     346:	11 97       	sbiw	r26, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <lcd_init+0x4e>
     34a:	00 c0       	rjmp	.+0      	; 0x34c <lcd_init+0x54>
     34c:	00 00       	nop
	_delay_us(50);
	
	// set 4-bit mode
	lcd_set_4bit(0x02);
     34e:	82 e0       	ldi	r24, 0x02	; 2
     350:	b7 df       	rcall	.-146    	; 0x2c0 <lcd_set_4bit>
     352:	87 ec       	ldi	r24, 0xC7	; 199
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	01 97       	sbiw	r24, 0x01	; 1
     358:	f1 f7       	brne	.-4      	; 0x356 <lcd_init+0x5e>
     35a:	00 c0       	rjmp	.+0      	; 0x35c <lcd_init+0x64>
     35c:	00 00       	nop
	_delay_us(50);

	// function setting
	lcd_set_4bit(0x02);
     35e:	82 e0       	ldi	r24, 0x02	; 2
     360:	af df       	rcall	.-162    	; 0x2c0 <lcd_set_4bit>
	lcd_set_4bit(0x08);
     362:	88 e0       	ldi	r24, 0x08	; 8
     364:	ad df       	rcall	.-166    	; 0x2c0 <lcd_set_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     366:	af e9       	ldi	r26, 0x9F	; 159
     368:	bf e0       	ldi	r27, 0x0F	; 15
     36a:	11 97       	sbiw	r26, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <lcd_init+0x72>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <lcd_init+0x78>
     370:	00 00       	nop
	_delay_ms(1);

	// set display on, cursol off and blink off
	lcd_set_4bit(0x00);
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	a5 df       	rcall	.-182    	; 0x2c0 <lcd_set_4bit>
	lcd_set_4bit(0x0c);
     376:	8c e0       	ldi	r24, 0x0C	; 12
     378:	a3 df       	rcall	.-186    	; 0x2c0 <lcd_set_4bit>
     37a:	8f e9       	ldi	r24, 0x9F	; 159
     37c:	9f e0       	ldi	r25, 0x0F	; 15
     37e:	01 97       	sbiw	r24, 0x01	; 1
     380:	f1 f7       	brne	.-4      	; 0x37e <lcd_init+0x86>
     382:	00 c0       	rjmp	.+0      	; 0x384 <lcd_init+0x8c>
     384:	00 00       	nop
	_delay_ms(1);

	// set entry mode (cursol direction : right, disable shift)
	lcd_set_4bit(0x00);
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	9b df       	rcall	.-202    	; 0x2c0 <lcd_set_4bit>
	lcd_set_4bit(0x06);
     38a:	86 e0       	ldi	r24, 0x06	; 6
     38c:	99 df       	rcall	.-206    	; 0x2c0 <lcd_set_4bit>
     38e:	af e9       	ldi	r26, 0x9F	; 159
     390:	bf e0       	ldi	r27, 0x0F	; 15
     392:	11 97       	sbiw	r26, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <lcd_init+0x9a>
     396:	00 c0       	rjmp	.+0      	; 0x398 <lcd_init+0xa0>
     398:	00 00       	nop
	_delay_ms(1);

	// clear display
	lcd_set_4bit(0x00);
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	91 df       	rcall	.-222    	; 0x2c0 <lcd_set_4bit>
	lcd_set_4bit(0x01);
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	8f df       	rcall	.-226    	; 0x2c0 <lcd_set_4bit>
     3a2:	8f e3       	ldi	r24, 0x3F	; 63
     3a4:	9f e1       	ldi	r25, 0x1F	; 31
     3a6:	01 97       	sbiw	r24, 0x01	; 1
     3a8:	f1 f7       	brne	.-4      	; 0x3a6 <lcd_init+0xae>
     3aa:	00 c0       	rjmp	.+0      	; 0x3ac <lcd_init+0xb4>
     3ac:	00 00       	nop
	_delay_ms(2);

	// clear cursol position
	lcd_set_4bit(0x00);
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	87 df       	rcall	.-242    	; 0x2c0 <lcd_set_4bit>
	lcd_set_4bit(0x02);
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	85 df       	rcall	.-246    	; 0x2c0 <lcd_set_4bit>
     3b6:	af e3       	ldi	r26, 0x3F	; 63
     3b8:	bf e1       	ldi	r27, 0x1F	; 31
     3ba:	11 97       	sbiw	r26, 0x01	; 1
     3bc:	f1 f7       	brne	.-4      	; 0x3ba <lcd_init+0xc2>
     3be:	00 c0       	rjmp	.+0      	; 0x3c0 <lcd_init+0xc8>
     3c0:	00 00       	nop
	_delay_ms(2);

	// set data input mode
    RS      =   1;
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	80 93 c5 01 	sts	0x01C5, r24
}
     3c8:	08 95       	ret

000003ca <lcd_set_char>:
    RS      =   1;
}

// LCD character (1 byte) sending
void lcd_set_char(unsigned char c)
{
     3ca:	cf 93       	push	r28
     3cc:	c8 2f       	mov	r28, r24
	lcd_set_4bit(c >> 4); // Upper Bit
     3ce:	82 95       	swap	r24
     3d0:	8f 70       	andi	r24, 0x0F	; 15
     3d2:	76 df       	rcall	.-276    	; 0x2c0 <lcd_set_4bit>
	lcd_set_4bit(0x0f & c); // Lower Bit
     3d4:	8c 2f       	mov	r24, r28
     3d6:	8f 70       	andi	r24, 0x0F	; 15
     3d8:	73 df       	rcall	.-282    	; 0x2c0 <lcd_set_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3da:	87 ec       	ldi	r24, 0xC7	; 199
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <lcd_set_char+0x14>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <lcd_set_char+0x1a>
     3e4:	00 00       	nop
	_delay_us(50);
}
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <lcd_locate>:

// LCD character allocation
void lcd_locate(unsigned char row, unsigned char col)
{
	// set instruction input mode
    RS      =   0;
     3ea:	10 92 c5 01 	sts	0x01C5, r1
//	lcd_set_char(0x80 | col | (0x40 * row) );
	lcd_set_char(0x80 | ( col + 20*(unsigned int)(row/2) ) | ( 0x40 * (row%2) ) );
     3ee:	98 2f       	mov	r25, r24
     3f0:	91 70       	andi	r25, 0x01	; 1
     3f2:	92 95       	swap	r25
     3f4:	99 0f       	add	r25, r25
     3f6:	99 0f       	add	r25, r25
     3f8:	90 7c       	andi	r25, 0xC0	; 192
     3fa:	90 68       	ori	r25, 0x80	; 128
     3fc:	86 95       	lsr	r24
     3fe:	24 e1       	ldi	r18, 0x14	; 20
     400:	82 9f       	mul	r24, r18
     402:	80 2d       	mov	r24, r0
     404:	11 24       	eor	r1, r1
     406:	86 0f       	add	r24, r22
     408:	89 2b       	or	r24, r25
     40a:	df df       	rcall	.-66     	; 0x3ca <lcd_set_char>
	// set data input mode
    RS      =   1;
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	80 93 c5 01 	sts	0x01C5, r24
}
     412:	08 95       	ret

00000414 <lcd_set_str>:
	_delay_us(50);
}

// LCD String Sending
void lcd_set_str(unsigned char *s)
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	ec 01       	movw	r28, r24
	while (*s != 0) {
     41a:	01 c0       	rjmp	.+2      	; 0x41e <lcd_set_str+0xa>
		lcd_set_char(*s);
     41c:	d6 df       	rcall	.-84     	; 0x3ca <lcd_set_char>
}

// LCD String Sending
void lcd_set_str(unsigned char *s)
{
	while (*s != 0) {
     41e:	89 91       	ld	r24, Y+
     420:	88 23       	and	r24, r24
     422:	e1 f7       	brne	.-8      	; 0x41c <lcd_set_str+0x8>
		lcd_set_char(*s);
		s++;
	} 
}
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	08 95       	ret

0000042a <lcd_set_numeric>:

// Display numeric on LCD display
void lcd_set_numeric(float num, unsigned int Nint, unsigned int Nfrac, unsigned int sign){
     42a:	2f 92       	push	r2
     42c:	3f 92       	push	r3
     42e:	4f 92       	push	r4
     430:	5f 92       	push	r5
     432:	6f 92       	push	r6
     434:	7f 92       	push	r7
     436:	8f 92       	push	r8
     438:	9f 92       	push	r9
     43a:	af 92       	push	r10
     43c:	bf 92       	push	r11
     43e:	cf 92       	push	r12
     440:	df 92       	push	r13
     442:	ef 92       	push	r14
     444:	ff 92       	push	r15
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	28 97       	sbiw	r28, 0x08	; 8
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
     45e:	6b 01       	movw	r12, r22
     460:	7c 01       	movw	r14, r24
     462:	1a 01       	movw	r2, r20
     464:	29 01       	movw	r4, r18
    unsigned long int DivFactor = 1;
	unsigned int n, m;
	unsigned int d[10];
    unsigned int valid = 0;
    
    for(n=0;n<Nfrac;n++){
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	4c 01       	movw	r8, r24
     46c:	0e c0       	rjmp	.+28     	; 0x48a <lcd_set_numeric+0x60>
        num = num * 10;
     46e:	c7 01       	movw	r24, r14
     470:	b6 01       	movw	r22, r12
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	40 e2       	ldi	r20, 0x20	; 32
     478:	51 e4       	ldi	r21, 0x41	; 65
     47a:	13 da       	rcall	.-3034   	; 0xfffff8a2 <__eeprom_end+0xff7ef8a2>
     47c:	c6 2e       	mov	r12, r22
     47e:	d7 2e       	mov	r13, r23
     480:	e8 2e       	mov	r14, r24
     482:	f9 2e       	mov	r15, r25
    unsigned long int DivFactor = 1;
	unsigned int n, m;
	unsigned int d[10];
    unsigned int valid = 0;
    
    for(n=0;n<Nfrac;n++){
     484:	08 94       	sec
     486:	81 1c       	adc	r8, r1
     488:	91 1c       	adc	r9, r1
     48a:	84 14       	cp	r8, r4
     48c:	95 04       	cpc	r9, r5
     48e:	79 f7       	brne	.-34     	; 0x46e <lcd_set_numeric+0x44>
        num = num * 10;
    }
    
    // Detect sign
    if( sign == 1){
     490:	01 30       	cpi	r16, 0x01	; 1
     492:	11 05       	cpc	r17, r1
     494:	71 f4       	brne	.+28     	; 0x4b2 <lcd_set_numeric+0x88>
        if( num < 0 ){
     496:	c7 01       	movw	r24, r14
     498:	b6 01       	movw	r22, r12
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	a9 01       	movw	r20, r18
     4a0:	b1 d8       	rcall	.-3742   	; 0xfffff604 <__eeprom_end+0xff7ef604>
     4a2:	87 ff       	sbrs	r24, 7
     4a4:	1a c0       	rjmp	.+52     	; 0x4da <lcd_set_numeric+0xb0>
            lcd_set_char('-');
     4a6:	8d e2       	ldi	r24, 0x2D	; 45
     4a8:	90 df       	rcall	.-224    	; 0x3ca <lcd_set_char>
            num = -num;
     4aa:	f7 fa       	bst	r15, 7
     4ac:	f0 94       	com	r15
     4ae:	f7 f8       	bld	r15, 7
     4b0:	f0 94       	com	r15
        for(m=n+1;m<Nint+Nfrac;m++){
            DivFactor = DivFactor * 10;
        }
        
        d[n] = (unsigned int)( num / DivFactor );
        if( (valid == 0) && ( d[n]!=0 || n==Nint-1) ) valid = 1;
     4b2:	00 e0       	ldi	r16, 0x00	; 0
     4b4:	10 e0       	ldi	r17, 0x00	; 0
     4b6:	66 24       	eor	r6, r6
     4b8:	77 24       	eor	r7, r7
            lcd_set_char('+');
        }
    }
    // end of
				
    for(n=0;n<=Nint+Nfrac-1;n++){
     4ba:	92 01       	movw	r18, r4
     4bc:	22 0d       	add	r18, r2
     4be:	33 1d       	adc	r19, r3
     4c0:	3a 83       	std	Y+2, r19	; 0x02
     4c2:	29 83       	std	Y+1, r18	; 0x01
     4c4:	21 50       	subi	r18, 0x01	; 1
     4c6:	30 40       	sbci	r19, 0x00	; 0
     4c8:	3c 83       	std	Y+4, r19	; 0x04
     4ca:	2b 83       	std	Y+3, r18	; 0x03
        for(m=n+1;m<Nint+Nfrac;m++){
            DivFactor = DivFactor * 10;
        }
        
        d[n] = (unsigned int)( num / DivFactor );
        if( (valid == 0) && ( d[n]!=0 || n==Nint-1) ) valid = 1;
     4cc:	c1 01       	movw	r24, r2
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	9e 83       	std	Y+6, r25	; 0x06
     4d2:	8d 83       	std	Y+5, r24	; 0x05
     4d4:	78 86       	std	Y+8, r7	; 0x08
     4d6:	6f 82       	std	Y+7, r6	; 0x07
     4d8:	64 c0       	rjmp	.+200    	; 0x5a2 <__stack+0xa3>
    if( sign == 1){
        if( num < 0 ){
            lcd_set_char('-');
            num = -num;
        }else{
            lcd_set_char('+');
     4da:	8b e2       	ldi	r24, 0x2B	; 43
     4dc:	76 df       	rcall	.-276    	; 0x3ca <lcd_set_char>
     4de:	e9 cf       	rjmp	.-46     	; 0x4b2 <lcd_set_numeric+0x88>
    }
    // end of
				
    for(n=0;n<=Nint+Nfrac-1;n++){
        
        if( ( n== Nint ) && ( Nfrac!=0 )){
     4e0:	02 15       	cp	r16, r2
     4e2:	13 05       	cpc	r17, r3
     4e4:	29 f4       	brne	.+10     	; 0x4f0 <lcd_set_numeric+0xc6>
     4e6:	41 14       	cp	r4, r1
     4e8:	51 04       	cpc	r5, r1
     4ea:	11 f0       	breq	.+4      	; 0x4f0 <lcd_set_numeric+0xc6>
            lcd_set_char('.');
     4ec:	8e e2       	ldi	r24, 0x2E	; 46
     4ee:	6d df       	rcall	.-294    	; 0x3ca <lcd_set_char>
        }
        
        DivFactor = 1;
        for(m=n+1;m<Nint+Nfrac;m++){
     4f0:	38 01       	movw	r6, r16
        
        if( ( n== Nint ) && ( Nfrac!=0 )){
            lcd_set_char('.');
        }
        
        DivFactor = 1;
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	88 2e       	mov	r8, r24
     4f6:	91 2c       	mov	r9, r1
     4f8:	a1 2c       	mov	r10, r1
     4fa:	b1 2c       	mov	r11, r1
     4fc:	c5 01       	movw	r24, r10
     4fe:	b4 01       	movw	r22, r8
        for(m=n+1;m<Nint+Nfrac;m++){
     500:	05 c0       	rjmp	.+10     	; 0x50c <__stack+0xd>
            DivFactor = DivFactor * 10;
     502:	2a e0       	ldi	r18, 0x0A	; 10
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	2e da       	rcall	.-2980   	; 0xfffff968 <__eeprom_end+0xff7ef968>
     50c:	08 94       	sec
     50e:	61 1c       	adc	r6, r1
     510:	71 1c       	adc	r7, r1
        if( ( n== Nint ) && ( Nfrac!=0 )){
            lcd_set_char('.');
        }
        
        DivFactor = 1;
        for(m=n+1;m<Nint+Nfrac;m++){
     512:	e9 81       	ldd	r30, Y+1	; 0x01
     514:	fa 81       	ldd	r31, Y+2	; 0x02
     516:	6e 16       	cp	r6, r30
     518:	7f 06       	cpc	r7, r31
     51a:	98 f3       	brcs	.-26     	; 0x502 <__stack+0x3>
     51c:	4b 01       	movw	r8, r22
     51e:	5c 01       	movw	r10, r24
            DivFactor = DivFactor * 10;
        }
        
        d[n] = (unsigned int)( num / DivFactor );
     520:	0e d9       	rcall	.-3556   	; 0xfffff73e <__eeprom_end+0xff7ef73e>
     522:	9b 01       	movw	r18, r22
     524:	ac 01       	movw	r20, r24
     526:	c7 01       	movw	r24, r14
     528:	b6 01       	movw	r22, r12
     52a:	70 d8       	rcall	.-3872   	; 0xfffff60c <__eeprom_end+0xff7ef60c>
     52c:	dc d8       	rcall	.-3656   	; 0xfffff6e6 <__eeprom_end+0xff7ef6e6>
     52e:	dc 01       	movw	r26, r24
     530:	cb 01       	movw	r24, r22
     532:	3c 01       	movw	r6, r24
        if( (valid == 0) && ( d[n]!=0 || n==Nint-1) ) valid = 1;
     534:	2f 81       	ldd	r18, Y+7	; 0x07
     536:	38 85       	ldd	r19, Y+8	; 0x08
     538:	21 15       	cp	r18, r1
     53a:	31 05       	cpc	r19, r1
     53c:	79 f4       	brne	.+30     	; 0x55c <__stack+0x5d>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	98 87       	std	Y+8, r25	; 0x08
     544:	8f 83       	std	Y+7, r24	; 0x07
     546:	61 14       	cp	r6, r1
     548:	71 04       	cpc	r7, r1
     54a:	61 f4       	brne	.+24     	; 0x564 <__stack+0x65>
     54c:	ed 81       	ldd	r30, Y+5	; 0x05
     54e:	fe 81       	ldd	r31, Y+6	; 0x06
     550:	0e 17       	cp	r16, r30
     552:	1f 07       	cpc	r17, r31
     554:	39 f0       	breq	.+14     	; 0x564 <__stack+0x65>
     556:	18 86       	std	Y+8, r1	; 0x08
     558:	1f 82       	std	Y+7, r1	; 0x07
     55a:	04 c0       	rjmp	.+8      	; 0x564 <__stack+0x65>
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	38 87       	std	Y+8, r19	; 0x08
     562:	2f 83       	std	Y+7, r18	; 0x07
        num = num - d[n]*DivFactor;
     564:	b3 01       	movw	r22, r6
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	a5 01       	movw	r20, r10
     56c:	94 01       	movw	r18, r8
     56e:	fc d9       	rcall	.-3080   	; 0xfffff968 <__eeprom_end+0xff7ef968>
     570:	e6 d8       	rcall	.-3636   	; 0xfffff73e <__eeprom_end+0xff7ef73e>
     572:	9b 01       	movw	r18, r22
     574:	ac 01       	movw	r20, r24
     576:	c7 01       	movw	r24, r14
     578:	b6 01       	movw	r22, r12
     57a:	df d7       	rcall	.+4030   	; 0x153a <__subsf3>
     57c:	6b 01       	movw	r12, r22
     57e:	e8 2e       	mov	r14, r24
     580:	f9 2e       	mov	r15, r25
        
        if( (valid == 1)|(n == (Nint+Nfrac-1)) ) lcd_set_char(0x30 + d[n]);
     582:	ef 81       	ldd	r30, Y+7	; 0x07
     584:	f8 85       	ldd	r31, Y+8	; 0x08
     586:	30 97       	sbiw	r30, 0x00	; 0
     588:	29 f4       	brne	.+10     	; 0x594 <__stack+0x95>
     58a:	2b 81       	ldd	r18, Y+3	; 0x03
     58c:	3c 81       	ldd	r19, Y+4	; 0x04
     58e:	02 17       	cp	r16, r18
     590:	13 07       	cpc	r17, r19
     592:	19 f4       	brne	.+6      	; 0x59a <__stack+0x9b>
     594:	86 2d       	mov	r24, r6
     596:	80 5d       	subi	r24, 0xD0	; 208
     598:	01 c0       	rjmp	.+2      	; 0x59c <__stack+0x9d>
        else if( valid == 0 )                   lcd_set_char(0x20);
     59a:	80 e2       	ldi	r24, 0x20	; 32
     59c:	16 df       	rcall	.-468    	; 0x3ca <lcd_set_char>
     59e:	0f 5f       	subi	r16, 0xFF	; 255
     5a0:	1f 4f       	sbci	r17, 0xFF	; 255
            lcd_set_char('+');
        }
    }
    // end of
				
    for(n=0;n<=Nint+Nfrac-1;n++){
     5a2:	8b 81       	ldd	r24, Y+3	; 0x03
     5a4:	9c 81       	ldd	r25, Y+4	; 0x04
     5a6:	80 17       	cp	r24, r16
     5a8:	91 07       	cpc	r25, r17
     5aa:	08 f0       	brcs	.+2      	; 0x5ae <__stack+0xaf>
     5ac:	99 cf       	rjmp	.-206    	; 0x4e0 <lcd_set_numeric+0xb6>
        
        if( (valid == 1)|(n == (Nint+Nfrac-1)) ) lcd_set_char(0x30 + d[n]);
        else if( valid == 0 )                   lcd_set_char(0x20);
        else                                    lcd_set_char(0xff);
    }
}
     5ae:	28 96       	adiw	r28, 0x08	; 8
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	f8 94       	cli
     5b4:	de bf       	out	0x3e, r29	; 62
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	cd bf       	out	0x3d, r28	; 61
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	df 90       	pop	r13
     5c8:	cf 90       	pop	r12
     5ca:	bf 90       	pop	r11
     5cc:	af 90       	pop	r10
     5ce:	9f 90       	pop	r9
     5d0:	8f 90       	pop	r8
     5d2:	7f 90       	pop	r7
     5d4:	6f 90       	pop	r6
     5d6:	5f 90       	pop	r5
     5d8:	4f 90       	pop	r4
     5da:	3f 90       	pop	r3
     5dc:	2f 90       	pop	r2
     5de:	08 95       	ret

000005e0 <lcd_clear>:

// Clear LCD
void lcd_clear(){
	// clear display
    RS      =   0;
     5e0:	10 92 c5 01 	sts	0x01C5, r1
	lcd_set_4bit(0x00);
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	6c de       	rcall	.-808    	; 0x2c0 <lcd_set_4bit>
	lcd_set_4bit(0x01);
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	6a de       	rcall	.-812    	; 0x2c0 <lcd_set_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ec:	8f e9       	ldi	r24, 0x9F	; 159
     5ee:	9f e0       	ldi	r25, 0x0F	; 15
     5f0:	01 97       	sbiw	r24, 0x01	; 1
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <lcd_clear+0x10>
     5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <lcd_clear+0x16>
     5f6:	00 00       	nop
	_delay_ms(1);
    RS      =   1;
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	80 93 c5 01 	sts	0x01C5, r24
	lcd_locate(0,0);
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	f3 de       	rcall	.-538    	; 0x3ea <lcd_locate>
}
     604:	08 95       	ret

00000606 <lcd_set_CGRAMaddr>:

// Set CGRAM address
void lcd_set_CGRAMaddr(unsigned char code,unsigned char addr)
{
	// set instruction input mode
    RS      =   0;
     606:	10 92 c5 01 	sts	0x01C5, r1
    lcd_set_char(0x40 | code<<3 | addr );
     60a:	60 64       	ori	r22, 0x40	; 64
     60c:	88 0f       	add	r24, r24
     60e:	88 0f       	add	r24, r24
     610:	88 0f       	add	r24, r24
     612:	86 2b       	or	r24, r22
     614:	da de       	rcall	.-588    	; 0x3ca <lcd_set_char>
	// set data input mode
    RS      =   1;
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	80 93 c5 01 	sts	0x01C5, r24
}
     61c:	08 95       	ret

0000061e <SoftSPI_LED_Init>:
unsigned char RS;
unsigned char DATA;

void SoftSPI_LED_Init(void){
    /*MOSI,SCK=出力、他は入力に設定 */
    DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RCK);
     61e:	84 b1       	in	r24, 0x04	; 4
     620:	88 63       	ori	r24, 0x38	; 56
     622:	84 b9       	out	0x04, r24	; 4
}
     624:	08 95       	ret

00000626 <SoftSPI_LED_TX>:

void SoftSPI_LED_TX(unsigned char cData){
     626:	27 e0       	ldi	r18, 0x07	; 7
     628:	30 e0       	ldi	r19, 0x00	; 0
    unsigned int n;
    for(n=0;n<8;n++){
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
        _delay_us(1);
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
     62a:	90 e0       	ldi	r25, 0x00	; 0
}

void SoftSPI_LED_TX(unsigned char cData){
    unsigned int n;
    for(n=0;n<8;n++){
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
     62c:	2c 98       	cbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     62e:	45 e0       	ldi	r20, 0x05	; 5
     630:	4a 95       	dec	r20
     632:	f1 f7       	brne	.-4      	; 0x630 <SoftSPI_LED_TX+0xa>
     634:	00 00       	nop
        _delay_us(1);
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
     636:	2b 98       	cbi	0x05, 3	; 5
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
     638:	65 b1       	in	r22, 0x05	; 5
     63a:	ac 01       	movw	r20, r24
     63c:	02 2e       	mov	r0, r18
     63e:	02 c0       	rjmp	.+4      	; 0x644 <SoftSPI_LED_TX+0x1e>
     640:	55 95       	asr	r21
     642:	47 95       	ror	r20
     644:	0a 94       	dec	r0
     646:	e2 f7       	brpl	.-8      	; 0x640 <SoftSPI_LED_TX+0x1a>
     648:	41 70       	andi	r20, 0x01	; 1
     64a:	50 70       	andi	r21, 0x00	; 0
     64c:	73 e0       	ldi	r23, 0x03	; 3
     64e:	44 0f       	add	r20, r20
     650:	55 1f       	adc	r21, r21
     652:	7a 95       	dec	r23
     654:	e1 f7       	brne	.-8      	; 0x64e <SoftSPI_LED_TX+0x28>
     656:	64 2b       	or	r22, r20
     658:	65 b9       	out	0x05, r22	; 5
     65a:	45 e0       	ldi	r20, 0x05	; 5
     65c:	4a 95       	dec	r20
     65e:	f1 f7       	brne	.-4      	; 0x65c <SoftSPI_LED_TX+0x36>
     660:	00 00       	nop
        _delay_us(1);
        PORT_SPI |= (1<<DD_SCK);                // Set SCK "H"
     662:	2c 9a       	sbi	0x05, 4	; 5
     664:	45 e0       	ldi	r20, 0x05	; 5
     666:	4a 95       	dec	r20
     668:	f1 f7       	brne	.-4      	; 0x666 <SoftSPI_LED_TX+0x40>
     66a:	00 00       	nop
     66c:	21 50       	subi	r18, 0x01	; 1
     66e:	30 40       	sbci	r19, 0x00	; 0
    DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RCK);
}

void SoftSPI_LED_TX(unsigned char cData){
    unsigned int n;
    for(n=0;n<8;n++){
     670:	4f ef       	ldi	r20, 0xFF	; 255
     672:	2f 3f       	cpi	r18, 0xFF	; 255
     674:	34 07       	cpc	r19, r20
     676:	d1 f6       	brne	.-76     	; 0x62c <SoftSPI_LED_TX+0x6>
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
        _delay_us(1);
        PORT_SPI |= (1<<DD_SCK);                // Set SCK "H"
        _delay_us(1);
    }
}
     678:	08 95       	ret

0000067a <send_bits_595_LED>:

void send_bits_595_LED(unsigned char DATA){
    unsigned char bits;
    bits = DATA;
    SoftSPI_LED_TX(bits);
     67a:	d5 df       	rcall	.-86     	; 0x626 <SoftSPI_LED_TX>
     67c:	85 e3       	ldi	r24, 0x35	; 53
     67e:	8a 95       	dec	r24
     680:	f1 f7       	brne	.-4      	; 0x67e <send_bits_595_LED+0x4>
     682:	00 00       	nop
    _delay_us(10);
    PORT_SPI &= ~(1<<DD_RCK);   // Set RCK "L"
     684:	2d 98       	cbi	0x05, 5	; 5
    PORT_SPI |=  (1<<DD_RCK);   // Set RCK "H"
     686:	2d 9a       	sbi	0x05, 5	; 5
    PORT_SPI &= ~(1<<DD_RCK);   // Set RCK "L"
     688:	2d 98       	cbi	0x05, 5	; 5
}
     68a:	08 95       	ret

0000068c <set_initial_t_id>:
};

// Measure Tarfet ID Declarations
uint8_t     t_id[Ndata];
void set_initial_t_id(){
    t_id[0] = 6;
     68c:	86 e0       	ldi	r24, 0x06	; 6
     68e:	80 93 d8 01 	sts	0x01D8, r24
    t_id[1] = 5;
     692:	85 e0       	ldi	r24, 0x05	; 5
     694:	80 93 d9 01 	sts	0x01D9, r24
    t_id[2] = 3;
     698:	83 e0       	ldi	r24, 0x03	; 3
     69a:	80 93 da 01 	sts	0x01DA, r24
    t_id[3] = 0;
     69e:	10 92 db 01 	sts	0x01DB, r1
}
     6a2:	08 95       	ret

000006a4 <FaceMark_init>:
    
    //code 0-5 is used in "BarMeter"
    // "ω"
    code = 6;
    addr = 0;
    lcd_set_CGRAMaddr(code,addr);
     6a4:	86 e0       	ldi	r24, 0x06	; 6
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	ae df       	rcall	.-164    	; 0x606 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00000000);
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	8e de       	rcall	.-740    	; 0x3ca <lcd_set_char>
    addr = 1;
    lcd_set_CGRAMaddr(code,addr);
     6ae:	86 e0       	ldi	r24, 0x06	; 6
     6b0:	61 e0       	ldi	r22, 0x01	; 1
     6b2:	a9 df       	rcall	.-174    	; 0x606 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00000000);
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	89 de       	rcall	.-750    	; 0x3ca <lcd_set_char>
    addr = 2;
    lcd_set_CGRAMaddr(code,addr);
     6b8:	86 e0       	ldi	r24, 0x06	; 6
     6ba:	62 e0       	ldi	r22, 0x02	; 2
     6bc:	a4 df       	rcall	.-184    	; 0x606 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00000000);
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	84 de       	rcall	.-760    	; 0x3ca <lcd_set_char>
    addr = 3;
    lcd_set_CGRAMaddr(code,addr);
     6c2:	86 e0       	ldi	r24, 0x06	; 6
     6c4:	63 e0       	ldi	r22, 0x03	; 3
     6c6:	9f df       	rcall	.-194    	; 0x606 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00000000);
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	7f de       	rcall	.-770    	; 0x3ca <lcd_set_char>
    addr = 4;
    lcd_set_CGRAMaddr(code,addr);
     6cc:	86 e0       	ldi	r24, 0x06	; 6
     6ce:	64 e0       	ldi	r22, 0x04	; 4
     6d0:	9a df       	rcall	.-204    	; 0x606 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010001);
     6d2:	81 e1       	ldi	r24, 0x11	; 17
     6d4:	7a de       	rcall	.-780    	; 0x3ca <lcd_set_char>
    addr = 5;
    lcd_set_CGRAMaddr(code,addr);
     6d6:	86 e0       	ldi	r24, 0x06	; 6
     6d8:	65 e0       	ldi	r22, 0x05	; 5
     6da:	95 df       	rcall	.-214    	; 0x606 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010101);
     6dc:	85 e1       	ldi	r24, 0x15	; 21
     6de:	75 de       	rcall	.-790    	; 0x3ca <lcd_set_char>
    addr = 6;
    lcd_set_CGRAMaddr(code,addr);
     6e0:	86 e0       	ldi	r24, 0x06	; 6
     6e2:	66 e0       	ldi	r22, 0x06	; 6
     6e4:	90 df       	rcall	.-224    	; 0x606 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010101);
     6e6:	85 e1       	ldi	r24, 0x15	; 21
     6e8:	70 de       	rcall	.-800    	; 0x3ca <lcd_set_char>
    addr = 7;
    lcd_set_CGRAMaddr(code,addr);
     6ea:	86 e0       	ldi	r24, 0x06	; 6
     6ec:	67 e0       	ldi	r22, 0x07	; 7
     6ee:	8b df       	rcall	.-234    	; 0x606 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00001010);
     6f0:	8a e0       	ldi	r24, 0x0A	; 10
     6f2:	6b de       	rcall	.-810    	; 0x3ca <lcd_set_char>
    
    // "Д"
    code = 7;
    addr = 0;
    lcd_set_CGRAMaddr(code,addr);
     6f4:	87 e0       	ldi	r24, 0x07	; 7
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	86 df       	rcall	.-244    	; 0x606 <lcd_set_CGRAMaddr>
    lcd_set_char(0x00);
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	66 de       	rcall	.-820    	; 0x3ca <lcd_set_char>
    addr = 1;
    lcd_set_CGRAMaddr(code,addr);
     6fe:	87 e0       	ldi	r24, 0x07	; 7
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	81 df       	rcall	.-254    	; 0x606 <lcd_set_CGRAMaddr>
    lcd_set_char(0x00);
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	61 de       	rcall	.-830    	; 0x3ca <lcd_set_char>
    addr = 2;
    lcd_set_CGRAMaddr(code,addr);
     708:	87 e0       	ldi	r24, 0x07	; 7
     70a:	62 e0       	ldi	r22, 0x02	; 2
     70c:	7c df       	rcall	.-264    	; 0x606 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00011100);
     70e:	8c e1       	ldi	r24, 0x1C	; 28
     710:	5c de       	rcall	.-840    	; 0x3ca <lcd_set_char>
    addr = 3;
    lcd_set_CGRAMaddr(code,addr);
     712:	87 e0       	ldi	r24, 0x07	; 7
     714:	63 e0       	ldi	r22, 0x03	; 3
     716:	77 df       	rcall	.-274    	; 0x606 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010100);
     718:	84 e1       	ldi	r24, 0x14	; 20
     71a:	57 de       	rcall	.-850    	; 0x3ca <lcd_set_char>
    addr = 4;
    lcd_set_CGRAMaddr(code,addr);
     71c:	87 e0       	ldi	r24, 0x07	; 7
     71e:	64 e0       	ldi	r22, 0x04	; 4
     720:	72 df       	rcall	.-284    	; 0x606 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010100);
     722:	84 e1       	ldi	r24, 0x14	; 20
     724:	52 de       	rcall	.-860    	; 0x3ca <lcd_set_char>
    addr = 5;
    lcd_set_CGRAMaddr(code,addr);
     726:	87 e0       	ldi	r24, 0x07	; 7
     728:	65 e0       	ldi	r22, 0x05	; 5
     72a:	6d df       	rcall	.-294    	; 0x606 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010010);
     72c:	82 e1       	ldi	r24, 0x12	; 18
     72e:	4d de       	rcall	.-870    	; 0x3ca <lcd_set_char>
    addr = 6;
    lcd_set_CGRAMaddr(code,addr);
     730:	87 e0       	ldi	r24, 0x07	; 7
     732:	66 e0       	ldi	r22, 0x06	; 6
     734:	68 df       	rcall	.-304    	; 0x606 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00011111);
     736:	8f e1       	ldi	r24, 0x1F	; 31
     738:	48 de       	rcall	.-880    	; 0x3ca <lcd_set_char>
    addr = 7;
    lcd_set_CGRAMaddr(code,addr);
     73a:	87 e0       	ldi	r24, 0x07	; 7
     73c:	67 e0       	ldi	r22, 0x07	; 7
     73e:	63 df       	rcall	.-314    	; 0x606 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010001);
     740:	81 e1       	ldi	r24, 0x11	; 17
     742:	43 de       	rcall	.-890    	; 0x3ca <lcd_set_char>
    
}
     744:	08 95       	ret

00000746 <shobon>:

void shobon(){
    lcd_set_char('(');
     746:	88 e2       	ldi	r24, 0x28	; 40
     748:	40 de       	rcall	.-896    	; 0x3ca <lcd_set_char>
    lcd_set_char(0x27);
     74a:	87 e2       	ldi	r24, 0x27	; 39
     74c:	3e de       	rcall	.-900    	; 0x3ca <lcd_set_char>
    lcd_set_char(0xa5);
     74e:	85 ea       	ldi	r24, 0xA5	; 165
     750:	3c de       	rcall	.-904    	; 0x3ca <lcd_set_char>
    lcd_set_char(0x06); // "ω"
     752:	86 e0       	ldi	r24, 0x06	; 6
     754:	3a de       	rcall	.-908    	; 0x3ca <lcd_set_char>
    lcd_set_char(0xa5);
     756:	85 ea       	ldi	r24, 0xA5	; 165
     758:	38 de       	rcall	.-912    	; 0x3ca <lcd_set_char>
    lcd_set_char(0x60);
     75a:	80 e6       	ldi	r24, 0x60	; 96
     75c:	36 de       	rcall	.-916    	; 0x3ca <lcd_set_char>
    lcd_set_char(')');
     75e:	89 e2       	ldi	r24, 0x29	; 41
     760:	34 de       	rcall	.-920    	; 0x3ca <lcd_set_char>
}
     762:	08 95       	ret

00000764 <shakin>:

void shakin(){
    lcd_set_char('(');
     764:	88 e2       	ldi	r24, 0x28	; 40
     766:	31 de       	rcall	.-926    	; 0x3ca <lcd_set_char>
    lcd_set_char(0x60);
     768:	80 e6       	ldi	r24, 0x60	; 96
     76a:	2f de       	rcall	.-930    	; 0x3ca <lcd_set_char>
    lcd_set_char(0xa5);
     76c:	85 ea       	ldi	r24, 0xA5	; 165
     76e:	2d de       	rcall	.-934    	; 0x3ca <lcd_set_char>
    lcd_set_char(0x06); // "ω"
     770:	86 e0       	ldi	r24, 0x06	; 6
     772:	2b de       	rcall	.-938    	; 0x3ca <lcd_set_char>
    lcd_set_char(0xa5);
     774:	85 ea       	ldi	r24, 0xA5	; 165
     776:	29 de       	rcall	.-942    	; 0x3ca <lcd_set_char>
    lcd_set_char(0x27);
     778:	87 e2       	ldi	r24, 0x27	; 39
     77a:	27 de       	rcall	.-946    	; 0x3ca <lcd_set_char>
    lcd_set_char(')');
     77c:	89 e2       	ldi	r24, 0x29	; 41
     77e:	25 de       	rcall	.-950    	; 0x3ca <lcd_set_char>
}
     780:	08 95       	ret

00000782 <kuwa>:

void kuwa(){
    lcd_set_char('(');
     782:	88 e2       	ldi	r24, 0x28	; 40
     784:	22 de       	rcall	.-956    	; 0x3ca <lcd_set_char>
    lcd_set_char(0xdf);
     786:	8f ed       	ldi	r24, 0xDF	; 223
     788:	20 de       	rcall	.-960    	; 0x3ca <lcd_set_char>
    lcd_set_char(0x07); // "Д"
     78a:	87 e0       	ldi	r24, 0x07	; 7
     78c:	1e de       	rcall	.-964    	; 0x3ca <lcd_set_char>
    lcd_set_char(0xdf);
     78e:	8f ed       	ldi	r24, 0xDF	; 223
     790:	1c de       	rcall	.-968    	; 0x3ca <lcd_set_char>
    lcd_set_char(')');
     792:	89 e2       	ldi	r24, 0x29	; 41
     794:	1a de       	rcall	.-972    	; 0x3ca <lcd_set_char>
}
     796:	08 95       	ret

00000798 <timer0_init>:


// 8-bit timer intialazation for PWM FuelPump Driver
unsigned long int   Ndiv0;
void timer0_init() {
    TCCR0A  = 0b10100001;	// Timer/Counter1 Control Register A
     798:	81 ea       	ldi	r24, 0xA1	; 161
     79a:	84 bd       	out	0x24, r24	; 36
    TCCR0B  = 0b00000010;
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	85 bd       	out	0x25, r24	; 37
    TIMSK0  = 0b00000001;   // ovfl interrupt is enabled for delay timer
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	80 93 6e 00 	sts	0x006E, r24
    TCNT0   = 0x00;         // Initialize 8-bit counter bit
     7a6:	16 bc       	out	0x26, r1	; 38
    OCR0A   = 0x80;         // 8-bit register for compare
     7a8:	80 e8       	ldi	r24, 0x80	; 128
     7aa:	87 bd       	out	0x27, r24	; 39

    switch( TCCR0B & 0b00000111 ){
     7ac:	85 b5       	in	r24, 0x25	; 37
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	87 70       	andi	r24, 0x07	; 7
     7b2:	90 70       	andi	r25, 0x00	; 0
     7b4:	83 30       	cpi	r24, 0x03	; 3
     7b6:	91 05       	cpc	r25, r1
     7b8:	b1 f0       	breq	.+44     	; 0x7e6 <timer0_init+0x4e>
     7ba:	84 30       	cpi	r24, 0x04	; 4
     7bc:	91 05       	cpc	r25, r1
     7be:	3c f4       	brge	.+14     	; 0x7ce <timer0_init+0x36>
     7c0:	81 30       	cpi	r24, 0x01	; 1
     7c2:	91 05       	cpc	r25, r1
     7c4:	f9 f0       	breq	.+62     	; 0x804 <timer0_init+0x6c>
     7c6:	82 30       	cpi	r24, 0x02	; 2
     7c8:	91 05       	cpc	r25, r1
     7ca:	e1 f4       	brne	.+56     	; 0x804 <timer0_init+0x6c>
     7cc:	07 c0       	rjmp	.+14     	; 0x7dc <timer0_init+0x44>
     7ce:	84 30       	cpi	r24, 0x04	; 4
     7d0:	91 05       	cpc	r25, r1
     7d2:	71 f0       	breq	.+28     	; 0x7f0 <timer0_init+0x58>
     7d4:	85 30       	cpi	r24, 0x05	; 5
     7d6:	91 05       	cpc	r25, r1
     7d8:	a9 f4       	brne	.+42     	; 0x804 <timer0_init+0x6c>
     7da:	0f c0       	rjmp	.+30     	; 0x7fa <timer0_init+0x62>
        case 0b001 :
            Ndiv0 = 1;
            break;
        case 0b010 :
            Ndiv0 = 8;
     7dc:	88 e0       	ldi	r24, 0x08	; 8
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	a0 e0       	ldi	r26, 0x00	; 0
     7e2:	b0 e0       	ldi	r27, 0x00	; 0
     7e4:	13 c0       	rjmp	.+38     	; 0x80c <timer0_init+0x74>
            break;
        case 0b011 :
            Ndiv0 = 64;
     7e6:	80 e4       	ldi	r24, 0x40	; 64
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	a0 e0       	ldi	r26, 0x00	; 0
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	0e c0       	rjmp	.+28     	; 0x80c <timer0_init+0x74>
            break;
        case 0b100 :
            Ndiv0 = 256;
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	a0 e0       	ldi	r26, 0x00	; 0
     7f6:	b0 e0       	ldi	r27, 0x00	; 0
     7f8:	09 c0       	rjmp	.+18     	; 0x80c <timer0_init+0x74>
            break;
        case 0b101 :
            Ndiv0 = 1024;
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	94 e0       	ldi	r25, 0x04	; 4
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	04 c0       	rjmp	.+8      	; 0x80c <timer0_init+0x74>
            break;
        default :
            Ndiv0 = 1;
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	a0 e0       	ldi	r26, 0x00	; 0
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	80 93 e4 01 	sts	0x01E4, r24
     810:	90 93 e5 01 	sts	0x01E5, r25
     814:	a0 93 e6 01 	sts	0x01E6, r26
     818:	b0 93 e7 01 	sts	0x01E7, r27
     81c:	08 95       	ret

0000081e <timer1_init>:
}

// 16-bit Counter intialazation for Tacho Meter
unsigned long int   Ndiv1;
void timer1_init() {
	TCCR1A  = 0b00000000;	// Timer/Counter1 Control Register A
     81e:	10 92 80 00 	sts	0x0080, r1
	TCCR1B  = 0b00000011;
     822:	83 e0       	ldi	r24, 0x03	; 3
     824:	80 93 81 00 	sts	0x0081, r24
	TCCR1C  = 0b00000000;
     828:	10 92 82 00 	sts	0x0082, r1
	TIMSK1  = 0b00000001;
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	80 93 6f 00 	sts	0x006F, r24
	TCNT1   = 0x0000;         // Initialize 16-bit counter bit
     832:	10 92 85 00 	sts	0x0085, r1
     836:	10 92 84 00 	sts	0x0084, r1
	OCR1A   = 0xffff;         // 16-bit register for compare
     83a:	8f ef       	ldi	r24, 0xFF	; 255
     83c:	9f ef       	ldi	r25, 0xFF	; 255
     83e:	90 93 89 00 	sts	0x0089, r25
     842:	80 93 88 00 	sts	0x0088, r24

    switch( TCCR1B & 0b00000111 ){
     846:	80 91 81 00 	lds	r24, 0x0081
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	87 70       	andi	r24, 0x07	; 7
     84e:	90 70       	andi	r25, 0x00	; 0
     850:	83 30       	cpi	r24, 0x03	; 3
     852:	91 05       	cpc	r25, r1
     854:	b1 f0       	breq	.+44     	; 0x882 <timer1_init+0x64>
     856:	84 30       	cpi	r24, 0x04	; 4
     858:	91 05       	cpc	r25, r1
     85a:	3c f4       	brge	.+14     	; 0x86a <timer1_init+0x4c>
     85c:	81 30       	cpi	r24, 0x01	; 1
     85e:	91 05       	cpc	r25, r1
     860:	f9 f0       	breq	.+62     	; 0x8a0 <timer1_init+0x82>
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	91 05       	cpc	r25, r1
     866:	e1 f4       	brne	.+56     	; 0x8a0 <timer1_init+0x82>
     868:	07 c0       	rjmp	.+14     	; 0x878 <timer1_init+0x5a>
     86a:	84 30       	cpi	r24, 0x04	; 4
     86c:	91 05       	cpc	r25, r1
     86e:	71 f0       	breq	.+28     	; 0x88c <timer1_init+0x6e>
     870:	85 30       	cpi	r24, 0x05	; 5
     872:	91 05       	cpc	r25, r1
     874:	a9 f4       	brne	.+42     	; 0x8a0 <timer1_init+0x82>
     876:	0f c0       	rjmp	.+30     	; 0x896 <timer1_init+0x78>
        case 0b001 :
            Ndiv1 = 1;
            break;
        case 0b010 :
            Ndiv1 = 8;
     878:	88 e0       	ldi	r24, 0x08	; 8
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	a0 e0       	ldi	r26, 0x00	; 0
     87e:	b0 e0       	ldi	r27, 0x00	; 0
     880:	13 c0       	rjmp	.+38     	; 0x8a8 <timer1_init+0x8a>
            break;
        case 0b011 :
            Ndiv1 = 64;
     882:	80 e4       	ldi	r24, 0x40	; 64
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	a0 e0       	ldi	r26, 0x00	; 0
     888:	b0 e0       	ldi	r27, 0x00	; 0
     88a:	0e c0       	rjmp	.+28     	; 0x8a8 <timer1_init+0x8a>
            break;
        case 0b100 :
            Ndiv1 = 256;
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	a0 e0       	ldi	r26, 0x00	; 0
     892:	b0 e0       	ldi	r27, 0x00	; 0
     894:	09 c0       	rjmp	.+18     	; 0x8a8 <timer1_init+0x8a>
            break;
        case 0b101 :
            Ndiv1 = 1024;
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	94 e0       	ldi	r25, 0x04	; 4
     89a:	a0 e0       	ldi	r26, 0x00	; 0
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	04 c0       	rjmp	.+8      	; 0x8a8 <timer1_init+0x8a>
            break;
        default :
            Ndiv1 = 1;
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	80 93 f6 01 	sts	0x01F6, r24
     8ac:	90 93 f7 01 	sts	0x01F7, r25
     8b0:	a0 93 f8 01 	sts	0x01F8, r26
     8b4:	b0 93 f9 01 	sts	0x01F9, r27
     8b8:	08 95       	ret

000008ba <StrLength>:
    }
    
}

// Count character length
int StrLength(const char *s){
     8ba:	fc 01       	movw	r30, r24
    int n = 0;
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	30 e0       	ldi	r19, 0x00	; 0
    while (*s++ != '\0')
     8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <StrLength+0xc>
        n++;
     8c2:	2f 5f       	subi	r18, 0xFF	; 255
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
}

// Count character length
int StrLength(const char *s){
    int n = 0;
    while (*s++ != '\0')
     8c6:	81 91       	ld	r24, Z+
     8c8:	88 23       	and	r24, r24
     8ca:	d9 f7       	brne	.-10     	; 0x8c2 <StrLength+0x8>
        n++;
    return (n);
}
     8cc:	c9 01       	movw	r24, r18
     8ce:	08 95       	ret

000008d0 <BubbleSort>:

// Bubble Sort (min->max)
void BubbleSort(){
     8d0:	af 92       	push	r10
     8d2:	bf 92       	push	r11
     8d4:	cf 92       	push	r12
     8d6:	df 92       	push	r13
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
	unsigned int tmp;
	unsigned int min;
	unsigned int min_index;
	unsigned int n,m;
	
	for(m=0;m<Nmed;m++){
     8e4:	95 ea       	ldi	r25, 0xA5	; 165
     8e6:	e9 2e       	mov	r14, r25
     8e8:	92 e0       	ldi	r25, 0x02	; 2
     8ea:	f9 2e       	mov	r15, r25
     8ec:	cc 24       	eor	r12, r12
     8ee:	dd 24       	eor	r13, r13
     8f0:	39 c0       	rjmp	.+114    	; 0x964 <BubbleSort+0x94>
        n++;
    return (n);
}

// Bubble Sort (min->max)
void BubbleSort(){
     8f2:	f7 01       	movw	r30, r14
     8f4:	ec 0f       	add	r30, r28
     8f6:	fd 1f       	adc	r31, r29
	unsigned int n,m;
	
	for(m=0;m<Nmed;m++){
		min = 0xffffffff;
		for(n=m;n<Nmed;n++){
			if( proc_array[n] < min ){
     8f8:	80 81       	ld	r24, Z
     8fa:	91 81       	ldd	r25, Z+1	; 0x01
     8fc:	a2 81       	ldd	r26, Z+2	; 0x02
     8fe:	b3 81       	ldd	r27, Z+3	; 0x03
     900:	a8 01       	movw	r20, r16
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	84 17       	cp	r24, r20
     908:	95 07       	cpc	r25, r21
     90a:	a6 07       	cpc	r26, r22
     90c:	b7 07       	cpc	r27, r23
     90e:	10 f4       	brcc	.+4      	; 0x914 <BubbleSort+0x44>
				min = proc_array[n];
     910:	8c 01       	movw	r16, r24
     912:	59 01       	movw	r10, r18
	unsigned int min_index;
	unsigned int n,m;
	
	for(m=0;m<Nmed;m++){
		min = 0xffffffff;
		for(n=m;n<Nmed;n++){
     914:	2f 5f       	subi	r18, 0xFF	; 255
     916:	3f 4f       	sbci	r19, 0xFF	; 255
     918:	24 96       	adiw	r28, 0x04	; 4
     91a:	20 32       	cpi	r18, 0x20	; 32
     91c:	31 05       	cpc	r19, r1
     91e:	49 f7       	brne	.-46     	; 0x8f2 <BubbleSort+0x22>
     920:	f5 01       	movw	r30, r10
			if( proc_array[n] < min ){
				min = proc_array[n];
				min_index = n;
			}
		}
		tmp                     = proc_array[m];
     922:	d7 01       	movw	r26, r14
     924:	2d 91       	ld	r18, X+
     926:	3c 91       	ld	r19, X
		proc_array[m]           = proc_array[min_index];
     928:	ee 0f       	add	r30, r30
     92a:	ff 1f       	adc	r31, r31
     92c:	ee 0f       	add	r30, r30
     92e:	ff 1f       	adc	r31, r31
     930:	eb 55       	subi	r30, 0x5B	; 91
     932:	fd 4f       	sbci	r31, 0xFD	; 253
     934:	80 81       	ld	r24, Z
     936:	91 81       	ldd	r25, Z+1	; 0x01
     938:	a2 81       	ldd	r26, Z+2	; 0x02
     93a:	b3 81       	ldd	r27, Z+3	; 0x03
     93c:	e7 01       	movw	r28, r14
     93e:	89 93       	st	Y+, r24
     940:	99 93       	st	Y+, r25
     942:	a9 93       	st	Y+, r26
     944:	b9 93       	st	Y+, r27
     946:	7e 01       	movw	r14, r28
		proc_array[min_index]   = tmp;
     948:	c9 01       	movw	r24, r18
     94a:	a0 e0       	ldi	r26, 0x00	; 0
     94c:	b0 e0       	ldi	r27, 0x00	; 0
     94e:	80 83       	st	Z, r24
     950:	91 83       	std	Z+1, r25	; 0x01
     952:	a2 83       	std	Z+2, r26	; 0x02
     954:	b3 83       	std	Z+3, r27	; 0x03
	unsigned int tmp;
	unsigned int min;
	unsigned int min_index;
	unsigned int n,m;
	
	for(m=0;m<Nmed;m++){
     956:	08 94       	sec
     958:	c1 1c       	adc	r12, r1
     95a:	d1 1c       	adc	r13, r1
     95c:	d0 e2       	ldi	r29, 0x20	; 32
     95e:	cd 16       	cp	r12, r29
     960:	d1 04       	cpc	r13, r1
     962:	31 f0       	breq	.+12     	; 0x970 <BubbleSort+0xa0>
        n++;
    return (n);
}

// Bubble Sort (min->max)
void BubbleSort(){
     964:	96 01       	movw	r18, r12
     966:	c0 e0       	ldi	r28, 0x00	; 0
     968:	d0 e0       	ldi	r29, 0x00	; 0
     96a:	0f ef       	ldi	r16, 0xFF	; 255
     96c:	1f ef       	ldi	r17, 0xFF	; 255
     96e:	c1 cf       	rjmp	.-126    	; 0x8f2 <BubbleSort+0x22>
		}
		tmp                     = proc_array[m];
		proc_array[m]           = proc_array[min_index];
		proc_array[min_index]   = tmp;
	}
}
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	ff 90       	pop	r15
     97a:	ef 90       	pop	r14
     97c:	df 90       	pop	r13
     97e:	cf 90       	pop	r12
     980:	bf 90       	pop	r11
     982:	af 90       	pop	r10
     984:	08 95       	ret

00000986 <DisplayItemInfo>:

// Display
void DisplayItemInfo(void){
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	c8 ed       	ldi	r28, 0xD8	; 216
     98e:	d1 e0       	ldi	r29, 0x01	; 1
     990:	10 e0       	ldi	r17, 0x00	; 0
	int k=0;
	for(k=0;k<Ndata;k++){
		lcd_locate(k,0);
     992:	81 2f       	mov	r24, r17
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	29 dd       	rcall	.-1454   	; 0x3ea <lcd_locate>
		lcd_set_str((unsigned char*)RxName[t_id[k]]);
     998:	e9 91       	ld	r30, Y+
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	ee 0f       	add	r30, r30
     99e:	ff 1f       	adc	r31, r31
     9a0:	ea 53       	subi	r30, 0x3A	; 58
     9a2:	fe 4f       	sbci	r31, 0xFE	; 254
     9a4:	80 81       	ld	r24, Z
     9a6:	91 81       	ldd	r25, Z+1	; 0x01
     9a8:	35 dd       	rcall	.-1430   	; 0x414 <lcd_set_str>
     9aa:	1f 5f       	subi	r17, 0xFF	; 255
}

// Display
void DisplayItemInfo(void){
	int k=0;
	for(k=0;k<Ndata;k++){
     9ac:	14 30       	cpi	r17, 0x04	; 4
     9ae:	89 f7       	brne	.-30     	; 0x992 <DisplayItemInfo+0xc>
		lcd_locate(k,0);
		lcd_set_str((unsigned char*)RxName[t_id[k]]);
	}
	
}
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	08 95       	ret

000009b8 <__vector_18>:

ISR(USART_RX_vect){
     9b8:	1f 92       	push	r1
     9ba:	0f 92       	push	r0
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	0f 92       	push	r0
     9c0:	11 24       	eor	r1, r1
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	2f 93       	push	r18
     9c8:	3f 93       	push	r19
     9ca:	4f 93       	push	r20
     9cc:	5f 93       	push	r21
     9ce:	6f 93       	push	r22
     9d0:	7f 93       	push	r23
     9d2:	8f 93       	push	r24
     9d4:	9f 93       	push	r25
     9d6:	af 93       	push	r26
     9d8:	bf 93       	push	r27
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	ef 93       	push	r30
     9e0:	ff 93       	push	r31
    unsigned int    ID;
    unsigned int    n, m;

    ID = USART_receive_woTO(); // Synchronize & Detect receiver ID
     9e2:	f4 d0       	rcall	.+488    	; 0xbcc <USART_receive_woTO>
     9e4:	28 2f       	mov	r18, r24
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	a8 ed       	ldi	r26, 0xD8	; 216
     9ea:	b1 e0       	ldi	r27, 0x01	; 1
    for(n=0;n<Ndata;n++){
     9ec:	c0 e0       	ldi	r28, 0x00	; 0
     9ee:	d0 e0       	ldi	r29, 0x00	; 0
        if ( ID == RxID[t_id[n]] ){
     9f0:	ed 91       	ld	r30, X+
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	ed 54       	subi	r30, 0x4D	; 77
     9f6:	fe 4f       	sbci	r31, 0xFE	; 254
     9f8:	80 81       	ld	r24, Z
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	28 17       	cp	r18, r24
     9fe:	39 07       	cpc	r19, r25
     a00:	99 f4       	brne	.+38     	; 0xa28 <__vector_18+0x70>
     a02:	00 e0       	ldi	r16, 0x00	; 0
     a04:	10 e0       	ldi	r17, 0x00	; 0
		lcd_set_str((unsigned char*)RxName[t_id[k]]);
	}
	
}

ISR(USART_RX_vect){
     a06:	cc 0f       	add	r28, r28
     a08:	dd 1f       	adc	r29, r29
     a0a:	cc 0f       	add	r28, r28
     a0c:	dd 1f       	adc	r29, r29
     a0e:	c4 50       	subi	r28, 0x04	; 4
     a10:	de 4f       	sbci	r29, 0xFE	; 254

    ID = USART_receive_woTO(); // Synchronize & Detect receiver ID
    for(n=0;n<Ndata;n++){
        if ( ID == RxID[t_id[n]] ){
            for(m=0;m<4;m++){
                data[n][m] = USART_receive_wTO();
     a12:	f5 d0       	rcall	.+490    	; 0xbfe <USART_receive_wTO>
		lcd_set_str((unsigned char*)RxName[t_id[k]]);
	}
	
}

ISR(USART_RX_vect){
     a14:	fe 01       	movw	r30, r28
     a16:	e0 0f       	add	r30, r16
     a18:	f1 1f       	adc	r31, r17

    ID = USART_receive_woTO(); // Synchronize & Detect receiver ID
    for(n=0;n<Ndata;n++){
        if ( ID == RxID[t_id[n]] ){
            for(m=0;m<4;m++){
                data[n][m] = USART_receive_wTO();
     a1a:	80 83       	st	Z, r24
    unsigned int    n, m;

    ID = USART_receive_woTO(); // Synchronize & Detect receiver ID
    for(n=0;n<Ndata;n++){
        if ( ID == RxID[t_id[n]] ){
            for(m=0;m<4;m++){
     a1c:	0f 5f       	subi	r16, 0xFF	; 255
     a1e:	1f 4f       	sbci	r17, 0xFF	; 255
     a20:	04 30       	cpi	r16, 0x04	; 4
     a22:	11 05       	cpc	r17, r1
     a24:	b1 f7       	brne	.-20     	; 0xa12 <__vector_18+0x5a>
     a26:	04 c0       	rjmp	.+8      	; 0xa30 <__vector_18+0x78>
ISR(USART_RX_vect){
    unsigned int    ID;
    unsigned int    n, m;

    ID = USART_receive_woTO(); // Synchronize & Detect receiver ID
    for(n=0;n<Ndata;n++){
     a28:	21 96       	adiw	r28, 0x01	; 1
     a2a:	c4 30       	cpi	r28, 0x04	; 4
     a2c:	d1 05       	cpc	r29, r1
     a2e:	01 f7       	brne	.-64     	; 0x9f0 <__vector_18+0x38>
                data[n][m] = USART_receive_wTO();
            }
            break;
        }
    }
}
     a30:	ff 91       	pop	r31
     a32:	ef 91       	pop	r30
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	bf 91       	pop	r27
     a3a:	af 91       	pop	r26
     a3c:	9f 91       	pop	r25
     a3e:	8f 91       	pop	r24
     a40:	7f 91       	pop	r23
     a42:	6f 91       	pop	r22
     a44:	5f 91       	pop	r21
     a46:	4f 91       	pop	r20
     a48:	3f 91       	pop	r19
     a4a:	2f 91       	pop	r18
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	0f 90       	pop	r0
     a56:	1f 90       	pop	r1
     a58:	18 95       	reti

00000a5a <__vector_1>:

ISR(INT0_vect){
     a5a:	1f 92       	push	r1
     a5c:	0f 92       	push	r0
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	0f 92       	push	r0
     a62:	11 24       	eor	r1, r1
     a64:	4f 93       	push	r20
     a66:	5f 93       	push	r21
     a68:	6f 93       	push	r22
     a6a:	7f 93       	push	r23
     a6c:	8f 93       	push	r24
     a6e:	9f 93       	push	r25
     a70:	ef 93       	push	r30
     a72:	ff 93       	push	r31
    if( TCNT1 > TCNT_LIM ){
     a74:	80 91 84 00 	lds	r24, 0x0084
     a78:	90 91 85 00 	lds	r25, 0x0085
     a7c:	85 31       	cpi	r24, 0x15	; 21
     a7e:	91 05       	cpc	r25, r1
     a80:	30 f1       	brcs	.+76     	; 0xace <__vector_1+0x74>
        meas_array[tacho_n] = TCNT1;
     a82:	80 91 bf 01 	lds	r24, 0x01BF
     a86:	90 91 c0 01 	lds	r25, 0x01C0
     a8a:	40 91 84 00 	lds	r20, 0x0084
     a8e:	50 91 85 00 	lds	r21, 0x0085
     a92:	fc 01       	movw	r30, r24
     a94:	ee 0f       	add	r30, r30
     a96:	ff 1f       	adc	r31, r31
     a98:	ee 0f       	add	r30, r30
     a9a:	ff 1f       	adc	r31, r31
     a9c:	e4 5f       	subi	r30, 0xF4	; 244
     a9e:	fd 4f       	sbci	r31, 0xFD	; 253
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	40 83       	st	Z, r20
     aa6:	51 83       	std	Z+1, r21	; 0x01
     aa8:	62 83       	std	Z+2, r22	; 0x02
     aaa:	73 83       	std	Z+3, r23	; 0x03
        if( tacho_n == Nmed-1 ) tacho_n=0;
     aac:	8f 31       	cpi	r24, 0x1F	; 31
     aae:	91 05       	cpc	r25, r1
     ab0:	29 f4       	brne	.+10     	; 0xabc <__vector_1+0x62>
     ab2:	10 92 c0 01 	sts	0x01C0, r1
     ab6:	10 92 bf 01 	sts	0x01BF, r1
     aba:	05 c0       	rjmp	.+10     	; 0xac6 <__vector_1+0x6c>
        else                    tacho_n++;
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	90 93 c0 01 	sts	0x01C0, r25
     ac2:	80 93 bf 01 	sts	0x01BF, r24
        TCNT1 = 0;
     ac6:	10 92 85 00 	sts	0x0085, r1
     aca:	10 92 84 00 	sts	0x0084, r1
    }
}
     ace:	ff 91       	pop	r31
     ad0:	ef 91       	pop	r30
     ad2:	9f 91       	pop	r25
     ad4:	8f 91       	pop	r24
     ad6:	7f 91       	pop	r23
     ad8:	6f 91       	pop	r22
     ada:	5f 91       	pop	r21
     adc:	4f 91       	pop	r20
     ade:	0f 90       	pop	r0
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	0f 90       	pop	r0
     ae4:	1f 90       	pop	r1
     ae6:	18 95       	reti

00000ae8 <__vector_16>:

// 8-bit Timer overflow
ISR(TIMER0_OVF_vect){
     ae8:	1f 92       	push	r1
     aea:	0f 92       	push	r0
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	0f 92       	push	r0
     af0:	11 24       	eor	r1, r1
     af2:	8f 93       	push	r24
    timer0_extd++;
     af4:	80 91 be 01 	lds	r24, 0x01BE
     af8:	8f 5f       	subi	r24, 0xFF	; 255
     afa:	80 93 be 01 	sts	0x01BE, r24
}
     afe:	8f 91       	pop	r24
     b00:	0f 90       	pop	r0
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	0f 90       	pop	r0
     b06:	1f 90       	pop	r1
     b08:	18 95       	reti

00000b0a <__vector_13>:

// 16-bit Timer overflow
ISR(TIMER1_OVF_vect){
     b0a:	1f 92       	push	r1
     b0c:	0f 92       	push	r0
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	0f 92       	push	r0
     b12:	11 24       	eor	r1, r1
     b14:	4f 93       	push	r20
     b16:	5f 93       	push	r21
     b18:	6f 93       	push	r22
     b1a:	7f 93       	push	r23
     b1c:	8f 93       	push	r24
     b1e:	9f 93       	push	r25
     b20:	ef 93       	push	r30
     b22:	ff 93       	push	r31
    meas_array[tacho_n] = 0xffffffff;
     b24:	80 91 bf 01 	lds	r24, 0x01BF
     b28:	90 91 c0 01 	lds	r25, 0x01C0
     b2c:	fc 01       	movw	r30, r24
     b2e:	ee 0f       	add	r30, r30
     b30:	ff 1f       	adc	r31, r31
     b32:	ee 0f       	add	r30, r30
     b34:	ff 1f       	adc	r31, r31
     b36:	e4 5f       	subi	r30, 0xF4	; 244
     b38:	fd 4f       	sbci	r31, 0xFD	; 253
     b3a:	4f ef       	ldi	r20, 0xFF	; 255
     b3c:	5f ef       	ldi	r21, 0xFF	; 255
     b3e:	ba 01       	movw	r22, r20
     b40:	40 83       	st	Z, r20
     b42:	51 83       	std	Z+1, r21	; 0x01
     b44:	62 83       	std	Z+2, r22	; 0x02
     b46:	73 83       	std	Z+3, r23	; 0x03
    if( tacho_n == Nmed-1 ) tacho_n=0;
     b48:	8f 31       	cpi	r24, 0x1F	; 31
     b4a:	91 05       	cpc	r25, r1
     b4c:	29 f4       	brne	.+10     	; 0xb58 <__vector_13+0x4e>
     b4e:	10 92 c0 01 	sts	0x01C0, r1
     b52:	10 92 bf 01 	sts	0x01BF, r1
     b56:	05 c0       	rjmp	.+10     	; 0xb62 <__vector_13+0x58>
    else                    tacho_n++;
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	90 93 c0 01 	sts	0x01C0, r25
     b5e:	80 93 bf 01 	sts	0x01BF, r24
    TCNT1 = 0;
     b62:	10 92 85 00 	sts	0x0085, r1
     b66:	10 92 84 00 	sts	0x0084, r1
}
     b6a:	ff 91       	pop	r31
     b6c:	ef 91       	pop	r30
     b6e:	9f 91       	pop	r25
     b70:	8f 91       	pop	r24
     b72:	7f 91       	pop	r23
     b74:	6f 91       	pop	r22
     b76:	5f 91       	pop	r21
     b78:	4f 91       	pop	r20
     b7a:	0f 90       	pop	r0
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	0f 90       	pop	r0
     b80:	1f 90       	pop	r1
     b82:	18 95       	reti

00000b84 <__vector_default>:

// Bad ISR interrput detector for debugging
ISR(BADISR_vect){
     b84:	1f 92       	push	r1
     b86:	0f 92       	push	r0
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	0f 92       	push	r0
     b8c:	11 24       	eor	r1, r1
    cli();    // これ以上割り込ませない
     b8e:	f8 94       	cli
    lcd_locate(0,0);
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	2a dc       	rcall	.-1964   	; 0x3ea <lcd_locate>
    lcd_set_str("BADISR ERROR");
     b96:	84 e0       	ldi	r24, 0x04	; 4
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	3c dc       	rcall	.-1928   	; 0x414 <lcd_set_str>
     b9c:	ff cf       	rjmp	.-2      	; 0xb9c <__vector_default+0x18>

00000b9e <USARTinit>:
#define UBRR FOSC/16/BAUD-1 
*/

// USART initialize
void USARTinit(unsigned int ubrr){
	UBRR0H = (unsigned char)(ubrr>>8);
     b9e:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     ba2:	80 93 c4 00 	sts	0x00C4, r24
								//   '000' : 5bit
								//   '001' : 6bit
								//   '010' : 7bit
								//   '011' : 8bit
	unsigned int U2X = 0;		// Over clocking operation
	UCSR0B = (RCIE<<7)|(TCIE<<6)|(TRIE<<5)|(RE<<4)|(TE<<3)|((Nb>>2)<<2);
     ba6:	80 e9       	ldi	r24, 0x90	; 144
     ba8:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (Mode<<6)|(Pari<<4)|(STPB<<3)|(Nb<<1)|(CLKE);
     bac:	86 e2       	ldi	r24, 0x26	; 38
     bae:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0A = U2X<<1;
     bb2:	10 92 c0 00 	sts	0x00C0, r1
}
     bb6:	08 95       	ret

00000bb8 <USART_transmit>:

// USART transmit
void USART_transmit(unsigned char data){
	while(!(USART_STATUS & (1<<UDRE0)));	// Wait until tx buffer is empty
     bb8:	90 91 c0 00 	lds	r25, 0x00C0
     bbc:	95 ff       	sbrs	r25, 5
     bbe:	fc cf       	rjmp	.-8      	; 0xbb8 <USART_transmit>
	UDR0 = data;
     bc0:	80 93 c6 00 	sts	0x00C6, r24
}
     bc4:	08 95       	ret

00000bc6 <USART_receive>:


// USART receive without wait & Error rejection
unsigned char USART_receive(void){
	return UDR0;
     bc6:	80 91 c6 00 	lds	r24, 0x00C6
}
     bca:	08 95       	ret

00000bcc <USART_receive_woTO>:

// USART receive w/o. Time-out
unsigned char USART_receive_woTO(void){
	unsigned char error_data;
	while(!(USART_STATUS & (1<<RXC0)));	// Wait receive process
     bcc:	80 91 c0 00 	lds	r24, 0x00C0
     bd0:	87 ff       	sbrs	r24, 7
     bd2:	fc cf       	rjmp	.-8      	; 0xbcc <USART_receive_woTO>
	if ( !( ( USART_STATUS & (1<< FE0))
     bd4:	20 91 c0 00 	lds	r18, 0x00C0
	      | ( USART_STATUS & (1<<UPE0)) ) ){	// detect framing & parity error
     bd8:	80 91 c0 00 	lds	r24, 0x00C0
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	84 70       	andi	r24, 0x04	; 4
     be0:	90 70       	andi	r25, 0x00	; 0

// USART receive w/o. Time-out
unsigned char USART_receive_woTO(void){
	unsigned char error_data;
	while(!(USART_STATUS & (1<<RXC0)));	// Wait receive process
	if ( !( ( USART_STATUS & (1<< FE0))
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	20 71       	andi	r18, 0x10	; 16
     be6:	30 70       	andi	r19, 0x00	; 0
	      | ( USART_STATUS & (1<<UPE0)) ) ){	// detect framing & parity error
     be8:	82 2b       	or	r24, r18
     bea:	93 2b       	or	r25, r19

// USART receive w/o. Time-out
unsigned char USART_receive_woTO(void){
	unsigned char error_data;
	while(!(USART_STATUS & (1<<RXC0)));	// Wait receive process
	if ( !( ( USART_STATUS & (1<< FE0))
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	19 f4       	brne	.+6      	; 0xbf6 <USART_receive_woTO+0x2a>
	      | ( USART_STATUS & (1<<UPE0)) ) ){	// detect framing & parity error
		return UDR0;
     bf0:	80 91 c6 00 	lds	r24, 0x00C6
     bf4:	08 95       	ret
	}else{
		error_data = UDR0;
     bf6:	80 91 c6 00 	lds	r24, 0x00C6
		return 0xff;
     bfa:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
     bfc:	08 95       	ret

00000bfe <USART_receive_wTO>:
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	95 e0       	ldi	r25, 0x05	; 5
     c02:	20 91 c0 00 	lds	r18, 0x00C0
     c06:	27 ff       	sbrs	r18, 7
     c08:	15 c0       	rjmp	.+42     	; 0xc34 <USART_receive_wTO+0x36>
     c0a:	20 91 c0 00 	lds	r18, 0x00C0
     c0e:	80 91 c0 00 	lds	r24, 0x00C0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	84 70       	andi	r24, 0x04	; 4
     c16:	90 70       	andi	r25, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	20 71       	andi	r18, 0x10	; 16
     c1c:	30 70       	andi	r19, 0x00	; 0
     c1e:	82 2b       	or	r24, r18
     c20:	93 2b       	or	r25, r19
     c22:	00 97       	sbiw	r24, 0x00	; 0
     c24:	19 f4       	brne	.+6      	; 0xc2c <USART_receive_wTO+0x2e>
     c26:	80 91 c6 00 	lds	r24, 0x00C6
     c2a:	08 95       	ret
     c2c:	80 91 c6 00 	lds	r24, 0x00C6
     c30:	8f ef       	ldi	r24, 0xFF	; 255
     c32:	08 95       	ret
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	29 f7       	brne	.-54     	; 0xc02 <USART_receive_wTO+0x4>
     c38:	8f ef       	ldi	r24, 0xFF	; 255
     c3a:	08 95       	ret

00000c3c <main>:
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	c1 56       	subi	r28, 0x61	; 97
     c46:	d0 40       	sbci	r29, 0x00	; 0
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	fc da       	rcall	.-2568   	; 0x24c <SoftSPI_Init>
     c54:	e4 dc       	rcall	.-1592   	; 0x61e <SoftSPI_LED_Init>
     c56:	50 db       	rcall	.-2400   	; 0x2f8 <lcd_init>
     c58:	9f dd       	rcall	.-1218   	; 0x798 <timer0_init>
     c5a:	56 9a       	sbi	0x0a, 6	; 10
     c5c:	e0 dd       	rcall	.-1088   	; 0x81e <timer1_init>
     c5e:	83 e3       	ldi	r24, 0x33	; 51
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	9d df       	rcall	.-198    	; 0xb9e <USARTinit>
     c64:	b4 da       	rcall	.-2712   	; 0x1ce <ExtInterrupt_init>
     c66:	02 da       	rcall	.-3068   	; 0x6c <BarMeter_init>
     c68:	1d dd       	rcall	.-1478   	; 0x6a4 <FaceMark_init>
     c6a:	10 dd       	rcall	.-1504   	; 0x68c <set_initial_t_id>
     c6c:	60 91 e4 01 	lds	r22, 0x01E4
     c70:	70 91 e5 01 	lds	r23, 0x01E5
     c74:	80 91 e6 01 	lds	r24, 0x01E6
     c78:	90 91 e7 01 	lds	r25, 0x01E7
     c7c:	60 d5       	rcall	.+2752   	; 0x173e <__floatunsisf>
     c7e:	9b 01       	movw	r18, r22
     c80:	ac 01       	movw	r20, r24
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	74 e2       	ldi	r23, 0x24	; 36
     c86:	84 e7       	ldi	r24, 0x74	; 116
     c88:	9b e4       	ldi	r25, 0x4B	; 75
     c8a:	c0 d4       	rcall	.+2432   	; 0x160c <__divsf3>
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	4a e7       	ldi	r20, 0x7A	; 122
     c92:	54 e4       	ldi	r21, 0x44	; 68
     c94:	06 d6       	rcall	.+3084   	; 0x18a2 <__mulsf3>
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	4a e7       	ldi	r20, 0x7A	; 122
     c9c:	54 e4       	ldi	r21, 0x44	; 68
     c9e:	b6 d4       	rcall	.+2412   	; 0x160c <__divsf3>
     ca0:	22 d5       	rcall	.+2628   	; 0x16e6 <__fixunssfsi>
     ca2:	dc 01       	movw	r26, r24
     ca4:	cb 01       	movw	r24, r22
     ca6:	90 93 b1 01 	sts	0x01B1, r25
     caa:	80 93 b0 01 	sts	0x01B0, r24
     cae:	de 01       	movw	r26, r28
     cb0:	d9 96       	adiw	r26, 0x39	; 57
     cb2:	e6 e8       	ldi	r30, 0x86	; 134
     cb4:	f1 e0       	ldi	r31, 0x01	; 1
     cb6:	8e e0       	ldi	r24, 0x0E	; 14
     cb8:	01 90       	ld	r0, Z+
     cba:	0d 92       	st	X+, r0
     cbc:	81 50       	subi	r24, 0x01	; 1
     cbe:	e1 f7       	brne	.-8      	; 0xcb8 <main+0x7c>
     cc0:	de 01       	movw	r26, r28
     cc2:	9b 96       	adiw	r26, 0x2b	; 43
     cc4:	e4 e9       	ldi	r30, 0x94	; 148
     cc6:	f1 e0       	ldi	r31, 0x01	; 1
     cc8:	8e e0       	ldi	r24, 0x0E	; 14
     cca:	01 90       	ld	r0, Z+
     ccc:	0d 92       	st	X+, r0
     cce:	81 50       	subi	r24, 0x01	; 1
     cd0:	e1 f7       	brne	.-8      	; 0xcca <main+0x8e>
     cd2:	de 01       	movw	r26, r28
     cd4:	94 96       	adiw	r26, 0x24	; 36
     cd6:	e2 ea       	ldi	r30, 0xA2	; 162
     cd8:	f1 e0       	ldi	r31, 0x01	; 1
     cda:	87 e0       	ldi	r24, 0x07	; 7
     cdc:	01 90       	ld	r0, Z+
     cde:	0d 92       	st	X+, r0
     ce0:	81 50       	subi	r24, 0x01	; 1
     ce2:	e1 f7       	brne	.-8      	; 0xcdc <main+0xa0>
     ce4:	de 01       	movw	r26, r28
     ce6:	5d 96       	adiw	r26, 0x1d	; 29
     ce8:	e9 ea       	ldi	r30, 0xA9	; 169
     cea:	f1 e0       	ldi	r31, 0x01	; 1
     cec:	87 e0       	ldi	r24, 0x07	; 7
     cee:	01 90       	ld	r0, Z+
     cf0:	0d 92       	st	X+, r0
     cf2:	81 50       	subi	r24, 0x01	; 1
     cf4:	e1 f7       	brne	.-8      	; 0xcee <main+0xb2>
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	8e 8b       	std	Y+22, r24	; 0x16
     cfa:	1f 8a       	std	Y+23, r1	; 0x17
     cfc:	18 8e       	std	Y+24, r1	; 0x18
     cfe:	19 8e       	std	Y+25, r1	; 0x19
     d00:	1a 8e       	std	Y+26, r1	; 0x1a
     d02:	1b 8e       	std	Y+27, r1	; 0x1b
     d04:	1c 8e       	std	Y+28, r1	; 0x1c
     d06:	80 e5       	ldi	r24, 0x50	; 80
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	90 93 c7 01 	sts	0x01C7, r25
     d0e:	80 93 c6 01 	sts	0x01C6, r24
     d12:	86 e5       	ldi	r24, 0x56	; 86
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	90 93 c9 01 	sts	0x01C9, r25
     d1a:	80 93 c8 01 	sts	0x01C8, r24
     d1e:	8c e5       	ldi	r24, 0x5C	; 92
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	90 93 cb 01 	sts	0x01CB, r25
     d26:	80 93 ca 01 	sts	0x01CA, r24
     d2a:	82 e6       	ldi	r24, 0x62	; 98
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	90 93 cd 01 	sts	0x01CD, r25
     d32:	80 93 cc 01 	sts	0x01CC, r24
     d36:	89 e6       	ldi	r24, 0x69	; 105
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	90 93 cf 01 	sts	0x01CF, r25
     d3e:	80 93 ce 01 	sts	0x01CE, r24
     d42:	8f e6       	ldi	r24, 0x6F	; 111
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	90 93 d1 01 	sts	0x01D1, r25
     d4a:	80 93 d0 01 	sts	0x01D0, r24
     d4e:	85 e7       	ldi	r24, 0x75	; 117
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	90 93 d3 01 	sts	0x01D3, r25
     d56:	80 93 d2 01 	sts	0x01D2, r24
     d5a:	44 e2       	ldi	r20, 0x24	; 36
     d5c:	84 2e       	mov	r8, r20
     d5e:	91 2c       	mov	r9, r1
     d60:	8c 0e       	add	r8, r28
     d62:	9d 1e       	adc	r9, r29
     d64:	5d e1       	ldi	r21, 0x1D	; 29
     d66:	a5 2e       	mov	r10, r21
     d68:	b1 2c       	mov	r11, r1
     d6a:	ac 0e       	add	r10, r28
     d6c:	bd 1e       	adc	r11, r29
     d6e:	00 e0       	ldi	r16, 0x00	; 0
     d70:	10 e0       	ldi	r17, 0x00	; 0
     d72:	6b e0       	ldi	r22, 0x0B	; 11
     d74:	f6 2e       	mov	r15, r22
     d76:	2e c0       	rjmp	.+92     	; 0xdd4 <main+0x198>
     d78:	4f 5f       	subi	r20, 0xFF	; 255
     d7a:	24 2f       	mov	r18, r20
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	28 17       	cp	r18, r24
     d80:	39 07       	cpc	r19, r25
     d82:	d4 f3       	brlt	.-12     	; 0xd78 <main+0x13c>
     d84:	f8 01       	movw	r30, r16
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	ea 53       	subi	r30, 0x3A	; 58
     d8c:	fe 4f       	sbci	r31, 0xFE	; 254
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	93 dd       	rcall	.-1242   	; 0x8ba <StrLength>
     d94:	f8 01       	movw	r30, r16
     d96:	e4 57       	subi	r30, 0x74	; 116
     d98:	fd 4f       	sbci	r31, 0xFD	; 253
     d9a:	80 83       	st	Z, r24
     d9c:	af e0       	ldi	r26, 0x0F	; 15
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	ac 0f       	add	r26, r28
     da2:	bd 1f       	adc	r27, r29
     da4:	a0 0f       	add	r26, r16
     da6:	b1 1f       	adc	r27, r17
     da8:	9f 2d       	mov	r25, r15
     daa:	9e 19       	sub	r25, r14
     dac:	21 e0       	ldi	r18, 0x01	; 1
     dae:	ec 14       	cp	r14, r12
     db0:	09 f4       	brne	.+2      	; 0xdb4 <main+0x178>
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	92 1b       	sub	r25, r18
     db6:	98 1b       	sub	r25, r24
     db8:	e6 e1       	ldi	r30, 0x16	; 22
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	ec 0f       	add	r30, r28
     dbe:	fd 1f       	adc	r31, r29
     dc0:	e0 0f       	add	r30, r16
     dc2:	f1 1f       	adc	r31, r17
     dc4:	80 81       	ld	r24, Z
     dc6:	98 1b       	sub	r25, r24
     dc8:	9c 93       	st	X, r25
     dca:	0f 5f       	subi	r16, 0xFF	; 255
     dcc:	1f 4f       	sbci	r17, 0xFF	; 255
     dce:	07 30       	cpi	r16, 0x07	; 7
     dd0:	11 05       	cpc	r17, r1
     dd2:	61 f0       	breq	.+24     	; 0xdec <main+0x1b0>
     dd4:	d4 01       	movw	r26, r8
     dd6:	ed 90       	ld	r14, X+
     dd8:	4d 01       	movw	r8, r26
     dda:	f5 01       	movw	r30, r10
     ddc:	c1 90       	ld	r12, Z+
     dde:	5f 01       	movw	r10, r30
     de0:	8e 2d       	mov	r24, r14
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	8c 19       	sub	r24, r12
     de6:	91 09       	sbc	r25, r1
     de8:	40 e0       	ldi	r20, 0x00	; 0
     dea:	c7 cf       	rjmp	.-114    	; 0xd7a <main+0x13e>
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	9a 87       	std	Y+10, r25	; 0x0a
     df2:	89 87       	std	Y+9, r24	; 0x09
     df4:	80 e1       	ldi	r24, 0x10	; 16
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	9c 87       	std	Y+12, r25	; 0x0c
     dfa:	8b 87       	std	Y+11, r24	; 0x0b
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	9e 87       	std	Y+14, r25	; 0x0e
     e02:	8d 87       	std	Y+13, r24	; 0x0d
     e04:	00 e0       	ldi	r16, 0x00	; 0
     e06:	10 e0       	ldi	r17, 0x00	; 0
     e08:	21 e0       	ldi	r18, 0x01	; 1
     e0a:	e2 2e       	mov	r14, r18
     e0c:	f1 2c       	mov	r15, r1
     e0e:	c7 01       	movw	r24, r14
     e10:	00 2e       	mov	r0, r16
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <main+0x1dc>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <main+0x1d8>
     e1c:	2e dc       	rcall	.-1956   	; 0x67a <send_bits_595_LED>
     e1e:	2f ef       	ldi	r18, 0xFF	; 255
     e20:	30 e7       	ldi	r19, 0x70	; 112
     e22:	42 e0       	ldi	r20, 0x02	; 2
     e24:	21 50       	subi	r18, 0x01	; 1
     e26:	30 40       	sbci	r19, 0x00	; 0
     e28:	40 40       	sbci	r20, 0x00	; 0
     e2a:	e1 f7       	brne	.-8      	; 0xe24 <main+0x1e8>
     e2c:	00 c0       	rjmp	.+0      	; 0xe2e <main+0x1f2>
     e2e:	00 00       	nop
     e30:	0f 5f       	subi	r16, 0xFF	; 255
     e32:	1f 4f       	sbci	r17, 0xFF	; 255
     e34:	09 30       	cpi	r16, 0x09	; 9
     e36:	11 05       	cpc	r17, r1
     e38:	51 f7       	brne	.-44     	; 0xe0e <main+0x1d2>
     e3a:	8f ef       	ldi	r24, 0xFF	; 255
     e3c:	90 e7       	ldi	r25, 0x70	; 112
     e3e:	a2 e0       	ldi	r26, 0x02	; 2
     e40:	81 50       	subi	r24, 0x01	; 1
     e42:	90 40       	sbci	r25, 0x00	; 0
     e44:	a0 40       	sbci	r26, 0x00	; 0
     e46:	e1 f7       	brne	.-8      	; 0xe40 <main+0x204>
     e48:	00 c0       	rjmp	.+0      	; 0xe4a <main+0x20e>
     e4a:	00 00       	nop
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	cc da       	rcall	.-2664   	; 0x3ea <lcd_locate>
     e52:	0b e3       	ldi	r16, 0x3B	; 59
     e54:	11 e0       	ldi	r17, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	d8 01       	movw	r26, r16
     e5a:	8d 91       	ld	r24, X+
     e5c:	8d 01       	movw	r16, r26
     e5e:	a2 96       	adiw	r28, 0x22	; 34
     e60:	9f af       	sts	0x7f, r25
     e62:	a2 97       	sbiw	r28, 0x22	; 34
     e64:	b2 da       	rcall	.-2716   	; 0x3ca <lcd_set_char>
     e66:	2f ef       	ldi	r18, 0xFF	; 255
     e68:	39 ef       	ldi	r19, 0xF9	; 249
     e6a:	40 e0       	ldi	r20, 0x00	; 0
     e6c:	21 50       	subi	r18, 0x01	; 1
     e6e:	30 40       	sbci	r19, 0x00	; 0
     e70:	40 40       	sbci	r20, 0x00	; 0
     e72:	e1 f7       	brne	.-8      	; 0xe6c <main+0x230>
     e74:	00 c0       	rjmp	.+0      	; 0xe76 <main+0x23a>
     e76:	00 00       	nop
     e78:	a2 96       	adiw	r28, 0x22	; 34
     e7a:	9f ad       	sts	0x6f, r25
     e7c:	a2 97       	sbiw	r28, 0x22	; 34
     e7e:	9f 5f       	subi	r25, 0xFF	; 255
     e80:	94 31       	cpi	r25, 0x14	; 20
     e82:	51 f7       	brne	.-44     	; 0xe58 <main+0x21c>
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	b0 da       	rcall	.-2720   	; 0x3ea <lcd_locate>
     e8a:	06 e2       	ldi	r16, 0x26	; 38
     e8c:	11 e0       	ldi	r17, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	d8 01       	movw	r26, r16
     e92:	8d 91       	ld	r24, X+
     e94:	8d 01       	movw	r16, r26
     e96:	a2 96       	adiw	r28, 0x22	; 34
     e98:	9f af       	sts	0x7f, r25
     e9a:	a2 97       	sbiw	r28, 0x22	; 34
     e9c:	96 da       	rcall	.-2772   	; 0x3ca <lcd_set_char>
     e9e:	2f ef       	ldi	r18, 0xFF	; 255
     ea0:	39 ef       	ldi	r19, 0xF9	; 249
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	21 50       	subi	r18, 0x01	; 1
     ea6:	30 40       	sbci	r19, 0x00	; 0
     ea8:	40 40       	sbci	r20, 0x00	; 0
     eaa:	e1 f7       	brne	.-8      	; 0xea4 <main+0x268>
     eac:	00 c0       	rjmp	.+0      	; 0xeae <main+0x272>
     eae:	00 00       	nop
     eb0:	a2 96       	adiw	r28, 0x22	; 34
     eb2:	9f ad       	sts	0x6f, r25
     eb4:	a2 97       	sbiw	r28, 0x22	; 34
     eb6:	9f 5f       	subi	r25, 0xFF	; 255
     eb8:	94 31       	cpi	r25, 0x14	; 20
     eba:	51 f7       	brne	.-44     	; 0xe90 <main+0x254>
     ebc:	83 e0       	ldi	r24, 0x03	; 3
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	94 da       	rcall	.-2776   	; 0x3ea <lcd_locate>
     ec2:	01 e1       	ldi	r16, 0x11	; 17
     ec4:	11 e0       	ldi	r17, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	d8 01       	movw	r26, r16
     eca:	8d 91       	ld	r24, X+
     ecc:	8d 01       	movw	r16, r26
     ece:	a2 96       	adiw	r28, 0x22	; 34
     ed0:	9f af       	sts	0x7f, r25
     ed2:	a2 97       	sbiw	r28, 0x22	; 34
     ed4:	7a da       	rcall	.-2828   	; 0x3ca <lcd_set_char>
     ed6:	2f ef       	ldi	r18, 0xFF	; 255
     ed8:	39 ef       	ldi	r19, 0xF9	; 249
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	21 50       	subi	r18, 0x01	; 1
     ede:	30 40       	sbci	r19, 0x00	; 0
     ee0:	40 40       	sbci	r20, 0x00	; 0
     ee2:	e1 f7       	brne	.-8      	; 0xedc <main+0x2a0>
     ee4:	00 c0       	rjmp	.+0      	; 0xee6 <main+0x2aa>
     ee6:	00 00       	nop
     ee8:	a2 96       	adiw	r28, 0x22	; 34
     eea:	9f ad       	sts	0x6f, r25
     eec:	a2 97       	sbiw	r28, 0x22	; 34
     eee:	9f 5f       	subi	r25, 0xFF	; 255
     ef0:	94 31       	cpi	r25, 0x14	; 20
     ef2:	51 f7       	brne	.-44     	; 0xec8 <main+0x28c>
     ef4:	00 e0       	ldi	r16, 0x00	; 0
     ef6:	10 e0       	ldi	r17, 0x00	; 0
     ef8:	9f ef       	ldi	r25, 0xFF	; 255
     efa:	e9 2e       	mov	r14, r25
     efc:	f1 2c       	mov	r15, r1
     efe:	c7 01       	movw	r24, r14
     f00:	00 2e       	mov	r0, r16
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <main+0x2cc>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <main+0x2c8>
     f0c:	80 95       	com	r24
     f0e:	b5 db       	rcall	.-2198   	; 0x67a <send_bits_595_LED>
     f10:	8f ef       	ldi	r24, 0xFF	; 255
     f12:	96 e7       	ldi	r25, 0x76	; 118
     f14:	a1 e0       	ldi	r26, 0x01	; 1
     f16:	81 50       	subi	r24, 0x01	; 1
     f18:	90 40       	sbci	r25, 0x00	; 0
     f1a:	a0 40       	sbci	r26, 0x00	; 0
     f1c:	e1 f7       	brne	.-8      	; 0xf16 <main+0x2da>
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <main+0x2e4>
     f20:	00 00       	nop
     f22:	0f 5f       	subi	r16, 0xFF	; 255
     f24:	1f 4f       	sbci	r17, 0xFF	; 255
     f26:	09 30       	cpi	r16, 0x09	; 9
     f28:	11 05       	cpc	r17, r1
     f2a:	49 f7       	brne	.-46     	; 0xefe <main+0x2c2>
     f2c:	2f ef       	ldi	r18, 0xFF	; 255
     f2e:	34 e3       	ldi	r19, 0x34	; 52
     f30:	4c e0       	ldi	r20, 0x0C	; 12
     f32:	21 50       	subi	r18, 0x01	; 1
     f34:	30 40       	sbci	r19, 0x00	; 0
     f36:	40 40       	sbci	r20, 0x00	; 0
     f38:	e1 f7       	brne	.-8      	; 0xf32 <main+0x2f6>
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <main+0x300>
     f3c:	00 00       	nop
     f3e:	00 e0       	ldi	r16, 0x00	; 0
     f40:	10 e0       	ldi	r17, 0x00	; 0
     f42:	8f ef       	ldi	r24, 0xFF	; 255
     f44:	e8 2e       	mov	r14, r24
     f46:	f1 2c       	mov	r15, r1
     f48:	c7 01       	movw	r24, r14
     f4a:	00 2e       	mov	r0, r16
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <main+0x316>
     f4e:	95 95       	asr	r25
     f50:	87 95       	ror	r24
     f52:	0a 94       	dec	r0
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <main+0x312>
     f56:	91 db       	rcall	.-2270   	; 0x67a <send_bits_595_LED>
     f58:	8f ef       	ldi	r24, 0xFF	; 255
     f5a:	96 e7       	ldi	r25, 0x76	; 118
     f5c:	a1 e0       	ldi	r26, 0x01	; 1
     f5e:	81 50       	subi	r24, 0x01	; 1
     f60:	90 40       	sbci	r25, 0x00	; 0
     f62:	a0 40       	sbci	r26, 0x00	; 0
     f64:	e1 f7       	brne	.-8      	; 0xf5e <main+0x322>
     f66:	00 c0       	rjmp	.+0      	; 0xf68 <main+0x32c>
     f68:	00 00       	nop
     f6a:	0f 5f       	subi	r16, 0xFF	; 255
     f6c:	1f 4f       	sbci	r17, 0xFF	; 255
     f6e:	09 30       	cpi	r16, 0x09	; 9
     f70:	11 05       	cpc	r17, r1
     f72:	51 f7       	brne	.-44     	; 0xf48 <main+0x30c>
     f74:	2f ef       	ldi	r18, 0xFF	; 255
     f76:	30 e7       	ldi	r19, 0x70	; 112
     f78:	42 e0       	ldi	r20, 0x02	; 2
     f7a:	21 50       	subi	r18, 0x01	; 1
     f7c:	30 40       	sbci	r19, 0x00	; 0
     f7e:	40 40       	sbci	r20, 0x00	; 0
     f80:	e1 f7       	brne	.-8      	; 0xf7a <main+0x33e>
     f82:	00 c0       	rjmp	.+0      	; 0xf84 <main+0x348>
     f84:	00 00       	nop
     f86:	8f ef       	ldi	r24, 0xFF	; 255
     f88:	78 db       	rcall	.-2320   	; 0x67a <send_bits_595_LED>
     f8a:	8f e7       	ldi	r24, 0x7F	; 127
     f8c:	99 ea       	ldi	r25, 0xA9	; 169
     f8e:	a3 e0       	ldi	r26, 0x03	; 3
     f90:	81 50       	subi	r24, 0x01	; 1
     f92:	90 40       	sbci	r25, 0x00	; 0
     f94:	a0 40       	sbci	r26, 0x00	; 0
     f96:	e1 f7       	brne	.-8      	; 0xf90 <main+0x354>
     f98:	00 c0       	rjmp	.+0      	; 0xf9a <main+0x35e>
     f9a:	00 00       	nop
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	6d db       	rcall	.-2342   	; 0x67a <send_bits_595_LED>
     fa0:	2f e7       	ldi	r18, 0x7F	; 127
     fa2:	39 ea       	ldi	r19, 0xA9	; 169
     fa4:	43 e0       	ldi	r20, 0x03	; 3
     fa6:	21 50       	subi	r18, 0x01	; 1
     fa8:	30 40       	sbci	r19, 0x00	; 0
     faa:	40 40       	sbci	r20, 0x00	; 0
     fac:	e1 f7       	brne	.-8      	; 0xfa6 <main+0x36a>
     fae:	00 c0       	rjmp	.+0      	; 0xfb0 <main+0x374>
     fb0:	00 00       	nop
     fb2:	8f ef       	ldi	r24, 0xFF	; 255
     fb4:	62 db       	rcall	.-2364   	; 0x67a <send_bits_595_LED>
     fb6:	8f e7       	ldi	r24, 0x7F	; 127
     fb8:	99 ea       	ldi	r25, 0xA9	; 169
     fba:	a3 e0       	ldi	r26, 0x03	; 3
     fbc:	81 50       	subi	r24, 0x01	; 1
     fbe:	90 40       	sbci	r25, 0x00	; 0
     fc0:	a0 40       	sbci	r26, 0x00	; 0
     fc2:	e1 f7       	brne	.-8      	; 0xfbc <main+0x380>
     fc4:	00 c0       	rjmp	.+0      	; 0xfc6 <main+0x38a>
     fc6:	00 00       	nop
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	57 db       	rcall	.-2386   	; 0x67a <send_bits_595_LED>
     fcc:	2f e7       	ldi	r18, 0x7F	; 127
     fce:	39 ea       	ldi	r19, 0xA9	; 169
     fd0:	43 e0       	ldi	r20, 0x03	; 3
     fd2:	21 50       	subi	r18, 0x01	; 1
     fd4:	30 40       	sbci	r19, 0x00	; 0
     fd6:	40 40       	sbci	r20, 0x00	; 0
     fd8:	e1 f7       	brne	.-8      	; 0xfd2 <main+0x396>
     fda:	00 c0       	rjmp	.+0      	; 0xfdc <main+0x3a0>
     fdc:	00 00       	nop
     fde:	00 e0       	ldi	r16, 0x00	; 0
     fe0:	80 2f       	mov	r24, r16
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	02 da       	rcall	.-3068   	; 0x3ea <lcd_locate>
     fe6:	14 e1       	ldi	r17, 0x14	; 20
     fe8:	80 e2       	ldi	r24, 0x20	; 32
     fea:	ef d9       	rcall	.-3106   	; 0x3ca <lcd_set_char>
     fec:	8f e5       	ldi	r24, 0x5F	; 95
     fee:	9a ee       	ldi	r25, 0xEA	; 234
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <main+0x3b4>
     ff4:	00 c0       	rjmp	.+0      	; 0xff6 <main+0x3ba>
     ff6:	00 00       	nop
     ff8:	11 50       	subi	r17, 0x01	; 1
     ffa:	b1 f7       	brne	.-20     	; 0xfe8 <main+0x3ac>
     ffc:	0f 5f       	subi	r16, 0xFF	; 255
     ffe:	04 30       	cpi	r16, 0x04	; 4
    1000:	79 f7       	brne	.-34     	; 0xfe0 <main+0x3a4>
    1002:	78 94       	sei
    1004:	80 91 b2 01 	lds	r24, 0x01B2
    1008:	88 23       	and	r24, r24
    100a:	89 f0       	breq	.+34     	; 0x102e <main+0x3f2>
    100c:	bc dc       	rcall	.-1672   	; 0x986 <DisplayItemInfo>
    100e:	20 91 bc 01 	lds	r18, 0x01BC
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	c9 01       	movw	r24, r18
    1016:	83 70       	andi	r24, 0x03	; 3
    1018:	90 70       	andi	r25, 0x00	; 0
    101a:	95 95       	asr	r25
    101c:	87 95       	ror	r24
    101e:	20 ff       	sbrs	r18, 0
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <main+0x3ea>
    1022:	68 e0       	ldi	r22, 0x08	; 8
    1024:	01 c0       	rjmp	.+2      	; 0x1028 <main+0x3ec>
    1026:	67 e0       	ldi	r22, 0x07	; 7
    1028:	e0 d9       	rcall	.-3136   	; 0x3ea <lcd_locate>
    102a:	10 92 b2 01 	sts	0x01B2, r1
    102e:	a8 ed       	ldi	r26, 0xD8	; 216
    1030:	b1 e0       	ldi	r27, 0x01	; 1
    1032:	6b 96       	adiw	r28, 0x1b	; 27
    1034:	bf af       	sts	0x7f, r27
    1036:	ae af       	sts	0x7e, r26
    1038:	6b 97       	sbiw	r28, 0x1b	; 27
    103a:	fe 01       	movw	r30, r28
    103c:	35 96       	adiw	r30, 0x05	; 5
    103e:	6f 96       	adiw	r28, 0x1f	; 31
    1040:	ff af       	sts	0x7f, r31
    1042:	ee af       	sts	0x7e, r30
    1044:	6f 97       	sbiw	r28, 0x1f	; 31
    1046:	9e 01       	movw	r18, r28
    1048:	29 5b       	subi	r18, 0xB9	; 185
    104a:	3f 4f       	sbci	r19, 0xFF	; 255
    104c:	6d 96       	adiw	r28, 0x1d	; 29
    104e:	3f af       	sts	0x7f, r19
    1050:	2e af       	sts	0x7e, r18
    1052:	6d 97       	sbiw	r28, 0x1d	; 29
    1054:	1c ef       	ldi	r17, 0xFC	; 252
    1056:	61 2e       	mov	r6, r17
    1058:	11 e0       	ldi	r17, 0x01	; 1
    105a:	71 2e       	mov	r7, r17
    105c:	29 01       	movw	r4, r18
    105e:	4f 01       	movw	r8, r30
    1060:	a1 96       	adiw	r28, 0x21	; 33
    1062:	bf af       	sts	0x7f, r27
    1064:	ae af       	sts	0x7e, r26
    1066:	a1 97       	sbiw	r28, 0x21	; 33
    1068:	aa 24       	eor	r10, r10
    106a:	bb 24       	eor	r11, r11
    106c:	33 24       	eor	r3, r3
    106e:	33 94       	inc	r3
    1070:	ae 01       	movw	r20, r28
    1072:	47 5f       	subi	r20, 0xF7	; 247
    1074:	5f 4f       	sbci	r21, 0xFF	; 255
    1076:	69 96       	adiw	r28, 0x19	; 25
    1078:	5f af       	sts	0x7f, r21
    107a:	4e af       	sts	0x7e, r20
    107c:	69 97       	sbiw	r28, 0x19	; 25
    107e:	a1 96       	adiw	r28, 0x21	; 33
    1080:	ae ad       	sts	0x6e, r26
    1082:	bf ad       	sts	0x6f, r27
    1084:	a1 97       	sbiw	r28, 0x21	; 33
    1086:	0d 91       	ld	r16, X+
    1088:	a1 96       	adiw	r28, 0x21	; 33
    108a:	bf af       	sts	0x7f, r27
    108c:	ae af       	sts	0x7e, r26
    108e:	a1 97       	sbiw	r28, 0x21	; 33
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	f3 01       	movw	r30, r6
    1096:	e8 0f       	add	r30, r24
    1098:	f9 1f       	adc	r31, r25
    109a:	21 81       	ldd	r18, Z+1	; 0x01
    109c:	32 2f       	mov	r19, r18
    109e:	31 54       	subi	r19, 0x41	; 65
    10a0:	36 30       	cpi	r19, 0x06	; 6
    10a2:	18 f0       	brcs	.+6      	; 0x10aa <main+0x46e>
    10a4:	20 53       	subi	r18, 0x30	; 48
    10a6:	2a 30       	cpi	r18, 0x0A	; 10
    10a8:	38 f4       	brcc	.+14     	; 0x10b8 <main+0x47c>
    10aa:	f4 01       	movw	r30, r8
    10ac:	30 82       	st	Z, r3
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	83 30       	cpi	r24, 0x03	; 3
    10b2:	91 05       	cpc	r25, r1
    10b4:	79 f7       	brne	.-34     	; 0x1094 <main+0x458>
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <main+0x480>
    10b8:	d4 01       	movw	r26, r8
    10ba:	1c 92       	st	X, r1
    10bc:	f4 01       	movw	r30, r8
    10be:	81 91       	ld	r24, Z+
    10c0:	4f 01       	movw	r8, r30
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <main+0x48c>
    10c6:	6e c0       	rjmp	.+220    	; 0x11a4 <main+0x568>
    10c8:	f5 01       	movw	r30, r10
    10ca:	ee 0f       	add	r30, r30
    10cc:	ff 1f       	adc	r31, r31
    10ce:	ee 0f       	add	r30, r30
    10d0:	ff 1f       	adc	r31, r31
    10d2:	e3 50       	subi	r30, 0x03	; 3
    10d4:	fe 4f       	sbci	r31, 0xFE	; 254
    10d6:	de 01       	movw	r26, r28
    10d8:	12 96       	adiw	r26, 0x02	; 2
    10da:	be 01       	movw	r22, r28
    10dc:	61 5f       	subi	r22, 0xF1	; 241
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	ee 24       	eor	r14, r14
    10e2:	ff 24       	eor	r15, r15
    10e4:	6f 01       	movw	r12, r30
    10e6:	f6 01       	movw	r30, r12
    10e8:	81 91       	ld	r24, Z+
    10ea:	6f 01       	movw	r12, r30
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	20 7f       	andi	r18, 0xF0	; 240
    10f2:	30 70       	andi	r19, 0x00	; 0
    10f4:	20 33       	cpi	r18, 0x30	; 48
    10f6:	31 05       	cpc	r19, r1
    10f8:	11 f4       	brne	.+4      	; 0x10fe <main+0x4c2>
    10fa:	8f 70       	andi	r24, 0x0F	; 15
    10fc:	05 c0       	rjmp	.+10     	; 0x1108 <main+0x4cc>
    10fe:	20 34       	cpi	r18, 0x40	; 64
    1100:	31 05       	cpc	r19, r1
    1102:	c9 f4       	brne	.+50     	; 0x1136 <main+0x4fa>
    1104:	8f 70       	andi	r24, 0x0F	; 15
    1106:	87 5f       	subi	r24, 0xF7	; 247
    1108:	8c 93       	st	X, r24
    110a:	8d 91       	ld	r24, X+
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	fb 01       	movw	r30, r22
    1110:	32 91       	ld	r19, -Z
    1112:	22 91       	ld	r18, -Z
    1114:	bf 01       	movw	r22, r30
    1116:	82 9f       	mul	r24, r18
    1118:	a0 01       	movw	r20, r0
    111a:	83 9f       	mul	r24, r19
    111c:	50 0d       	add	r21, r0
    111e:	92 9f       	mul	r25, r18
    1120:	50 0d       	add	r21, r0
    1122:	11 24       	eor	r1, r1
    1124:	e4 0e       	add	r14, r20
    1126:	f5 1e       	adc	r15, r21
    1128:	69 96       	adiw	r28, 0x19	; 25
    112a:	2e ad       	sts	0x6e, r18
    112c:	3f ad       	sts	0x6f, r19
    112e:	69 97       	sbiw	r28, 0x19	; 25
    1130:	e2 17       	cp	r30, r18
    1132:	f3 07       	cpc	r31, r19
    1134:	c1 f6       	brne	.-80     	; 0x10e6 <main+0x4aa>
    1136:	10 e0       	ldi	r17, 0x00	; 0
    1138:	b7 01       	movw	r22, r14
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	ff d2       	rcall	.+1534   	; 0x173e <__floatunsisf>
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	43 e1       	ldi	r20, 0x13	; 19
    1146:	55 e4       	ldi	r21, 0x45	; 69
    1148:	61 d2       	rcall	.+1218   	; 0x160c <__divsf3>
    114a:	6b 01       	movw	r12, r22
    114c:	7c 01       	movw	r14, r24
    114e:	00 0f       	add	r16, r16
    1150:	11 1f       	adc	r17, r17
    1152:	41 e0       	ldi	r20, 0x01	; 1
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	4c 0f       	add	r20, r28
    1158:	5d 1f       	adc	r21, r29
    115a:	04 0f       	add	r16, r20
    115c:	15 1f       	adc	r17, r21
    115e:	d8 01       	movw	r26, r16
    1160:	d8 96       	adiw	r26, 0x38	; 56
    1162:	6d 91       	ld	r22, X+
    1164:	7c 91       	ld	r23, X
    1166:	d9 97       	sbiw	r26, 0x39	; 57
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	e8 d2       	rcall	.+1488   	; 0x173e <__floatunsisf>
    116e:	9b 01       	movw	r18, r22
    1170:	ac 01       	movw	r20, r24
    1172:	c7 01       	movw	r24, r14
    1174:	b6 01       	movw	r22, r12
    1176:	95 d3       	rcall	.+1834   	; 0x18a2 <__mulsf3>
    1178:	6b 01       	movw	r12, r22
    117a:	7c 01       	movw	r14, r24
    117c:	f8 01       	movw	r30, r16
    117e:	62 a5       	lds	r22, 0x62
    1180:	73 a5       	lds	r23, 0x63
    1182:	88 27       	eor	r24, r24
    1184:	77 fd       	sbrc	r23, 7
    1186:	80 95       	com	r24
    1188:	98 2f       	mov	r25, r24
    118a:	db d2       	rcall	.+1462   	; 0x1742 <__floatsisf>
    118c:	9b 01       	movw	r18, r22
    118e:	ac 01       	movw	r20, r24
    1190:	c7 01       	movw	r24, r14
    1192:	b6 01       	movw	r22, r12
    1194:	d3 d1       	rcall	.+934    	; 0x153c <__addsf3>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	f2 01       	movw	r30, r4
    119c:	80 83       	st	Z, r24
    119e:	91 83       	std	Z+1, r25	; 0x01
    11a0:	a2 83       	std	Z+2, r26	; 0x02
    11a2:	b3 83       	std	Z+3, r27	; 0x03
    11a4:	08 94       	sec
    11a6:	a1 1c       	adc	r10, r1
    11a8:	b1 1c       	adc	r11, r1
    11aa:	24 e0       	ldi	r18, 0x04	; 4
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	42 0e       	add	r4, r18
    11b0:	53 1e       	adc	r5, r19
    11b2:	62 0e       	add	r6, r18
    11b4:	73 1e       	adc	r7, r19
    11b6:	34 e0       	ldi	r19, 0x04	; 4
    11b8:	a3 16       	cp	r10, r19
    11ba:	b1 04       	cpc	r11, r1
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <main+0x584>
    11be:	5f cf       	rjmp	.-322    	; 0x107e <main+0x442>
    11c0:	ec e0       	ldi	r30, 0x0C	; 12
    11c2:	f2 e0       	ldi	r31, 0x02	; 2
    11c4:	25 ea       	ldi	r18, 0xA5	; 165
    11c6:	32 e0       	ldi	r19, 0x02	; 2
    11c8:	40 e0       	ldi	r20, 0x00	; 0
    11ca:	bf 01       	movw	r22, r30
    11cc:	fb 01       	movw	r30, r22
    11ce:	81 91       	ld	r24, Z+
    11d0:	91 91       	ld	r25, Z+
    11d2:	a1 91       	ld	r26, Z+
    11d4:	b1 91       	ld	r27, Z+
    11d6:	bf 01       	movw	r22, r30
    11d8:	f9 01       	movw	r30, r18
    11da:	81 93       	st	Z+, r24
    11dc:	91 93       	st	Z+, r25
    11de:	a1 93       	st	Z+, r26
    11e0:	b1 93       	st	Z+, r27
    11e2:	9f 01       	movw	r18, r30
    11e4:	4f 5f       	subi	r20, 0xFF	; 255
    11e6:	40 32       	cpi	r20, 0x20	; 32
    11e8:	89 f7       	brne	.-30     	; 0x11cc <main+0x590>
    11ea:	72 db       	rcall	.-2332   	; 0x8d0 <BubbleSort>
    11ec:	e0 91 bf 01 	lds	r30, 0x01BF
    11f0:	f0 91 c0 01 	lds	r31, 0x01C0
    11f4:	ee 0f       	add	r30, r30
    11f6:	ff 1f       	adc	r31, r31
    11f8:	ee 0f       	add	r30, r30
    11fa:	ff 1f       	adc	r31, r31
    11fc:	e4 5f       	subi	r30, 0xF4	; 244
    11fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1200:	c0 80       	ld	r12, Z
    1202:	d1 80       	ldd	r13, Z+1	; 0x01
    1204:	e2 80       	ldd	r14, Z+2	; 0x02
    1206:	f3 80       	ldd	r15, Z+3	; 0x03
    1208:	80 90 f6 01 	lds	r8, 0x01F6
    120c:	90 90 f7 01 	lds	r9, 0x01F7
    1210:	a0 90 f8 01 	lds	r10, 0x01F8
    1214:	b0 90 f9 01 	lds	r11, 0x01F9
    1218:	ff ef       	ldi	r31, 0xFF	; 255
    121a:	cf 16       	cp	r12, r31
    121c:	ff ef       	ldi	r31, 0xFF	; 255
    121e:	df 06       	cpc	r13, r31
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	ef 06       	cpc	r14, r31
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	ff 06       	cpc	r15, r31
    1228:	20 f0       	brcs	.+8      	; 0x1232 <main+0x5f6>
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	dc 01       	movw	r26, r24
    1230:	11 c0       	rjmp	.+34     	; 0x1254 <main+0x618>
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	74 e2       	ldi	r23, 0x24	; 36
    1236:	84 ef       	ldi	r24, 0xF4	; 244
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	a5 01       	movw	r20, r10
    123c:	94 01       	movw	r18, r8
    123e:	b3 d3       	rcall	.+1894   	; 0x19a6 <__udivmodsi4>
    1240:	ca 01       	movw	r24, r20
    1242:	b9 01       	movw	r22, r18
    1244:	a7 01       	movw	r20, r14
    1246:	96 01       	movw	r18, r12
    1248:	ae d3       	rcall	.+1884   	; 0x19a6 <__udivmodsi4>
    124a:	ca 01       	movw	r24, r20
    124c:	b9 01       	movw	r22, r18
    124e:	77 d2       	rcall	.+1262   	; 0x173e <__floatunsisf>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	80 93 d4 01 	sts	0x01D4, r24
    1258:	90 93 d5 01 	sts	0x01D5, r25
    125c:	a0 93 d6 01 	sts	0x01D6, r26
    1260:	b0 93 d7 01 	sts	0x01D7, r27
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	74 e2       	ldi	r23, 0x24	; 36
    1268:	84 ef       	ldi	r24, 0xF4	; 244
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	a5 01       	movw	r20, r10
    126e:	94 01       	movw	r18, r8
    1270:	9a d3       	rcall	.+1844   	; 0x19a6 <__udivmodsi4>
    1272:	c0 90 25 03 	lds	r12, 0x0325
    1276:	d0 90 26 03 	lds	r13, 0x0326
    127a:	e0 90 27 03 	lds	r14, 0x0327
    127e:	f0 90 28 03 	lds	r15, 0x0328
    1282:	ca 01       	movw	r24, r20
    1284:	b9 01       	movw	r22, r18
    1286:	a7 01       	movw	r20, r14
    1288:	96 01       	movw	r18, r12
    128a:	8d d3       	rcall	.+1818   	; 0x19a6 <__udivmodsi4>
    128c:	ca 01       	movw	r24, r20
    128e:	b9 01       	movw	r22, r18
    1290:	56 d2       	rcall	.+1196   	; 0x173e <__floatunsisf>
    1292:	60 93 e0 01 	sts	0x01E0, r22
    1296:	70 93 e1 01 	sts	0x01E1, r23
    129a:	80 93 e2 01 	sts	0x01E2, r24
    129e:	90 93 e3 01 	sts	0x01E3, r25
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	40 e7       	ldi	r20, 0x70	; 112
    12a8:	52 e4       	ldi	r21, 0x42	; 66
    12aa:	fb d2       	rcall	.+1526   	; 0x18a2 <__mulsf3>
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	40 e0       	ldi	r20, 0x00	; 0
    12b2:	5f e3       	ldi	r21, 0x3F	; 63
    12b4:	f6 d2       	rcall	.+1516   	; 0x18a2 <__mulsf3>
    12b6:	17 d2       	rcall	.+1070   	; 0x16e6 <__fixunssfsi>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	bc 01       	movw	r22, r24
    12be:	90 93 fb 01 	sts	0x01FB, r25
    12c2:	80 93 fa 01 	sts	0x01FA, r24
    12c6:	23 e1       	ldi	r18, 0x13	; 19
    12c8:	89 38       	cpi	r24, 0x89	; 137
    12ca:	92 07       	cpc	r25, r18
    12cc:	a0 f4       	brcc	.+40     	; 0x12f6 <main+0x6ba>
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	35 d2       	rcall	.+1130   	; 0x173e <__floatunsisf>
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e4       	ldi	r19, 0x40	; 64
    12d8:	4c e9       	ldi	r20, 0x9C	; 156
    12da:	55 e4       	ldi	r21, 0x45	; 69
    12dc:	97 d1       	rcall	.+814    	; 0x160c <__divsf3>
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	4f e7       	ldi	r20, 0x7F	; 127
    12e4:	53 e4       	ldi	r21, 0x43	; 67
    12e6:	dd d2       	rcall	.+1466   	; 0x18a2 <__mulsf3>
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e9       	ldi	r20, 0x90	; 144
    12ee:	52 e4       	ldi	r21, 0x42	; 66
    12f0:	25 d1       	rcall	.+586    	; 0x153c <__addsf3>
    12f2:	f9 d1       	rcall	.+1010   	; 0x16e6 <__fixunssfsi>
    12f4:	01 c0       	rjmp	.+2      	; 0x12f8 <main+0x6bc>
    12f6:	6f ef       	ldi	r22, 0xFF	; 255
    12f8:	67 bd       	out	0x27, r22	; 39
    12fa:	40 91 a3 02 	lds	r20, 0x02A3
    12fe:	50 91 a4 02 	lds	r21, 0x02A4
    1302:	ba 01       	movw	r22, r20
    1304:	60 95       	com	r22
    1306:	70 95       	com	r23
    1308:	80 91 b0 01 	lds	r24, 0x01B0
    130c:	90 91 b1 01 	lds	r25, 0x01B1
    1310:	86 17       	cp	r24, r22
    1312:	97 07       	cpc	r25, r23
    1314:	48 f4       	brcc	.+18     	; 0x1328 <main+0x6ec>
    1316:	20 91 a1 02 	lds	r18, 0x02A1
    131a:	30 91 a2 02 	lds	r19, 0x02A2
    131e:	24 1b       	sub	r18, r20
    1320:	35 0b       	sbc	r19, r21
    1322:	82 17       	cp	r24, r18
    1324:	93 07       	cpc	r25, r19
    1326:	40 f0       	brcs	.+16     	; 0x1338 <main+0x6fc>
    1328:	68 17       	cp	r22, r24
    132a:	79 07       	cpc	r23, r25
    132c:	08 f0       	brcs	.+2      	; 0x1330 <main+0x6f4>
    132e:	6a ce       	rjmp	.-812    	; 0x1004 <main+0x3c8>
    1330:	84 17       	cp	r24, r20
    1332:	95 07       	cpc	r25, r21
    1334:	08 f0       	brcs	.+2      	; 0x1338 <main+0x6fc>
    1336:	66 ce       	rjmp	.-820    	; 0x1004 <main+0x3c8>
    1338:	80 91 a1 02 	lds	r24, 0x02A1
    133c:	90 91 a2 02 	lds	r25, 0x02A2
    1340:	90 93 a4 02 	sts	0x02A4, r25
    1344:	80 93 a3 02 	sts	0x02A3, r24
    1348:	10 92 a2 02 	sts	0x02A2, r1
    134c:	10 92 a1 02 	sts	0x02A1, r1
    1350:	ee 24       	eor	r14, r14
    1352:	aa e0       	ldi	r26, 0x0A	; 10
    1354:	6a 2e       	mov	r6, r26
    1356:	71 2c       	mov	r7, r1
    1358:	6b 96       	adiw	r28, 0x1b	; 27
    135a:	ae ad       	sts	0x6e, r26
    135c:	bf ad       	sts	0x6f, r27
    135e:	6b 97       	sbiw	r28, 0x1b	; 27
    1360:	cd 90       	ld	r12, X+
    1362:	6b 96       	adiw	r28, 0x1b	; 27
    1364:	bf af       	sts	0x7f, r27
    1366:	ae af       	sts	0x7e, r26
    1368:	6b 97       	sbiw	r28, 0x1b	; 27
    136a:	dd 24       	eor	r13, r13
    136c:	86 01       	movw	r16, r12
    136e:	04 57       	subi	r16, 0x74	; 116
    1370:	1d 4f       	sbci	r17, 0xFD	; 253
    1372:	8e 2d       	mov	r24, r14
    1374:	f8 01       	movw	r30, r16
    1376:	60 81       	ld	r22, Z
    1378:	38 d8       	rcall	.-3984   	; 0x3ea <lcd_locate>
    137a:	ff 24       	eor	r15, r15
    137c:	03 c0       	rjmp	.+6      	; 0x1384 <main+0x748>
    137e:	80 e2       	ldi	r24, 0x20	; 32
    1380:	24 d8       	rcall	.-4024   	; 0x3ca <lcd_set_char>
    1382:	f3 94       	inc	r15
    1384:	d8 01       	movw	r26, r16
    1386:	6c 91       	ld	r22, X
    1388:	8f 2d       	mov	r24, r15
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	93 01       	movw	r18, r6
    138e:	26 1b       	sub	r18, r22
    1390:	31 09       	sbc	r19, r1
    1392:	28 17       	cp	r18, r24
    1394:	39 07       	cpc	r19, r25
    1396:	9c f7       	brge	.-26     	; 0x137e <main+0x742>
    1398:	8e 2d       	mov	r24, r14
    139a:	27 d8       	rcall	.-4018   	; 0x3ea <lcd_locate>
    139c:	ff 24       	eor	r15, r15
    139e:	0f e0       	ldi	r16, 0x0F	; 15
    13a0:	10 e0       	ldi	r17, 0x00	; 0
    13a2:	0c 0f       	add	r16, r28
    13a4:	1d 1f       	adc	r17, r29
    13a6:	0c 0d       	add	r16, r12
    13a8:	1d 1d       	adc	r17, r13
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <main+0x776>
    13ac:	80 e2       	ldi	r24, 0x20	; 32
    13ae:	0d d8       	rcall	.-4070   	; 0x3ca <lcd_set_char>
    13b0:	f3 94       	inc	r15
    13b2:	f8 01       	movw	r30, r16
    13b4:	80 81       	ld	r24, Z
    13b6:	f8 16       	cp	r15, r24
    13b8:	c8 f3       	brcs	.-14     	; 0x13ac <main+0x770>
    13ba:	6f 96       	adiw	r28, 0x1f	; 31
    13bc:	ae ad       	sts	0x6e, r26
    13be:	bf ad       	sts	0x6f, r27
    13c0:	6f 97       	sbiw	r28, 0x1f	; 31
    13c2:	8d 91       	ld	r24, X+
    13c4:	6f 96       	adiw	r28, 0x1f	; 31
    13c6:	bf af       	sts	0x7f, r27
    13c8:	ae af       	sts	0x7e, r26
    13ca:	6f 97       	sbiw	r28, 0x1f	; 31
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	21 f5       	brne	.+72     	; 0x1418 <main+0x7dc>
    13d0:	ed e1       	ldi	r30, 0x1D	; 29
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	ec 0f       	add	r30, r28
    13d6:	fd 1f       	adc	r31, r29
    13d8:	ec 0d       	add	r30, r12
    13da:	fd 1d       	adc	r31, r13
    13dc:	40 81       	ld	r20, Z
    13de:	6d 96       	adiw	r28, 0x1d	; 29
    13e0:	ee ad       	sts	0x6e, r30
    13e2:	ff ad       	sts	0x6f, r31
    13e4:	6d 97       	sbiw	r28, 0x1d	; 29
    13e6:	60 81       	ld	r22, Z
    13e8:	71 81       	ldd	r23, Z+1	; 0x01
    13ea:	82 81       	ldd	r24, Z+2	; 0x02
    13ec:	93 81       	ldd	r25, Z+3	; 0x03
    13ee:	e4 e2       	ldi	r30, 0x24	; 36
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	ec 0f       	add	r30, r28
    13f4:	fd 1f       	adc	r31, r29
    13f6:	ec 0d       	add	r30, r12
    13f8:	fd 1d       	adc	r31, r13
    13fa:	20 81       	ld	r18, Z
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	24 1b       	sub	r18, r20
    1400:	31 09       	sbc	r19, r1
    1402:	e6 e1       	ldi	r30, 0x16	; 22
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	ec 0f       	add	r30, r28
    1408:	fd 1f       	adc	r31, r29
    140a:	ec 0d       	add	r30, r12
    140c:	fd 1d       	adc	r31, r13
    140e:	00 81       	ld	r16, Z
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	10 e0       	ldi	r17, 0x00	; 0
    1414:	0a d8       	rcall	.-4076   	; 0x42a <lcd_set_numeric>
    1416:	36 c0       	rjmp	.+108    	; 0x1484 <main+0x848>
    1418:	88 23       	and	r24, r24
    141a:	29 f0       	breq	.+10     	; 0x1426 <main+0x7ea>
    141c:	33 c0       	rjmp	.+102    	; 0x1484 <main+0x848>
    141e:	80 e2       	ldi	r24, 0x20	; 32
    1420:	d4 d7       	rcall	.+4008   	; 0x23ca <__data_load_end+0x91e>
    1422:	1f 5f       	subi	r17, 0xFF	; 255
    1424:	15 c0       	rjmp	.+42     	; 0x1450 <main+0x814>
    1426:	10 e0       	ldi	r17, 0x00	; 0
    1428:	e4 e2       	ldi	r30, 0x24	; 36
    142a:	ae 2e       	mov	r10, r30
    142c:	b1 2c       	mov	r11, r1
    142e:	ac 0e       	add	r10, r28
    1430:	bd 1e       	adc	r11, r29
    1432:	ac 0c       	add	r10, r12
    1434:	bd 1c       	adc	r11, r13
    1436:	fd e1       	ldi	r31, 0x1D	; 29
    1438:	8f 2e       	mov	r8, r31
    143a:	91 2c       	mov	r9, r1
    143c:	8c 0e       	add	r8, r28
    143e:	9d 1e       	adc	r9, r29
    1440:	8c 0c       	add	r8, r12
    1442:	9d 1c       	adc	r9, r13
    1444:	26 e1       	ldi	r18, 0x16	; 22
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	2c 0f       	add	r18, r28
    144a:	3d 1f       	adc	r19, r29
    144c:	c2 0e       	add	r12, r18
    144e:	d3 1e       	adc	r13, r19
    1450:	d5 01       	movw	r26, r10
    1452:	0c 91       	ld	r16, X
    1454:	21 2f       	mov	r18, r17
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	f4 01       	movw	r30, r8
    145e:	40 81       	ld	r20, Z
    1460:	04 17       	cp	r16, r20
    1462:	11 f4       	brne	.+4      	; 0x1468 <main+0x82c>
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	d6 01       	movw	r26, r12
    146a:	4c 91       	ld	r20, X
    146c:	84 0f       	add	r24, r20
    146e:	91 1d       	adc	r25, r1
    1470:	28 17       	cp	r18, r24
    1472:	39 07       	cpc	r19, r25
    1474:	a4 f2       	brlt	.-88     	; 0x141e <main+0x7e2>
    1476:	10 e0       	ldi	r17, 0x00	; 0
    1478:	03 c0       	rjmp	.+6      	; 0x1480 <main+0x844>
    147a:	8a e2       	ldi	r24, 0x2A	; 42
    147c:	a6 d7       	rcall	.+3916   	; 0x23ca <__data_load_end+0x91e>
    147e:	1f 5f       	subi	r17, 0xFF	; 255
    1480:	10 17       	cp	r17, r16
    1482:	d9 f7       	brne	.-10     	; 0x147a <main+0x83e>
    1484:	e3 94       	inc	r14
    1486:	6d 96       	adiw	r28, 0x1d	; 29
    1488:	ee ad       	sts	0x6e, r30
    148a:	ff ad       	sts	0x6f, r31
    148c:	6d 97       	sbiw	r28, 0x1d	; 29
    148e:	34 96       	adiw	r30, 0x04	; 4
    1490:	6d 96       	adiw	r28, 0x1d	; 29
    1492:	ff af       	sts	0x7f, r31
    1494:	ee af       	sts	0x7e, r30
    1496:	6d 97       	sbiw	r28, 0x1d	; 29
    1498:	f4 e0       	ldi	r31, 0x04	; 4
    149a:	ef 16       	cp	r14, r31
    149c:	09 f0       	breq	.+2      	; 0x14a0 <main+0x864>
    149e:	5c cf       	rjmp	.-328    	; 0x1358 <main+0x71c>
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	6c e0       	ldi	r22, 0x0C	; 12
    14a4:	a2 d7       	rcall	.+3908   	; 0x23ea <__data_load_end+0x93e>
    14a6:	60 91 fa 01 	lds	r22, 0x01FA
    14aa:	70 91 fb 01 	lds	r23, 0x01FB
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	45 d1       	rcall	.+650    	; 0x173e <__floatunsisf>
    14b4:	45 e0       	ldi	r20, 0x05	; 5
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	00 e0       	ldi	r16, 0x00	; 0
    14be:	10 e0       	ldi	r17, 0x00	; 0
    14c0:	b4 d7       	rcall	.+3944   	; 0x242a <__data_load_end+0x97e>
    14c2:	8d e7       	ldi	r24, 0x7D	; 125
    14c4:	91 e0       	ldi	r25, 0x01	; 1
    14c6:	a6 d7       	rcall	.+3916   	; 0x2414 <__data_load_end+0x968>
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	6c e0       	ldi	r22, 0x0C	; 12
    14cc:	8e d7       	rcall	.+3868   	; 0x23ea <__data_load_end+0x93e>
    14ce:	80 91 fa 01 	lds	r24, 0x01FA
    14d2:	90 91 fb 01 	lds	r25, 0x01FB
    14d6:	2b e0       	ldi	r18, 0x0B	; 11
    14d8:	88 3b       	cpi	r24, 0xB8	; 184
    14da:	92 07       	cpc	r25, r18
    14dc:	10 f4       	brcc	.+4      	; 0x14e2 <main+0x8a6>
    14de:	33 d9       	rcall	.-3482   	; 0x746 <shobon>
    14e0:	0a c0       	rjmp	.+20     	; 0x14f6 <main+0x8ba>
    14e2:	33 e1       	ldi	r19, 0x13	; 19
    14e4:	88 38       	cpi	r24, 0x88	; 136
    14e6:	93 07       	cpc	r25, r19
    14e8:	10 f4       	brcc	.+4      	; 0x14ee <main+0x8b2>
    14ea:	3c d9       	rcall	.-3464   	; 0x764 <shakin>
    14ec:	04 c0       	rjmp	.+8      	; 0x14f6 <main+0x8ba>
    14ee:	49 d9       	rcall	.-3438   	; 0x782 <kuwa>
    14f0:	81 e8       	ldi	r24, 0x81	; 129
    14f2:	91 e0       	ldi	r25, 0x01	; 1
    14f4:	8f d7       	rcall	.+3870   	; 0x2414 <__data_load_end+0x968>
    14f6:	83 e0       	ldi	r24, 0x03	; 3
    14f8:	6c e0       	ldi	r22, 0x0C	; 12
    14fa:	77 d7       	rcall	.+3822   	; 0x23ea <__data_load_end+0x93e>
    14fc:	80 91 fa 01 	lds	r24, 0x01FA
    1500:	90 91 fb 01 	lds	r25, 0x01FB
    1504:	f2 d5       	rcall	.+3044   	; 0x20ea <__data_load_end+0x63e>
    1506:	80 91 fa 01 	lds	r24, 0x01FA
    150a:	90 91 fb 01 	lds	r25, 0x01FB
    150e:	6d d6       	rcall	.+3290   	; 0x21ea <__data_load_end+0x73e>
    1510:	82 e0       	ldi	r24, 0x02	; 2
    1512:	6c e0       	ldi	r22, 0x0C	; 12
    1514:	6a d7       	rcall	.+3796   	; 0x23ea <__data_load_end+0x93e>
    1516:	84 e8       	ldi	r24, 0x84	; 132
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	7c d7       	rcall	.+3832   	; 0x2414 <__data_load_end+0x968>
    151c:	60 91 b0 01 	lds	r22, 0x01B0
    1520:	70 91 b1 01 	lds	r23, 0x01B1
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0a d1       	rcall	.+532    	; 0x173e <__floatunsisf>
    152a:	47 e0       	ldi	r20, 0x07	; 7
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	00 e0       	ldi	r16, 0x00	; 0
    1534:	10 e0       	ldi	r17, 0x00	; 0
    1536:	79 d7       	rcall	.+3826   	; 0x242a <__data_load_end+0x97e>
    1538:	65 cd       	rjmp	.-1334   	; 0x1004 <main+0x3c8>

0000153a <__subsf3>:
    153a:	50 58       	subi	r21, 0x80	; 128

0000153c <__addsf3>:
    153c:	bb 27       	eor	r27, r27
    153e:	aa 27       	eor	r26, r26
    1540:	0e d0       	rcall	.+28     	; 0x155e <__addsf3x>
    1542:	75 c1       	rjmp	.+746    	; 0x182e <__fp_round>
    1544:	66 d1       	rcall	.+716    	; 0x1812 <__fp_pscA>
    1546:	30 f0       	brcs	.+12     	; 0x1554 <__addsf3+0x18>
    1548:	6b d1       	rcall	.+726    	; 0x1820 <__fp_pscB>
    154a:	20 f0       	brcs	.+8      	; 0x1554 <__addsf3+0x18>
    154c:	31 f4       	brne	.+12     	; 0x155a <__addsf3+0x1e>
    154e:	9f 3f       	cpi	r25, 0xFF	; 255
    1550:	11 f4       	brne	.+4      	; 0x1556 <__addsf3+0x1a>
    1552:	1e f4       	brtc	.+6      	; 0x155a <__addsf3+0x1e>
    1554:	5b c1       	rjmp	.+694    	; 0x180c <__fp_nan>
    1556:	0e f4       	brtc	.+2      	; 0x155a <__addsf3+0x1e>
    1558:	e0 95       	com	r30
    155a:	e7 fb       	bst	r30, 7
    155c:	51 c1       	rjmp	.+674    	; 0x1800 <__fp_inf>

0000155e <__addsf3x>:
    155e:	e9 2f       	mov	r30, r25
    1560:	77 d1       	rcall	.+750    	; 0x1850 <__fp_split3>
    1562:	80 f3       	brcs	.-32     	; 0x1544 <__addsf3+0x8>
    1564:	ba 17       	cp	r27, r26
    1566:	62 07       	cpc	r22, r18
    1568:	73 07       	cpc	r23, r19
    156a:	84 07       	cpc	r24, r20
    156c:	95 07       	cpc	r25, r21
    156e:	18 f0       	brcs	.+6      	; 0x1576 <__addsf3x+0x18>
    1570:	71 f4       	brne	.+28     	; 0x158e <__addsf3x+0x30>
    1572:	9e f5       	brtc	.+102    	; 0x15da <__addsf3x+0x7c>
    1574:	8f c1       	rjmp	.+798    	; 0x1894 <__fp_zero>
    1576:	0e f4       	brtc	.+2      	; 0x157a <__addsf3x+0x1c>
    1578:	e0 95       	com	r30
    157a:	0b 2e       	mov	r0, r27
    157c:	ba 2f       	mov	r27, r26
    157e:	a0 2d       	mov	r26, r0
    1580:	0b 01       	movw	r0, r22
    1582:	b9 01       	movw	r22, r18
    1584:	90 01       	movw	r18, r0
    1586:	0c 01       	movw	r0, r24
    1588:	ca 01       	movw	r24, r20
    158a:	a0 01       	movw	r20, r0
    158c:	11 24       	eor	r1, r1
    158e:	ff 27       	eor	r31, r31
    1590:	59 1b       	sub	r21, r25
    1592:	99 f0       	breq	.+38     	; 0x15ba <__addsf3x+0x5c>
    1594:	59 3f       	cpi	r21, 0xF9	; 249
    1596:	50 f4       	brcc	.+20     	; 0x15ac <__addsf3x+0x4e>
    1598:	50 3e       	cpi	r21, 0xE0	; 224
    159a:	68 f1       	brcs	.+90     	; 0x15f6 <__addsf3x+0x98>
    159c:	1a 16       	cp	r1, r26
    159e:	f0 40       	sbci	r31, 0x00	; 0
    15a0:	a2 2f       	mov	r26, r18
    15a2:	23 2f       	mov	r18, r19
    15a4:	34 2f       	mov	r19, r20
    15a6:	44 27       	eor	r20, r20
    15a8:	58 5f       	subi	r21, 0xF8	; 248
    15aa:	f3 cf       	rjmp	.-26     	; 0x1592 <__addsf3x+0x34>
    15ac:	46 95       	lsr	r20
    15ae:	37 95       	ror	r19
    15b0:	27 95       	ror	r18
    15b2:	a7 95       	ror	r26
    15b4:	f0 40       	sbci	r31, 0x00	; 0
    15b6:	53 95       	inc	r21
    15b8:	c9 f7       	brne	.-14     	; 0x15ac <__addsf3x+0x4e>
    15ba:	7e f4       	brtc	.+30     	; 0x15da <__addsf3x+0x7c>
    15bc:	1f 16       	cp	r1, r31
    15be:	ba 0b       	sbc	r27, r26
    15c0:	62 0b       	sbc	r22, r18
    15c2:	73 0b       	sbc	r23, r19
    15c4:	84 0b       	sbc	r24, r20
    15c6:	ba f0       	brmi	.+46     	; 0x15f6 <__addsf3x+0x98>
    15c8:	91 50       	subi	r25, 0x01	; 1
    15ca:	a1 f0       	breq	.+40     	; 0x15f4 <__addsf3x+0x96>
    15cc:	ff 0f       	add	r31, r31
    15ce:	bb 1f       	adc	r27, r27
    15d0:	66 1f       	adc	r22, r22
    15d2:	77 1f       	adc	r23, r23
    15d4:	88 1f       	adc	r24, r24
    15d6:	c2 f7       	brpl	.-16     	; 0x15c8 <__addsf3x+0x6a>
    15d8:	0e c0       	rjmp	.+28     	; 0x15f6 <__addsf3x+0x98>
    15da:	ba 0f       	add	r27, r26
    15dc:	62 1f       	adc	r22, r18
    15de:	73 1f       	adc	r23, r19
    15e0:	84 1f       	adc	r24, r20
    15e2:	48 f4       	brcc	.+18     	; 0x15f6 <__addsf3x+0x98>
    15e4:	87 95       	ror	r24
    15e6:	77 95       	ror	r23
    15e8:	67 95       	ror	r22
    15ea:	b7 95       	ror	r27
    15ec:	f7 95       	ror	r31
    15ee:	9e 3f       	cpi	r25, 0xFE	; 254
    15f0:	08 f0       	brcs	.+2      	; 0x15f4 <__addsf3x+0x96>
    15f2:	b3 cf       	rjmp	.-154    	; 0x155a <__addsf3+0x1e>
    15f4:	93 95       	inc	r25
    15f6:	88 0f       	add	r24, r24
    15f8:	08 f0       	brcs	.+2      	; 0x15fc <__addsf3x+0x9e>
    15fa:	99 27       	eor	r25, r25
    15fc:	ee 0f       	add	r30, r30
    15fe:	97 95       	ror	r25
    1600:	87 95       	ror	r24
    1602:	08 95       	ret

00001604 <__cmpsf2>:
    1604:	d9 d0       	rcall	.+434    	; 0x17b8 <__fp_cmp>
    1606:	08 f4       	brcc	.+2      	; 0x160a <__cmpsf2+0x6>
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	08 95       	ret

0000160c <__divsf3>:
    160c:	0c d0       	rcall	.+24     	; 0x1626 <__divsf3x>
    160e:	0f c1       	rjmp	.+542    	; 0x182e <__fp_round>
    1610:	07 d1       	rcall	.+526    	; 0x1820 <__fp_pscB>
    1612:	40 f0       	brcs	.+16     	; 0x1624 <__divsf3+0x18>
    1614:	fe d0       	rcall	.+508    	; 0x1812 <__fp_pscA>
    1616:	30 f0       	brcs	.+12     	; 0x1624 <__divsf3+0x18>
    1618:	21 f4       	brne	.+8      	; 0x1622 <__divsf3+0x16>
    161a:	5f 3f       	cpi	r21, 0xFF	; 255
    161c:	19 f0       	breq	.+6      	; 0x1624 <__divsf3+0x18>
    161e:	f0 c0       	rjmp	.+480    	; 0x1800 <__fp_inf>
    1620:	51 11       	cpse	r21, r1
    1622:	39 c1       	rjmp	.+626    	; 0x1896 <__fp_szero>
    1624:	f3 c0       	rjmp	.+486    	; 0x180c <__fp_nan>

00001626 <__divsf3x>:
    1626:	14 d1       	rcall	.+552    	; 0x1850 <__fp_split3>
    1628:	98 f3       	brcs	.-26     	; 0x1610 <__divsf3+0x4>

0000162a <__divsf3_pse>:
    162a:	99 23       	and	r25, r25
    162c:	c9 f3       	breq	.-14     	; 0x1620 <__divsf3+0x14>
    162e:	55 23       	and	r21, r21
    1630:	b1 f3       	breq	.-20     	; 0x161e <__divsf3+0x12>
    1632:	95 1b       	sub	r25, r21
    1634:	55 0b       	sbc	r21, r21
    1636:	bb 27       	eor	r27, r27
    1638:	aa 27       	eor	r26, r26
    163a:	62 17       	cp	r22, r18
    163c:	73 07       	cpc	r23, r19
    163e:	84 07       	cpc	r24, r20
    1640:	38 f0       	brcs	.+14     	; 0x1650 <__divsf3_pse+0x26>
    1642:	9f 5f       	subi	r25, 0xFF	; 255
    1644:	5f 4f       	sbci	r21, 0xFF	; 255
    1646:	22 0f       	add	r18, r18
    1648:	33 1f       	adc	r19, r19
    164a:	44 1f       	adc	r20, r20
    164c:	aa 1f       	adc	r26, r26
    164e:	a9 f3       	breq	.-22     	; 0x163a <__divsf3_pse+0x10>
    1650:	33 d0       	rcall	.+102    	; 0x16b8 <__divsf3_pse+0x8e>
    1652:	0e 2e       	mov	r0, r30
    1654:	3a f0       	brmi	.+14     	; 0x1664 <__divsf3_pse+0x3a>
    1656:	e0 e8       	ldi	r30, 0x80	; 128
    1658:	30 d0       	rcall	.+96     	; 0x16ba <__divsf3_pse+0x90>
    165a:	91 50       	subi	r25, 0x01	; 1
    165c:	50 40       	sbci	r21, 0x00	; 0
    165e:	e6 95       	lsr	r30
    1660:	00 1c       	adc	r0, r0
    1662:	ca f7       	brpl	.-14     	; 0x1656 <__divsf3_pse+0x2c>
    1664:	29 d0       	rcall	.+82     	; 0x16b8 <__divsf3_pse+0x8e>
    1666:	fe 2f       	mov	r31, r30
    1668:	27 d0       	rcall	.+78     	; 0x16b8 <__divsf3_pse+0x8e>
    166a:	66 0f       	add	r22, r22
    166c:	77 1f       	adc	r23, r23
    166e:	88 1f       	adc	r24, r24
    1670:	bb 1f       	adc	r27, r27
    1672:	26 17       	cp	r18, r22
    1674:	37 07       	cpc	r19, r23
    1676:	48 07       	cpc	r20, r24
    1678:	ab 07       	cpc	r26, r27
    167a:	b0 e8       	ldi	r27, 0x80	; 128
    167c:	09 f0       	breq	.+2      	; 0x1680 <__divsf3_pse+0x56>
    167e:	bb 0b       	sbc	r27, r27
    1680:	80 2d       	mov	r24, r0
    1682:	bf 01       	movw	r22, r30
    1684:	ff 27       	eor	r31, r31
    1686:	93 58       	subi	r25, 0x83	; 131
    1688:	5f 4f       	sbci	r21, 0xFF	; 255
    168a:	2a f0       	brmi	.+10     	; 0x1696 <__divsf3_pse+0x6c>
    168c:	9e 3f       	cpi	r25, 0xFE	; 254
    168e:	51 05       	cpc	r21, r1
    1690:	68 f0       	brcs	.+26     	; 0x16ac <__divsf3_pse+0x82>
    1692:	b6 c0       	rjmp	.+364    	; 0x1800 <__fp_inf>
    1694:	00 c1       	rjmp	.+512    	; 0x1896 <__fp_szero>
    1696:	5f 3f       	cpi	r21, 0xFF	; 255
    1698:	ec f3       	brlt	.-6      	; 0x1694 <__divsf3_pse+0x6a>
    169a:	98 3e       	cpi	r25, 0xE8	; 232
    169c:	dc f3       	brlt	.-10     	; 0x1694 <__divsf3_pse+0x6a>
    169e:	86 95       	lsr	r24
    16a0:	77 95       	ror	r23
    16a2:	67 95       	ror	r22
    16a4:	b7 95       	ror	r27
    16a6:	f7 95       	ror	r31
    16a8:	9f 5f       	subi	r25, 0xFF	; 255
    16aa:	c9 f7       	brne	.-14     	; 0x169e <__divsf3_pse+0x74>
    16ac:	88 0f       	add	r24, r24
    16ae:	91 1d       	adc	r25, r1
    16b0:	96 95       	lsr	r25
    16b2:	87 95       	ror	r24
    16b4:	97 f9       	bld	r25, 7
    16b6:	08 95       	ret
    16b8:	e1 e0       	ldi	r30, 0x01	; 1
    16ba:	66 0f       	add	r22, r22
    16bc:	77 1f       	adc	r23, r23
    16be:	88 1f       	adc	r24, r24
    16c0:	bb 1f       	adc	r27, r27
    16c2:	62 17       	cp	r22, r18
    16c4:	73 07       	cpc	r23, r19
    16c6:	84 07       	cpc	r24, r20
    16c8:	ba 07       	cpc	r27, r26
    16ca:	20 f0       	brcs	.+8      	; 0x16d4 <__divsf3_pse+0xaa>
    16cc:	62 1b       	sub	r22, r18
    16ce:	73 0b       	sbc	r23, r19
    16d0:	84 0b       	sbc	r24, r20
    16d2:	ba 0b       	sbc	r27, r26
    16d4:	ee 1f       	adc	r30, r30
    16d6:	88 f7       	brcc	.-30     	; 0x16ba <__divsf3_pse+0x90>
    16d8:	e0 95       	com	r30
    16da:	08 95       	ret

000016dc <__fixsfsi>:
    16dc:	04 d0       	rcall	.+8      	; 0x16e6 <__fixunssfsi>
    16de:	68 94       	set
    16e0:	b1 11       	cpse	r27, r1
    16e2:	d9 c0       	rjmp	.+434    	; 0x1896 <__fp_szero>
    16e4:	08 95       	ret

000016e6 <__fixunssfsi>:
    16e6:	bc d0       	rcall	.+376    	; 0x1860 <__fp_splitA>
    16e8:	88 f0       	brcs	.+34     	; 0x170c <__fixunssfsi+0x26>
    16ea:	9f 57       	subi	r25, 0x7F	; 127
    16ec:	90 f0       	brcs	.+36     	; 0x1712 <__fixunssfsi+0x2c>
    16ee:	b9 2f       	mov	r27, r25
    16f0:	99 27       	eor	r25, r25
    16f2:	b7 51       	subi	r27, 0x17	; 23
    16f4:	a0 f0       	brcs	.+40     	; 0x171e <__fixunssfsi+0x38>
    16f6:	d1 f0       	breq	.+52     	; 0x172c <__fixunssfsi+0x46>
    16f8:	66 0f       	add	r22, r22
    16fa:	77 1f       	adc	r23, r23
    16fc:	88 1f       	adc	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	1a f0       	brmi	.+6      	; 0x1708 <__fixunssfsi+0x22>
    1702:	ba 95       	dec	r27
    1704:	c9 f7       	brne	.-14     	; 0x16f8 <__fixunssfsi+0x12>
    1706:	12 c0       	rjmp	.+36     	; 0x172c <__fixunssfsi+0x46>
    1708:	b1 30       	cpi	r27, 0x01	; 1
    170a:	81 f0       	breq	.+32     	; 0x172c <__fixunssfsi+0x46>
    170c:	c3 d0       	rcall	.+390    	; 0x1894 <__fp_zero>
    170e:	b1 e0       	ldi	r27, 0x01	; 1
    1710:	08 95       	ret
    1712:	c0 c0       	rjmp	.+384    	; 0x1894 <__fp_zero>
    1714:	67 2f       	mov	r22, r23
    1716:	78 2f       	mov	r23, r24
    1718:	88 27       	eor	r24, r24
    171a:	b8 5f       	subi	r27, 0xF8	; 248
    171c:	39 f0       	breq	.+14     	; 0x172c <__fixunssfsi+0x46>
    171e:	b9 3f       	cpi	r27, 0xF9	; 249
    1720:	cc f3       	brlt	.-14     	; 0x1714 <__fixunssfsi+0x2e>
    1722:	86 95       	lsr	r24
    1724:	77 95       	ror	r23
    1726:	67 95       	ror	r22
    1728:	b3 95       	inc	r27
    172a:	d9 f7       	brne	.-10     	; 0x1722 <__fixunssfsi+0x3c>
    172c:	3e f4       	brtc	.+14     	; 0x173c <__fixunssfsi+0x56>
    172e:	90 95       	com	r25
    1730:	80 95       	com	r24
    1732:	70 95       	com	r23
    1734:	61 95       	neg	r22
    1736:	7f 4f       	sbci	r23, 0xFF	; 255
    1738:	8f 4f       	sbci	r24, 0xFF	; 255
    173a:	9f 4f       	sbci	r25, 0xFF	; 255
    173c:	08 95       	ret

0000173e <__floatunsisf>:
    173e:	e8 94       	clt
    1740:	09 c0       	rjmp	.+18     	; 0x1754 <__floatsisf+0x12>

00001742 <__floatsisf>:
    1742:	97 fb       	bst	r25, 7
    1744:	3e f4       	brtc	.+14     	; 0x1754 <__floatsisf+0x12>
    1746:	90 95       	com	r25
    1748:	80 95       	com	r24
    174a:	70 95       	com	r23
    174c:	61 95       	neg	r22
    174e:	7f 4f       	sbci	r23, 0xFF	; 255
    1750:	8f 4f       	sbci	r24, 0xFF	; 255
    1752:	9f 4f       	sbci	r25, 0xFF	; 255
    1754:	99 23       	and	r25, r25
    1756:	a9 f0       	breq	.+42     	; 0x1782 <__floatsisf+0x40>
    1758:	f9 2f       	mov	r31, r25
    175a:	96 e9       	ldi	r25, 0x96	; 150
    175c:	bb 27       	eor	r27, r27
    175e:	93 95       	inc	r25
    1760:	f6 95       	lsr	r31
    1762:	87 95       	ror	r24
    1764:	77 95       	ror	r23
    1766:	67 95       	ror	r22
    1768:	b7 95       	ror	r27
    176a:	f1 11       	cpse	r31, r1
    176c:	f8 cf       	rjmp	.-16     	; 0x175e <__floatsisf+0x1c>
    176e:	fa f4       	brpl	.+62     	; 0x17ae <__floatsisf+0x6c>
    1770:	bb 0f       	add	r27, r27
    1772:	11 f4       	brne	.+4      	; 0x1778 <__floatsisf+0x36>
    1774:	60 ff       	sbrs	r22, 0
    1776:	1b c0       	rjmp	.+54     	; 0x17ae <__floatsisf+0x6c>
    1778:	6f 5f       	subi	r22, 0xFF	; 255
    177a:	7f 4f       	sbci	r23, 0xFF	; 255
    177c:	8f 4f       	sbci	r24, 0xFF	; 255
    177e:	9f 4f       	sbci	r25, 0xFF	; 255
    1780:	16 c0       	rjmp	.+44     	; 0x17ae <__floatsisf+0x6c>
    1782:	88 23       	and	r24, r24
    1784:	11 f0       	breq	.+4      	; 0x178a <__floatsisf+0x48>
    1786:	96 e9       	ldi	r25, 0x96	; 150
    1788:	11 c0       	rjmp	.+34     	; 0x17ac <__floatsisf+0x6a>
    178a:	77 23       	and	r23, r23
    178c:	21 f0       	breq	.+8      	; 0x1796 <__floatsisf+0x54>
    178e:	9e e8       	ldi	r25, 0x8E	; 142
    1790:	87 2f       	mov	r24, r23
    1792:	76 2f       	mov	r23, r22
    1794:	05 c0       	rjmp	.+10     	; 0x17a0 <__floatsisf+0x5e>
    1796:	66 23       	and	r22, r22
    1798:	71 f0       	breq	.+28     	; 0x17b6 <__floatsisf+0x74>
    179a:	96 e8       	ldi	r25, 0x86	; 134
    179c:	86 2f       	mov	r24, r22
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	2a f0       	brmi	.+10     	; 0x17ae <__floatsisf+0x6c>
    17a4:	9a 95       	dec	r25
    17a6:	66 0f       	add	r22, r22
    17a8:	77 1f       	adc	r23, r23
    17aa:	88 1f       	adc	r24, r24
    17ac:	da f7       	brpl	.-10     	; 0x17a4 <__floatsisf+0x62>
    17ae:	88 0f       	add	r24, r24
    17b0:	96 95       	lsr	r25
    17b2:	87 95       	ror	r24
    17b4:	97 f9       	bld	r25, 7
    17b6:	08 95       	ret

000017b8 <__fp_cmp>:
    17b8:	99 0f       	add	r25, r25
    17ba:	00 08       	sbc	r0, r0
    17bc:	55 0f       	add	r21, r21
    17be:	aa 0b       	sbc	r26, r26
    17c0:	e0 e8       	ldi	r30, 0x80	; 128
    17c2:	fe ef       	ldi	r31, 0xFE	; 254
    17c4:	16 16       	cp	r1, r22
    17c6:	17 06       	cpc	r1, r23
    17c8:	e8 07       	cpc	r30, r24
    17ca:	f9 07       	cpc	r31, r25
    17cc:	c0 f0       	brcs	.+48     	; 0x17fe <__fp_cmp+0x46>
    17ce:	12 16       	cp	r1, r18
    17d0:	13 06       	cpc	r1, r19
    17d2:	e4 07       	cpc	r30, r20
    17d4:	f5 07       	cpc	r31, r21
    17d6:	98 f0       	brcs	.+38     	; 0x17fe <__fp_cmp+0x46>
    17d8:	62 1b       	sub	r22, r18
    17da:	73 0b       	sbc	r23, r19
    17dc:	84 0b       	sbc	r24, r20
    17de:	95 0b       	sbc	r25, r21
    17e0:	39 f4       	brne	.+14     	; 0x17f0 <__fp_cmp+0x38>
    17e2:	0a 26       	eor	r0, r26
    17e4:	61 f0       	breq	.+24     	; 0x17fe <__fp_cmp+0x46>
    17e6:	23 2b       	or	r18, r19
    17e8:	24 2b       	or	r18, r20
    17ea:	25 2b       	or	r18, r21
    17ec:	21 f4       	brne	.+8      	; 0x17f6 <__fp_cmp+0x3e>
    17ee:	08 95       	ret
    17f0:	0a 26       	eor	r0, r26
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <__fp_cmp+0x3e>
    17f4:	a1 40       	sbci	r26, 0x01	; 1
    17f6:	a6 95       	lsr	r26
    17f8:	8f ef       	ldi	r24, 0xFF	; 255
    17fa:	81 1d       	adc	r24, r1
    17fc:	81 1d       	adc	r24, r1
    17fe:	08 95       	ret

00001800 <__fp_inf>:
    1800:	97 f9       	bld	r25, 7
    1802:	9f 67       	ori	r25, 0x7F	; 127
    1804:	80 e8       	ldi	r24, 0x80	; 128
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	60 e0       	ldi	r22, 0x00	; 0
    180a:	08 95       	ret

0000180c <__fp_nan>:
    180c:	9f ef       	ldi	r25, 0xFF	; 255
    180e:	80 ec       	ldi	r24, 0xC0	; 192
    1810:	08 95       	ret

00001812 <__fp_pscA>:
    1812:	00 24       	eor	r0, r0
    1814:	0a 94       	dec	r0
    1816:	16 16       	cp	r1, r22
    1818:	17 06       	cpc	r1, r23
    181a:	18 06       	cpc	r1, r24
    181c:	09 06       	cpc	r0, r25
    181e:	08 95       	ret

00001820 <__fp_pscB>:
    1820:	00 24       	eor	r0, r0
    1822:	0a 94       	dec	r0
    1824:	12 16       	cp	r1, r18
    1826:	13 06       	cpc	r1, r19
    1828:	14 06       	cpc	r1, r20
    182a:	05 06       	cpc	r0, r21
    182c:	08 95       	ret

0000182e <__fp_round>:
    182e:	09 2e       	mov	r0, r25
    1830:	03 94       	inc	r0
    1832:	00 0c       	add	r0, r0
    1834:	11 f4       	brne	.+4      	; 0x183a <__fp_round+0xc>
    1836:	88 23       	and	r24, r24
    1838:	52 f0       	brmi	.+20     	; 0x184e <__fp_round+0x20>
    183a:	bb 0f       	add	r27, r27
    183c:	40 f4       	brcc	.+16     	; 0x184e <__fp_round+0x20>
    183e:	bf 2b       	or	r27, r31
    1840:	11 f4       	brne	.+4      	; 0x1846 <__fp_round+0x18>
    1842:	60 ff       	sbrs	r22, 0
    1844:	04 c0       	rjmp	.+8      	; 0x184e <__fp_round+0x20>
    1846:	6f 5f       	subi	r22, 0xFF	; 255
    1848:	7f 4f       	sbci	r23, 0xFF	; 255
    184a:	8f 4f       	sbci	r24, 0xFF	; 255
    184c:	9f 4f       	sbci	r25, 0xFF	; 255
    184e:	08 95       	ret

00001850 <__fp_split3>:
    1850:	57 fd       	sbrc	r21, 7
    1852:	90 58       	subi	r25, 0x80	; 128
    1854:	44 0f       	add	r20, r20
    1856:	55 1f       	adc	r21, r21
    1858:	59 f0       	breq	.+22     	; 0x1870 <__fp_splitA+0x10>
    185a:	5f 3f       	cpi	r21, 0xFF	; 255
    185c:	71 f0       	breq	.+28     	; 0x187a <__fp_splitA+0x1a>
    185e:	47 95       	ror	r20

00001860 <__fp_splitA>:
    1860:	88 0f       	add	r24, r24
    1862:	97 fb       	bst	r25, 7
    1864:	99 1f       	adc	r25, r25
    1866:	61 f0       	breq	.+24     	; 0x1880 <__fp_splitA+0x20>
    1868:	9f 3f       	cpi	r25, 0xFF	; 255
    186a:	79 f0       	breq	.+30     	; 0x188a <__fp_splitA+0x2a>
    186c:	87 95       	ror	r24
    186e:	08 95       	ret
    1870:	12 16       	cp	r1, r18
    1872:	13 06       	cpc	r1, r19
    1874:	14 06       	cpc	r1, r20
    1876:	55 1f       	adc	r21, r21
    1878:	f2 cf       	rjmp	.-28     	; 0x185e <__fp_split3+0xe>
    187a:	46 95       	lsr	r20
    187c:	f1 df       	rcall	.-30     	; 0x1860 <__fp_splitA>
    187e:	08 c0       	rjmp	.+16     	; 0x1890 <__fp_splitA+0x30>
    1880:	16 16       	cp	r1, r22
    1882:	17 06       	cpc	r1, r23
    1884:	18 06       	cpc	r1, r24
    1886:	99 1f       	adc	r25, r25
    1888:	f1 cf       	rjmp	.-30     	; 0x186c <__fp_splitA+0xc>
    188a:	86 95       	lsr	r24
    188c:	71 05       	cpc	r23, r1
    188e:	61 05       	cpc	r22, r1
    1890:	08 94       	sec
    1892:	08 95       	ret

00001894 <__fp_zero>:
    1894:	e8 94       	clt

00001896 <__fp_szero>:
    1896:	bb 27       	eor	r27, r27
    1898:	66 27       	eor	r22, r22
    189a:	77 27       	eor	r23, r23
    189c:	cb 01       	movw	r24, r22
    189e:	97 f9       	bld	r25, 7
    18a0:	08 95       	ret

000018a2 <__mulsf3>:
    18a2:	0b d0       	rcall	.+22     	; 0x18ba <__mulsf3x>
    18a4:	c4 cf       	rjmp	.-120    	; 0x182e <__fp_round>
    18a6:	b5 df       	rcall	.-150    	; 0x1812 <__fp_pscA>
    18a8:	28 f0       	brcs	.+10     	; 0x18b4 <__mulsf3+0x12>
    18aa:	ba df       	rcall	.-140    	; 0x1820 <__fp_pscB>
    18ac:	18 f0       	brcs	.+6      	; 0x18b4 <__mulsf3+0x12>
    18ae:	95 23       	and	r25, r21
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <__mulsf3+0x12>
    18b2:	a6 cf       	rjmp	.-180    	; 0x1800 <__fp_inf>
    18b4:	ab cf       	rjmp	.-170    	; 0x180c <__fp_nan>
    18b6:	11 24       	eor	r1, r1
    18b8:	ee cf       	rjmp	.-36     	; 0x1896 <__fp_szero>

000018ba <__mulsf3x>:
    18ba:	ca df       	rcall	.-108    	; 0x1850 <__fp_split3>
    18bc:	a0 f3       	brcs	.-24     	; 0x18a6 <__mulsf3+0x4>

000018be <__mulsf3_pse>:
    18be:	95 9f       	mul	r25, r21
    18c0:	d1 f3       	breq	.-12     	; 0x18b6 <__mulsf3+0x14>
    18c2:	95 0f       	add	r25, r21
    18c4:	50 e0       	ldi	r21, 0x00	; 0
    18c6:	55 1f       	adc	r21, r21
    18c8:	62 9f       	mul	r22, r18
    18ca:	f0 01       	movw	r30, r0
    18cc:	72 9f       	mul	r23, r18
    18ce:	bb 27       	eor	r27, r27
    18d0:	f0 0d       	add	r31, r0
    18d2:	b1 1d       	adc	r27, r1
    18d4:	63 9f       	mul	r22, r19
    18d6:	aa 27       	eor	r26, r26
    18d8:	f0 0d       	add	r31, r0
    18da:	b1 1d       	adc	r27, r1
    18dc:	aa 1f       	adc	r26, r26
    18de:	64 9f       	mul	r22, r20
    18e0:	66 27       	eor	r22, r22
    18e2:	b0 0d       	add	r27, r0
    18e4:	a1 1d       	adc	r26, r1
    18e6:	66 1f       	adc	r22, r22
    18e8:	82 9f       	mul	r24, r18
    18ea:	22 27       	eor	r18, r18
    18ec:	b0 0d       	add	r27, r0
    18ee:	a1 1d       	adc	r26, r1
    18f0:	62 1f       	adc	r22, r18
    18f2:	73 9f       	mul	r23, r19
    18f4:	b0 0d       	add	r27, r0
    18f6:	a1 1d       	adc	r26, r1
    18f8:	62 1f       	adc	r22, r18
    18fa:	83 9f       	mul	r24, r19
    18fc:	a0 0d       	add	r26, r0
    18fe:	61 1d       	adc	r22, r1
    1900:	22 1f       	adc	r18, r18
    1902:	74 9f       	mul	r23, r20
    1904:	33 27       	eor	r19, r19
    1906:	a0 0d       	add	r26, r0
    1908:	61 1d       	adc	r22, r1
    190a:	23 1f       	adc	r18, r19
    190c:	84 9f       	mul	r24, r20
    190e:	60 0d       	add	r22, r0
    1910:	21 1d       	adc	r18, r1
    1912:	82 2f       	mov	r24, r18
    1914:	76 2f       	mov	r23, r22
    1916:	6a 2f       	mov	r22, r26
    1918:	11 24       	eor	r1, r1
    191a:	9f 57       	subi	r25, 0x7F	; 127
    191c:	50 40       	sbci	r21, 0x00	; 0
    191e:	8a f0       	brmi	.+34     	; 0x1942 <__mulsf3_pse+0x84>
    1920:	e1 f0       	breq	.+56     	; 0x195a <__mulsf3_pse+0x9c>
    1922:	88 23       	and	r24, r24
    1924:	4a f0       	brmi	.+18     	; 0x1938 <__mulsf3_pse+0x7a>
    1926:	ee 0f       	add	r30, r30
    1928:	ff 1f       	adc	r31, r31
    192a:	bb 1f       	adc	r27, r27
    192c:	66 1f       	adc	r22, r22
    192e:	77 1f       	adc	r23, r23
    1930:	88 1f       	adc	r24, r24
    1932:	91 50       	subi	r25, 0x01	; 1
    1934:	50 40       	sbci	r21, 0x00	; 0
    1936:	a9 f7       	brne	.-22     	; 0x1922 <__mulsf3_pse+0x64>
    1938:	9e 3f       	cpi	r25, 0xFE	; 254
    193a:	51 05       	cpc	r21, r1
    193c:	70 f0       	brcs	.+28     	; 0x195a <__mulsf3_pse+0x9c>
    193e:	60 cf       	rjmp	.-320    	; 0x1800 <__fp_inf>
    1940:	aa cf       	rjmp	.-172    	; 0x1896 <__fp_szero>
    1942:	5f 3f       	cpi	r21, 0xFF	; 255
    1944:	ec f3       	brlt	.-6      	; 0x1940 <__mulsf3_pse+0x82>
    1946:	98 3e       	cpi	r25, 0xE8	; 232
    1948:	dc f3       	brlt	.-10     	; 0x1940 <__mulsf3_pse+0x82>
    194a:	86 95       	lsr	r24
    194c:	77 95       	ror	r23
    194e:	67 95       	ror	r22
    1950:	b7 95       	ror	r27
    1952:	f7 95       	ror	r31
    1954:	e7 95       	ror	r30
    1956:	9f 5f       	subi	r25, 0xFF	; 255
    1958:	c1 f7       	brne	.-16     	; 0x194a <__mulsf3_pse+0x8c>
    195a:	fe 2b       	or	r31, r30
    195c:	88 0f       	add	r24, r24
    195e:	91 1d       	adc	r25, r1
    1960:	96 95       	lsr	r25
    1962:	87 95       	ror	r24
    1964:	97 f9       	bld	r25, 7
    1966:	08 95       	ret

00001968 <__mulsi3>:
    1968:	62 9f       	mul	r22, r18
    196a:	d0 01       	movw	r26, r0
    196c:	73 9f       	mul	r23, r19
    196e:	f0 01       	movw	r30, r0
    1970:	82 9f       	mul	r24, r18
    1972:	e0 0d       	add	r30, r0
    1974:	f1 1d       	adc	r31, r1
    1976:	64 9f       	mul	r22, r20
    1978:	e0 0d       	add	r30, r0
    197a:	f1 1d       	adc	r31, r1
    197c:	92 9f       	mul	r25, r18
    197e:	f0 0d       	add	r31, r0
    1980:	83 9f       	mul	r24, r19
    1982:	f0 0d       	add	r31, r0
    1984:	74 9f       	mul	r23, r20
    1986:	f0 0d       	add	r31, r0
    1988:	65 9f       	mul	r22, r21
    198a:	f0 0d       	add	r31, r0
    198c:	99 27       	eor	r25, r25
    198e:	72 9f       	mul	r23, r18
    1990:	b0 0d       	add	r27, r0
    1992:	e1 1d       	adc	r30, r1
    1994:	f9 1f       	adc	r31, r25
    1996:	63 9f       	mul	r22, r19
    1998:	b0 0d       	add	r27, r0
    199a:	e1 1d       	adc	r30, r1
    199c:	f9 1f       	adc	r31, r25
    199e:	bd 01       	movw	r22, r26
    19a0:	cf 01       	movw	r24, r30
    19a2:	11 24       	eor	r1, r1
    19a4:	08 95       	ret

000019a6 <__udivmodsi4>:
    19a6:	a1 e2       	ldi	r26, 0x21	; 33
    19a8:	1a 2e       	mov	r1, r26
    19aa:	aa 1b       	sub	r26, r26
    19ac:	bb 1b       	sub	r27, r27
    19ae:	fd 01       	movw	r30, r26
    19b0:	0d c0       	rjmp	.+26     	; 0x19cc <__udivmodsi4_ep>

000019b2 <__udivmodsi4_loop>:
    19b2:	aa 1f       	adc	r26, r26
    19b4:	bb 1f       	adc	r27, r27
    19b6:	ee 1f       	adc	r30, r30
    19b8:	ff 1f       	adc	r31, r31
    19ba:	a2 17       	cp	r26, r18
    19bc:	b3 07       	cpc	r27, r19
    19be:	e4 07       	cpc	r30, r20
    19c0:	f5 07       	cpc	r31, r21
    19c2:	20 f0       	brcs	.+8      	; 0x19cc <__udivmodsi4_ep>
    19c4:	a2 1b       	sub	r26, r18
    19c6:	b3 0b       	sbc	r27, r19
    19c8:	e4 0b       	sbc	r30, r20
    19ca:	f5 0b       	sbc	r31, r21

000019cc <__udivmodsi4_ep>:
    19cc:	66 1f       	adc	r22, r22
    19ce:	77 1f       	adc	r23, r23
    19d0:	88 1f       	adc	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	1a 94       	dec	r1
    19d6:	69 f7       	brne	.-38     	; 0x19b2 <__udivmodsi4_loop>
    19d8:	60 95       	com	r22
    19da:	70 95       	com	r23
    19dc:	80 95       	com	r24
    19de:	90 95       	com	r25
    19e0:	9b 01       	movw	r18, r22
    19e2:	ac 01       	movw	r20, r24
    19e4:	bd 01       	movw	r22, r26
    19e6:	cf 01       	movw	r24, r30
    19e8:	08 95       	ret

000019ea <_exit>:
    19ea:	f8 94       	cli

000019ec <__stop_program>:
    19ec:	ff cf       	rjmp	.-2      	; 0x19ec <__stop_program>
