
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00001bd4  00001c68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000194  0080017e  0080017e  00001ce6  2**0
                  ALLOC
  3 .stab         00006528  00000000  00000000  00001ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d9d  00000000  00000000  00008210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00009fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003c0  00000000  00000000  0000a050  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000064  00000000  00000000  0000a410  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000218  00000000  00000000  0000a474  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	80 c1       	rjmp	.+768    	; 0x304 <__vector_1>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	5e c7       	rjmp	.+3772   	; 0xecc <__vector_7>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2c c7       	rjmp	.+3672   	; 0xe6c <__vector_9>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	bb c1       	rjmp	.+886    	; 0x392 <__vector_13>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	b3 c6       	rjmp	.+3430   	; 0xd8c <__vector_18>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d4 e0       	ldi	r29, 0x04	; 4
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
      40:	11 e0       	ldi	r17, 0x01	; 1
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	b1 e0       	ldi	r27, 0x01	; 1
      46:	e4 ed       	ldi	r30, 0xD4	; 212
      48:	fb e1       	ldi	r31, 0x1B	; 27
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	ae 37       	cpi	r26, 0x7E	; 126
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	13 e0       	ldi	r17, 0x03	; 3
      58:	ae e7       	ldi	r26, 0x7E	; 126
      5a:	b1 e0       	ldi	r27, 0x01	; 1
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a2 31       	cpi	r26, 0x12	; 18
      62:	b1 07       	cpc	r27, r17
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	35 d8       	rcall	.-3990   	; 0xfffff0d2 <__eeprom_end+0xff7ef0d2>
      68:	b3 cd       	rjmp	.-1178   	; 0xfffffbd0 <__eeprom_end+0xff7efbd0>

0000006a <__bad_interrupt>:
      6a:	ab c5       	rjmp	.+2902   	; 0xbc2 <__vector_default>

0000006c <BarMeter_init>:
#define         BarMeter_MIN        0.0
#define         BarMeter_MAX        8000

float    BarMeter_INTG = (BarMeter_MAX-BarMeter_MIN)/BarMeter_N;

void BarMeter_init(void){
      6c:	df 92       	push	r13
      6e:	ef 92       	push	r14
      70:	ff 92       	push	r15
      72:	0f 93       	push	r16
      74:	1f 93       	push	r17
      76:	cf 93       	push	r28
      78:	df 93       	push	r29
    unsigned int code;
    unsigned int addr;
    
    // define User-characters
    for(code=0;code<6;code++){
      7a:	00 e0       	ldi	r16, 0x00	; 0
      7c:	10 e0       	ldi	r17, 0x00	; 0
        for(addr=0;addr<8;addr++){
            lcd_set_CGRAMaddr(code,addr);
            if( (addr > 1) & (addr < 6) )
                lcd_set_char(~(0x1f>>code));
      7e:	8f e1       	ldi	r24, 0x1F	; 31
      80:	e8 2e       	mov	r14, r24
      82:	f1 2c       	mov	r15, r1
      84:	1e c0       	rjmp	.+60     	; 0xc2 <BarMeter_init+0x56>
    unsigned int addr;
    
    // define User-characters
    for(code=0;code<6;code++){
        for(addr=0;addr<8;addr++){
            lcd_set_CGRAMaddr(code,addr);
      86:	80 2f       	mov	r24, r16
      88:	6c 2f       	mov	r22, r28
      8a:	5c d5       	rcall	.+2744   	; 0xb44 <lcd_set_CGRAMaddr>
            if( (addr > 1) & (addr < 6) )
      8c:	9e 01       	movw	r18, r28
      8e:	22 50       	subi	r18, 0x02	; 2
      90:	30 40       	sbci	r19, 0x00	; 0
      92:	24 30       	cpi	r18, 0x04	; 4
      94:	31 05       	cpc	r19, r1
      96:	10 f4       	brcc	.+4      	; 0x9c <BarMeter_init+0x30>
                lcd_set_char(~(0x1f>>code));
      98:	8d 2d       	mov	r24, r13
      9a:	09 c0       	rjmp	.+18     	; 0xae <BarMeter_init+0x42>
            else if( (addr == 6) | (addr == 1) ) lcd_set_char(0x00);
      9c:	c1 30       	cpi	r28, 0x01	; 1
      9e:	d1 05       	cpc	r29, r1
      a0:	19 f0       	breq	.+6      	; 0xa8 <BarMeter_init+0x3c>
      a2:	c6 30       	cpi	r28, 0x06	; 6
      a4:	d1 05       	cpc	r29, r1
      a6:	11 f4       	brne	.+4      	; 0xac <BarMeter_init+0x40>
      a8:	80 e0       	ldi	r24, 0x00	; 0
      aa:	01 c0       	rjmp	.+2      	; 0xae <BarMeter_init+0x42>
            else                                 lcd_set_char(0x10);
      ac:	80 e1       	ldi	r24, 0x10	; 16
      ae:	2e d4       	rcall	.+2140   	; 0x90c <lcd_set_char>
    unsigned int code;
    unsigned int addr;
    
    // define User-characters
    for(code=0;code<6;code++){
        for(addr=0;addr<8;addr++){
      b0:	21 96       	adiw	r28, 0x01	; 1
      b2:	c8 30       	cpi	r28, 0x08	; 8
      b4:	d1 05       	cpc	r29, r1
      b6:	39 f7       	brne	.-50     	; 0x86 <BarMeter_init+0x1a>
void BarMeter_init(void){
    unsigned int code;
    unsigned int addr;
    
    // define User-characters
    for(code=0;code<6;code++){
      b8:	0f 5f       	subi	r16, 0xFF	; 255
      ba:	1f 4f       	sbci	r17, 0xFF	; 255
      bc:	06 30       	cpi	r16, 0x06	; 6
      be:	11 05       	cpc	r17, r1
      c0:	61 f0       	breq	.+24     	; 0xda <BarMeter_init+0x6e>
        for(addr=0;addr<8;addr++){
            lcd_set_CGRAMaddr(code,addr);
            if( (addr > 1) & (addr < 6) )
                lcd_set_char(~(0x1f>>code));
      c2:	c7 01       	movw	r24, r14
      c4:	00 2e       	mov	r0, r16
      c6:	02 c0       	rjmp	.+4      	; 0xcc <BarMeter_init+0x60>
      c8:	95 95       	asr	r25
      ca:	87 95       	ror	r24
      cc:	0a 94       	dec	r0
      ce:	e2 f7       	brpl	.-8      	; 0xc8 <BarMeter_init+0x5c>
      d0:	d8 2e       	mov	r13, r24
      d2:	d0 94       	com	r13
      d4:	c0 e0       	ldi	r28, 0x00	; 0
      d6:	d0 e0       	ldi	r29, 0x00	; 0
      d8:	d6 cf       	rjmp	.-84     	; 0x86 <BarMeter_init+0x1a>
            else if( (addr == 6) | (addr == 1) ) lcd_set_char(0x00);
            else                                 lcd_set_char(0x10);
        }
    }
}
      da:	df 91       	pop	r29
      dc:	cf 91       	pop	r28
      de:	1f 91       	pop	r17
      e0:	0f 91       	pop	r16
      e2:	ff 90       	pop	r15
      e4:	ef 90       	pop	r14
      e6:	df 90       	pop	r13
      e8:	08 95       	ret

000000ea <BarMeter_disp>:

void BarMeter_disp(unsigned int data){
      ea:	4f 92       	push	r4
      ec:	5f 92       	push	r5
      ee:	7f 92       	push	r7
      f0:	8f 92       	push	r8
      f2:	9f 92       	push	r9
      f4:	af 92       	push	r10
      f6:	bf 92       	push	r11
      f8:	cf 92       	push	r12
      fa:	df 92       	push	r13
      fc:	ef 92       	push	r14
      fe:	ff 92       	push	r15
     100:	0f 93       	push	r16
     102:	1f 93       	push	r17
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
        data = BarMeter_MAX;
    }else if( data < BarMeter_MIN ){
        data = BarMeter_MIN;
    }
    
    conv_data = data - BarMeter_MIN;
     108:	bc 01       	movw	r22, r24
     10a:	8f e1       	ldi	r24, 0x1F	; 31
     10c:	61 34       	cpi	r22, 0x41	; 65
     10e:	78 07       	cpc	r23, r24
     110:	10 f0       	brcs	.+4      	; 0x116 <BarMeter_disp+0x2c>
     112:	60 e4       	ldi	r22, 0x40	; 64
     114:	7f e1       	ldi	r23, 0x1F	; 31
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	04 dc       	rcall	.-2040   	; 0xfffff924 <__eeprom_end+0xff7ef924>
     11c:	d7 db       	rcall	.-2130   	; 0xfffff8cc <__eeprom_end+0xff7ef8cc>
    INTG = (unsigned int)(conv_data/BarMeter_INTG);
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	00 dc       	rcall	.-2048   	; 0xfffff924 <__eeprom_end+0xff7ef924>
     124:	4b 01       	movw	r8, r22
     126:	5c 01       	movw	r10, r24
     128:	c0 90 00 01 	lds	r12, 0x0100
     12c:	d0 90 01 01 	lds	r13, 0x0101
     130:	e0 90 02 01 	lds	r14, 0x0102
     134:	f0 90 03 01 	lds	r15, 0x0103
     138:	a7 01       	movw	r20, r14
     13a:	96 01       	movw	r18, r12
     13c:	5f db       	rcall	.-2370   	; 0xfffff7fc <__eeprom_end+0xff7ef7fc>
     13e:	c6 db       	rcall	.-2164   	; 0xfffff8cc <__eeprom_end+0xff7ef8cc>
     140:	76 2e       	mov	r7, r22
    FRAC = (unsigned int)((conv_data - BarMeter_INTG*INTG)*1.0/BarMeter_INTG * 5);
     142:	06 2f       	mov	r16, r22
     144:	10 e0       	ldi	r17, 0x00	; 0

    for(n=0;n<INTG;n++){
     146:	c0 e0       	ldi	r28, 0x00	; 0
     148:	d0 e0       	ldi	r29, 0x00	; 0
     14a:	28 01       	movw	r4, r16
     14c:	03 c0       	rjmp	.+6      	; 0x154 <BarMeter_disp+0x6a>
        lcd_set_char(0x5);
     14e:	85 e0       	ldi	r24, 0x05	; 5
     150:	dd d3       	rcall	.+1978   	; 0x90c <lcd_set_char>
    
    conv_data = data - BarMeter_MIN;
    INTG = (unsigned int)(conv_data/BarMeter_INTG);
    FRAC = (unsigned int)((conv_data - BarMeter_INTG*INTG)*1.0/BarMeter_INTG * 5);

    for(n=0;n<INTG;n++){
     152:	21 96       	adiw	r28, 0x01	; 1
     154:	c4 15       	cp	r28, r4
     156:	d5 05       	cpc	r29, r5
     158:	d0 f3       	brcs	.-12     	; 0x14e <BarMeter_disp+0x64>
        lcd_set_char(0x5);
    }
    if( INTG != BarMeter_N ) lcd_set_char(FRAC);
     15a:	88 e0       	ldi	r24, 0x08	; 8
     15c:	78 16       	cp	r7, r24
     15e:	d9 f0       	breq	.+54     	; 0x196 <BarMeter_disp+0xac>
        data = BarMeter_MIN;
    }
    
    conv_data = data - BarMeter_MIN;
    INTG = (unsigned int)(conv_data/BarMeter_INTG);
    FRAC = (unsigned int)((conv_data - BarMeter_INTG*INTG)*1.0/BarMeter_INTG * 5);
     160:	b8 01       	movw	r22, r16
     162:	88 27       	eor	r24, r24
     164:	77 fd       	sbrc	r23, 7
     166:	80 95       	com	r24
     168:	98 2f       	mov	r25, r24
     16a:	de db       	rcall	.-2116   	; 0xfffff928 <__eeprom_end+0xff7ef928>
     16c:	9b 01       	movw	r18, r22
     16e:	ac 01       	movw	r20, r24
     170:	c7 01       	movw	r24, r14
     172:	b6 01       	movw	r22, r12
     174:	89 dc       	rcall	.-1774   	; 0xfffffa88 <__eeprom_end+0xff7efa88>
     176:	9b 01       	movw	r18, r22
     178:	ac 01       	movw	r20, r24
     17a:	c5 01       	movw	r24, r10
     17c:	b4 01       	movw	r22, r8
     17e:	d5 da       	rcall	.-2646   	; 0xfffff72a <__eeprom_end+0xff7ef72a>
     180:	a7 01       	movw	r20, r14
     182:	96 01       	movw	r18, r12
     184:	3b db       	rcall	.-2442   	; 0xfffff7fc <__eeprom_end+0xff7ef7fc>
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	40 ea       	ldi	r20, 0xA0	; 160
     18c:	50 e4       	ldi	r21, 0x40	; 64
     18e:	7c dc       	rcall	.-1800   	; 0xfffffa88 <__eeprom_end+0xff7efa88>
     190:	9d db       	rcall	.-2246   	; 0xfffff8cc <__eeprom_end+0xff7ef8cc>

    for(n=0;n<INTG;n++){
        lcd_set_char(0x5);
    }
    if( INTG != BarMeter_N ) lcd_set_char(FRAC);
     192:	86 2f       	mov	r24, r22
     194:	bb d3       	rcall	.+1910   	; 0x90c <lcd_set_char>
    for(n=INTG+1;n<BarMeter_N;n++){
     196:	c0 e0       	ldi	r28, 0x00	; 0
     198:	d0 e0       	ldi	r29, 0x00	; 0
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <BarMeter_disp+0xb6>
        lcd_set_char(0x0);
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	b6 d3       	rcall	.+1900   	; 0x90c <lcd_set_char>
     1a0:	21 96       	adiw	r28, 0x01	; 1

    for(n=0;n<INTG;n++){
        lcd_set_char(0x5);
    }
    if( INTG != BarMeter_N ) lcd_set_char(FRAC);
    for(n=INTG+1;n<BarMeter_N;n++){
     1a2:	ce 01       	movw	r24, r28
     1a4:	84 0d       	add	r24, r4
     1a6:	95 1d       	adc	r25, r5
     1a8:	88 30       	cpi	r24, 0x08	; 8
     1aa:	91 05       	cpc	r25, r1
     1ac:	b8 f3       	brcs	.-18     	; 0x19c <BarMeter_disp+0xb2>
        lcd_set_char(0x0);
    }

}
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	1f 91       	pop	r17
     1b4:	0f 91       	pop	r16
     1b6:	ff 90       	pop	r15
     1b8:	ef 90       	pop	r14
     1ba:	df 90       	pop	r13
     1bc:	cf 90       	pop	r12
     1be:	bf 90       	pop	r11
     1c0:	af 90       	pop	r10
     1c2:	9f 90       	pop	r9
     1c4:	8f 90       	pop	r8
     1c6:	7f 90       	pop	r7
     1c8:	5f 90       	pop	r5
     1ca:	4f 90       	pop	r4
     1cc:	08 95       	ret

000001ce <ExtInterrupt_init>:
#include "ExtInterrupt.h"

void ExtInterrupt_init(void) {

   // INT0, INT1 Pin change interrupt enable
	EIMSK = 0b00000001;
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	8d bb       	out	0x1d, r24	; 29
	// bit 7-2 : not valid ,  bit 1 : INT1 ,  bit 0 : INT0 
	
   // INT0, INT1 Pin change interrupt mode setting
	EICRA = 0b00000011;
     1d2:	83 e0       	ldi	r24, 0x03	; 3
     1d4:	80 93 69 00 	sts	0x0069, r24
	//		10 ... Negative edge
	//		11 ... Positive edge


	// Pin group mask
	PCICR = 0b00000000;
     1d8:	10 92 68 00 	sts	0x0068, r1
	// bit 2 : PCINT 16 - 23

	// Pin mask
	// PCMSK2 is valid, when bit 2 of PCICR is setted 
	// PCINT23, PCINT22, PCINT21, PCINT20, PCINT19, PCINT18, PCINT17, PCINT16
	PCMSK2 = 0b00000000;
     1dc:	10 92 6d 00 	sts	0x006D, r1
	// PCMSK1 is valid, when bit 1 of PCICR is setted 
	//  ----- , PCINT14, PCINT13, PCINT12, PCINT11, PCINT10,  PCINT9,  PCINT8
	PCMSK1 = 0b00000000;
     1e0:	10 92 6c 00 	sts	0x006C, r1
	// PCMSK0 is valid, when bit 0 of PCICR is setted 
	//  PCINT7,  PCINT6,  PCINT5,  PCINT4,  PCINT3,  PCINT2,  PCINT1,  PCINT0
	PCMSK0 = 0b00000000;
     1e4:	10 92 6b 00 	sts	0x006B, r1
     1e8:	08 95       	ret

000001ea <FuelPumpDriver>:
//
//

#include "FuelPumpDriver.h"

unsigned int FuelPumpDriver(unsigned long int rpm, float fuel_press, float boost){
     1ea:	dc 01       	movw	r26, r24
     1ec:	cb 01       	movw	r24, r22
    unsigned long int    FPD_COMP;
    
    if( rpm < 3000 ){
     1ee:	88 3b       	cpi	r24, 0xB8	; 184
     1f0:	2b e0       	ldi	r18, 0x0B	; 11
     1f2:	92 07       	cpc	r25, r18
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	a2 07       	cpc	r26, r18
     1f8:	20 e0       	ldi	r18, 0x00	; 0
     1fa:	b2 07       	cpc	r27, r18
     1fc:	28 f4       	brcc	.+10     	; 0x208 <FuelPumpDriver+0x1e>
        FPD_COMP = 0xff;
    }
    
    // truncate
    if( FPD_COMP < 0x7f ){
        FPD_COMP = 0x7f;
     1fe:	4f e7       	ldi	r20, 0x7F	; 127
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	60 e0       	ldi	r22, 0x00	; 0
     204:	70 e0       	ldi	r23, 0x00	; 0
     206:	04 c0       	rjmp	.+8      	; 0x210 <FuelPumpDriver+0x26>
    unsigned long int    FPD_COMP;
    
    if( rpm < 3000 ){
        FPD_COMP = rpm / 3000 * 0xff;
    }else{
        FPD_COMP = 0xff;
     208:	4f ef       	ldi	r20, 0xFF	; 255
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	70 e0       	ldi	r23, 0x00	; 0
    }else if( FPD_COMP > 0xff ){
        FPD_COMP = 0xff;
    }
    
    return (unsigned int)FPD_COMP;
}
     210:	ca 01       	movw	r24, r20
     212:	08 95       	ret

00000214 <LEDarray>:
unsigned int            flash = 0xff;
unsigned int            flash_cnt = 0;

void  LEDarray(unsigned int rpm){
    
    if( (rpm > rpm_disp+250) || (rpm < rpm_disp-250)){
     214:	20 91 8a 01 	lds	r18, 0x018A
     218:	30 91 8b 01 	lds	r19, 0x018B
     21c:	a9 01       	movw	r20, r18
     21e:	46 50       	subi	r20, 0x06	; 6
     220:	5f 4f       	sbci	r21, 0xFF	; 255
     222:	48 17       	cp	r20, r24
     224:	59 07       	cpc	r21, r25
     226:	28 f0       	brcs	.+10     	; 0x232 <LEDarray+0x1e>
     228:	2a 5f       	subi	r18, 0xFA	; 250
     22a:	30 40       	sbci	r19, 0x00	; 0
     22c:	82 17       	cp	r24, r18
     22e:	93 07       	cpc	r25, r19
     230:	20 f4       	brcc	.+8      	; 0x23a <LEDarray+0x26>
        rpm_disp = rpm;
     232:	90 93 8b 01 	sts	0x018B, r25
     236:	80 93 8a 01 	sts	0x018A, r24
    }

    if( rpm >= RPM_FLASH ){     // Flash-sequence
     23a:	2c e1       	ldi	r18, 0x1C	; 28
     23c:	80 32       	cpi	r24, 0x20	; 32
     23e:	92 07       	cpc	r25, r18
     240:	f8 f0       	brcs	.+62     	; 0x280 <LEDarray+0x6c>
        OCR2A   = LEDarrayDuty_H;   // Compare value for LED bar duty
     242:	80 e4       	ldi	r24, 0x40	; 64
     244:	80 93 b3 00 	sts	0x00B3, r24
        if( flash_cnt == FLASH){
     248:	80 91 7e 01 	lds	r24, 0x017E
     24c:	90 91 7f 01 	lds	r25, 0x017F
     250:	89 31       	cpi	r24, 0x19	; 25
     252:	91 05       	cpc	r25, r1
     254:	79 f4       	brne	.+30     	; 0x274 <LEDarray+0x60>
            flash_cnt = 0;
     256:	10 92 7f 01 	sts	0x017F, r1
     25a:	10 92 7e 01 	sts	0x017E, r1
            flash = ~flash;
     25e:	80 91 04 01 	lds	r24, 0x0104
     262:	90 91 05 01 	lds	r25, 0x0105
     266:	80 95       	com	r24
     268:	90 95       	com	r25
     26a:	90 93 05 01 	sts	0x0105, r25
     26e:	80 93 04 01 	sts	0x0104, r24
     272:	1c c0       	rjmp	.+56     	; 0x2ac <LEDarray+0x98>
        }else{
            flash_cnt++;
     274:	01 96       	adiw	r24, 0x01	; 1
     276:	90 93 7f 01 	sts	0x017F, r25
     27a:	80 93 7e 01 	sts	0x017E, r24
     27e:	16 c0       	rjmp	.+44     	; 0x2ac <LEDarray+0x98>
        }
    }else{                      // Normal-sequence
        flash = 0xff;
     280:	2f ef       	ldi	r18, 0xFF	; 255
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	30 93 05 01 	sts	0x0105, r19
     288:	20 93 04 01 	sts	0x0104, r18
        OCR2A   = LEDarrayDuty_L;   // Compare value for LED bar duty
     28c:	28 e0       	ldi	r18, 0x08	; 8
     28e:	20 93 b3 00 	sts	0x00B3, r18
    }

    
    if( rpm < RPM_LOW ){
     292:	2d e0       	ldi	r18, 0x0D	; 13
     294:	8c 3a       	cpi	r24, 0xAC	; 172
     296:	92 07       	cpc	r25, r18
     298:	28 f4       	brcc	.+10     	; 0x2a4 <LEDarray+0x90>
        LED_scale = 0;
     29a:	10 92 89 01 	sts	0x0189, r1
     29e:	10 92 88 01 	sts	0x0188, r1
     2a2:	21 c0       	rjmp	.+66     	; 0x2e6 <LEDarray+0xd2>
    }else if( rpm > RPM_HIGH ){
     2a4:	2b e1       	ldi	r18, 0x1B	; 27
     2a6:	89 35       	cpi	r24, 0x59	; 89
     2a8:	92 07       	cpc	r25, r18
     2aa:	18 f0       	brcs	.+6      	; 0x2b2 <LEDarray+0x9e>
        LED_scale = Narray;
     2ac:	88 e0       	ldi	r24, 0x08	; 8
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	16 c0       	rjmp	.+44     	; 0x2de <LEDarray+0xca>
    }else{
        LED_scale = (unsigned int)(Narray*(float)( rpm_disp - RPM_LOW )/(float)( RPM_HIGH - RPM_LOW ));
     2b2:	60 91 8a 01 	lds	r22, 0x018A
     2b6:	70 91 8b 01 	lds	r23, 0x018B
     2ba:	6c 5a       	subi	r22, 0xAC	; 172
     2bc:	7d 40       	sbci	r23, 0x0D	; 13
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	30 db       	rcall	.-2464   	; 0xfffff924 <__eeprom_end+0xff7ef924>
     2c4:	20 e0       	ldi	r18, 0x00	; 0
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	40 e0       	ldi	r20, 0x00	; 0
     2ca:	51 e4       	ldi	r21, 0x41	; 65
     2cc:	dd db       	rcall	.-2118   	; 0xfffffa88 <__eeprom_end+0xff7efa88>
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 ec       	ldi	r19, 0xC0	; 192
     2d2:	4a e5       	ldi	r20, 0x5A	; 90
     2d4:	55 e4       	ldi	r21, 0x45	; 69
     2d6:	92 da       	rcall	.-2780   	; 0xfffff7fc <__eeprom_end+0xff7ef7fc>
     2d8:	f9 da       	rcall	.-2574   	; 0xfffff8cc <__eeprom_end+0xff7ef8cc>
     2da:	dc 01       	movw	r26, r24
     2dc:	cb 01       	movw	r24, r22
     2de:	90 93 89 01 	sts	0x0189, r25
     2e2:	80 93 88 01 	sts	0x0188, r24
    }

    send_bits_595_LED( ( ~( 0xff << (int)LED_scale ) ) & flash );
     2e6:	8f ef       	ldi	r24, 0xFF	; 255
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	00 90 88 01 	lds	r0, 0x0188
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <LEDarray+0xe0>
     2f0:	88 0f       	add	r24, r24
     2f2:	99 1f       	adc	r25, r25
     2f4:	0a 94       	dec	r0
     2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <LEDarray+0xdc>
     2f8:	80 95       	com	r24
     2fa:	90 91 04 01 	lds	r25, 0x0104
     2fe:	89 23       	and	r24, r25
     300:	4f d4       	rcall	.+2206   	; 0xba0 <send_bits_595_LED>
        
    
     302:	08 95       	ret

00000304 <__vector_1>:

// for debug
unsigned long int   cnt_min;
unsigned long int   cnt_max;

ISR(INT0_vect){
     304:	1f 92       	push	r1
     306:	0f 92       	push	r0
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	0f 92       	push	r0
     30c:	11 24       	eor	r1, r1
     30e:	4f 93       	push	r20
     310:	5f 93       	push	r21
     312:	6f 93       	push	r22
     314:	7f 93       	push	r23
     316:	8f 93       	push	r24
     318:	9f 93       	push	r25
     31a:	ef 93       	push	r30
     31c:	ff 93       	push	r31
    if( TCNT1 > TCNT_LIM ){
     31e:	80 91 84 00 	lds	r24, 0x0084
     322:	90 91 85 00 	lds	r25, 0x0085
     326:	8b 3f       	cpi	r24, 0xFB	; 251
     328:	91 05       	cpc	r25, r1
     32a:	30 f1       	brcs	.+76     	; 0x378 <__vector_1+0x74>
        meas_array[tacho_n] = TCNT1;
     32c:	80 91 80 01 	lds	r24, 0x0180
     330:	90 91 81 01 	lds	r25, 0x0181
     334:	40 91 84 00 	lds	r20, 0x0084
     338:	50 91 85 00 	lds	r21, 0x0085
     33c:	fc 01       	movw	r30, r24
     33e:	ee 0f       	add	r30, r30
     340:	ff 1f       	adc	r31, r31
     342:	ee 0f       	add	r30, r30
     344:	ff 1f       	adc	r31, r31
     346:	e0 56       	subi	r30, 0x60	; 96
     348:	fe 4f       	sbci	r31, 0xFE	; 254
     34a:	60 e0       	ldi	r22, 0x00	; 0
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	40 83       	st	Z, r20
     350:	51 83       	std	Z+1, r21	; 0x01
     352:	62 83       	std	Z+2, r22	; 0x02
     354:	73 83       	std	Z+3, r23	; 0x03
        if( tacho_n == Nmed-1 ) tacho_n=0;
     356:	8f 31       	cpi	r24, 0x1F	; 31
     358:	91 05       	cpc	r25, r1
     35a:	29 f4       	brne	.+10     	; 0x366 <__vector_1+0x62>
     35c:	10 92 81 01 	sts	0x0181, r1
     360:	10 92 80 01 	sts	0x0180, r1
     364:	05 c0       	rjmp	.+10     	; 0x370 <__vector_1+0x6c>
        else                    tacho_n++;
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	90 93 81 01 	sts	0x0181, r25
     36c:	80 93 80 01 	sts	0x0180, r24
        TCNT1 = 0;
     370:	10 92 85 00 	sts	0x0085, r1
     374:	10 92 84 00 	sts	0x0084, r1
    }
}
     378:	ff 91       	pop	r31
     37a:	ef 91       	pop	r30
     37c:	9f 91       	pop	r25
     37e:	8f 91       	pop	r24
     380:	7f 91       	pop	r23
     382:	6f 91       	pop	r22
     384:	5f 91       	pop	r21
     386:	4f 91       	pop	r20
     388:	0f 90       	pop	r0
     38a:	0f be       	out	0x3f, r0	; 63
     38c:	0f 90       	pop	r0
     38e:	1f 90       	pop	r1
     390:	18 95       	reti

00000392 <__vector_13>:

// 16-bit Timer overflow
ISR(TIMER1_OVF_vect){
     392:	1f 92       	push	r1
     394:	0f 92       	push	r0
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	0f 92       	push	r0
     39a:	11 24       	eor	r1, r1
     39c:	4f 93       	push	r20
     39e:	5f 93       	push	r21
     3a0:	6f 93       	push	r22
     3a2:	7f 93       	push	r23
     3a4:	8f 93       	push	r24
     3a6:	9f 93       	push	r25
     3a8:	ef 93       	push	r30
     3aa:	ff 93       	push	r31
    meas_array[tacho_n] = 0xffffffff;
     3ac:	80 91 80 01 	lds	r24, 0x0180
     3b0:	90 91 81 01 	lds	r25, 0x0181
     3b4:	fc 01       	movw	r30, r24
     3b6:	ee 0f       	add	r30, r30
     3b8:	ff 1f       	adc	r31, r31
     3ba:	ee 0f       	add	r30, r30
     3bc:	ff 1f       	adc	r31, r31
     3be:	e0 56       	subi	r30, 0x60	; 96
     3c0:	fe 4f       	sbci	r31, 0xFE	; 254
     3c2:	4f ef       	ldi	r20, 0xFF	; 255
     3c4:	5f ef       	ldi	r21, 0xFF	; 255
     3c6:	ba 01       	movw	r22, r20
     3c8:	40 83       	st	Z, r20
     3ca:	51 83       	std	Z+1, r21	; 0x01
     3cc:	62 83       	std	Z+2, r22	; 0x02
     3ce:	73 83       	std	Z+3, r23	; 0x03
    if( tacho_n == Nmed-1 ) tacho_n=0;
     3d0:	8f 31       	cpi	r24, 0x1F	; 31
     3d2:	91 05       	cpc	r25, r1
     3d4:	29 f4       	brne	.+10     	; 0x3e0 <__vector_13+0x4e>
     3d6:	10 92 81 01 	sts	0x0181, r1
     3da:	10 92 80 01 	sts	0x0180, r1
     3de:	05 c0       	rjmp	.+10     	; 0x3ea <__vector_13+0x58>
    else                    tacho_n++;
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	90 93 81 01 	sts	0x0181, r25
     3e6:	80 93 80 01 	sts	0x0180, r24
    TCNT1 = 0;
     3ea:	10 92 85 00 	sts	0x0085, r1
     3ee:	10 92 84 00 	sts	0x0084, r1
}
     3f2:	ff 91       	pop	r31
     3f4:	ef 91       	pop	r30
     3f6:	9f 91       	pop	r25
     3f8:	8f 91       	pop	r24
     3fa:	7f 91       	pop	r23
     3fc:	6f 91       	pop	r22
     3fe:	5f 91       	pop	r21
     400:	4f 91       	pop	r20
     402:	0f 90       	pop	r0
     404:	0f be       	out	0x3f, r0	; 63
     406:	0f 90       	pop	r0
     408:	1f 90       	pop	r1
     40a:	18 95       	reti

0000040c <BubbleSort>:

// Bubble Sort (min->max)
void BubbleSort(void){
     40c:	af 92       	push	r10
     40e:	bf 92       	push	r11
     410:	cf 92       	push	r12
     412:	df 92       	push	r13
     414:	ef 92       	push	r14
     416:	ff 92       	push	r15
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
    unsigned int tmp;
    unsigned int min;
    unsigned int min_index = 0;
    unsigned int n,m;
    
    for(m=0;m<Nmed;m++){
     420:	08 e2       	ldi	r16, 0x28	; 40
     422:	12 e0       	ldi	r17, 0x02	; 2
     424:	cc 24       	eor	r12, r12
     426:	dd 24       	eor	r13, r13

// Bubble Sort (min->max)
void BubbleSort(void){
    unsigned int tmp;
    unsigned int min;
    unsigned int min_index = 0;
     428:	aa 24       	eor	r10, r10
     42a:	bb 24       	eor	r11, r11
     42c:	38 c0       	rjmp	.+112    	; 0x49e <BubbleSort+0x92>
    else                    tacho_n++;
    TCNT1 = 0;
}

// Bubble Sort (min->max)
void BubbleSort(void){
     42e:	f8 01       	movw	r30, r16
     430:	ec 0f       	add	r30, r28
     432:	fd 1f       	adc	r31, r29
    unsigned int n,m;
    
    for(m=0;m<Nmed;m++){
        min = 0xffffffff;
        for(n=m;n<Nmed;n++){
            if( proc_array[n] < min ){
     434:	80 81       	ld	r24, Z
     436:	91 81       	ldd	r25, Z+1	; 0x01
     438:	a2 81       	ldd	r26, Z+2	; 0x02
     43a:	b3 81       	ldd	r27, Z+3	; 0x03
     43c:	a7 01       	movw	r20, r14
     43e:	60 e0       	ldi	r22, 0x00	; 0
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	84 17       	cp	r24, r20
     444:	95 07       	cpc	r25, r21
     446:	a6 07       	cpc	r26, r22
     448:	b7 07       	cpc	r27, r23
     44a:	10 f4       	brcc	.+4      	; 0x450 <BubbleSort+0x44>
                min = proc_array[n];
     44c:	7c 01       	movw	r14, r24
     44e:	59 01       	movw	r10, r18
    unsigned int min_index = 0;
    unsigned int n,m;
    
    for(m=0;m<Nmed;m++){
        min = 0xffffffff;
        for(n=m;n<Nmed;n++){
     450:	2f 5f       	subi	r18, 0xFF	; 255
     452:	3f 4f       	sbci	r19, 0xFF	; 255
     454:	24 96       	adiw	r28, 0x04	; 4
     456:	20 32       	cpi	r18, 0x20	; 32
     458:	31 05       	cpc	r19, r1
     45a:	49 f7       	brne	.-46     	; 0x42e <BubbleSort+0x22>
            if( proc_array[n] < min ){
                min = proc_array[n];
                min_index = n;
            }
        }
        tmp                     = proc_array[m];
     45c:	d8 01       	movw	r26, r16
     45e:	8d 91       	ld	r24, X+
     460:	9c 91       	ld	r25, X
     462:	11 97       	sbiw	r26, 0x01	; 1
        proc_array[m]           = proc_array[min_index];
     464:	f5 01       	movw	r30, r10
     466:	ee 0f       	add	r30, r30
     468:	ff 1f       	adc	r31, r31
     46a:	ee 0f       	add	r30, r30
     46c:	ff 1f       	adc	r31, r31
     46e:	e8 5d       	subi	r30, 0xD8	; 216
     470:	fd 4f       	sbci	r31, 0xFD	; 253
     472:	40 81       	ld	r20, Z
     474:	51 81       	ldd	r21, Z+1	; 0x01
     476:	62 81       	ldd	r22, Z+2	; 0x02
     478:	73 81       	ldd	r23, Z+3	; 0x03
     47a:	4d 93       	st	X+, r20
     47c:	5d 93       	st	X+, r21
     47e:	6d 93       	st	X+, r22
     480:	7d 93       	st	X+, r23
     482:	8d 01       	movw	r16, r26
        proc_array[min_index]   = tmp;
     484:	a0 e0       	ldi	r26, 0x00	; 0
     486:	b0 e0       	ldi	r27, 0x00	; 0
     488:	80 83       	st	Z, r24
     48a:	91 83       	std	Z+1, r25	; 0x01
     48c:	a2 83       	std	Z+2, r26	; 0x02
     48e:	b3 83       	std	Z+3, r27	; 0x03
    unsigned int tmp;
    unsigned int min;
    unsigned int min_index = 0;
    unsigned int n,m;
    
    for(m=0;m<Nmed;m++){
     490:	08 94       	sec
     492:	c1 1c       	adc	r12, r1
     494:	d1 1c       	adc	r13, r1
     496:	b0 e2       	ldi	r27, 0x20	; 32
     498:	cb 16       	cp	r12, r27
     49a:	d1 04       	cpc	r13, r1
     49c:	39 f0       	breq	.+14     	; 0x4ac <BubbleSort+0xa0>
    else                    tacho_n++;
    TCNT1 = 0;
}

// Bubble Sort (min->max)
void BubbleSort(void){
     49e:	96 01       	movw	r18, r12
     4a0:	c0 e0       	ldi	r28, 0x00	; 0
     4a2:	d0 e0       	ldi	r29, 0x00	; 0
     4a4:	ee 24       	eor	r14, r14
     4a6:	ea 94       	dec	r14
     4a8:	fe 2c       	mov	r15, r14
     4aa:	c1 cf       	rjmp	.-126    	; 0x42e <BubbleSort+0x22>
        }
        tmp                     = proc_array[m];
        proc_array[m]           = proc_array[min_index];
        proc_array[min_index]   = tmp;
    }
}
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	ff 90       	pop	r15
     4b6:	ef 90       	pop	r14
     4b8:	df 90       	pop	r13
     4ba:	cf 90       	pop	r12
     4bc:	bf 90       	pop	r11
     4be:	af 90       	pop	r10
     4c0:	08 95       	ret

000004c2 <TachoMeter_init>:

void TachoMeter_init(unsigned long int FOSC_in,unsigned long int Ndiv_in){
     4c2:	dc 01       	movw	r26, r24
     4c4:	cb 01       	movw	r24, r22
    
    FOSC = FOSC_in;
     4c6:	80 93 9c 01 	sts	0x019C, r24
     4ca:	90 93 9d 01 	sts	0x019D, r25
     4ce:	a0 93 9e 01 	sts	0x019E, r26
     4d2:	b0 93 9f 01 	sts	0x019F, r27
    Ndiv = Ndiv_in;
     4d6:	20 93 94 01 	sts	0x0194, r18
     4da:	30 93 95 01 	sts	0x0195, r19
     4de:	40 93 96 01 	sts	0x0196, r20
     4e2:	50 93 97 01 	sts	0x0197, r21
    
}
     4e6:	08 95       	ret

000004e8 <TachoMeter>:


unsigned long int TachoMeter(void){
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	e0 ea       	ldi	r30, 0xA0	; 160
     4f2:	f1 e0       	ldi	r31, 0x01	; 1
     4f4:	a8 e2       	ldi	r26, 0x28	; 40
     4f6:	b2 e0       	ldi	r27, 0x02	; 2
    unsigned int n;
    
    // Tacho Meter
    //Median Filter
    for(n=0;n<Nmed;n++){
        proc_array[n] = meas_array[n];
     4f8:	41 91       	ld	r20, Z+
     4fa:	51 91       	ld	r21, Z+
     4fc:	61 91       	ld	r22, Z+
     4fe:	71 91       	ld	r23, Z+
     500:	4d 93       	st	X+, r20
     502:	5d 93       	st	X+, r21
     504:	6d 93       	st	X+, r22
     506:	7d 93       	st	X+, r23
    
    unsigned int n;
    
    // Tacho Meter
    //Median Filter
    for(n=0;n<Nmed;n++){
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	e0 32       	cpi	r30, 0x20	; 32
     50c:	f8 07       	cpc	r31, r24
     50e:	a1 f7       	brne	.-24     	; 0x4f8 <TachoMeter+0x10>
        proc_array[n] = meas_array[n];
    }
    BubbleSort();
     510:	7d df       	rcall	.-262    	; 0x40c <BubbleSort>
    
    // Calculate frequency
    if(meas_array[tacho_n] >= 0xffff){          // Too Long Gap Pulse
     512:	e0 91 80 01 	lds	r30, 0x0180
     516:	f0 91 81 01 	lds	r31, 0x0181
     51a:	ee 0f       	add	r30, r30
     51c:	ff 1f       	adc	r31, r31
     51e:	ee 0f       	add	r30, r30
     520:	ff 1f       	adc	r31, r31
     522:	e0 56       	subi	r30, 0x60	; 96
     524:	fe 4f       	sbci	r31, 0xFE	; 254
     526:	c0 80       	ld	r12, Z
     528:	d1 80       	ldd	r13, Z+1	; 0x01
     52a:	e2 80       	ldd	r14, Z+2	; 0x02
     52c:	f3 80       	ldd	r15, Z+3	; 0x03
     52e:	8f ef       	ldi	r24, 0xFF	; 255
     530:	c8 16       	cp	r12, r24
     532:	8f ef       	ldi	r24, 0xFF	; 255
     534:	d8 06       	cpc	r13, r24
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	e8 06       	cpc	r14, r24
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	f8 06       	cpc	r15, r24
     53e:	20 f0       	brcs	.+8      	; 0x548 <__stack+0x49>
        freq = 0;
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	dc 01       	movw	r26, r24
     546:	1b c0       	rjmp	.+54     	; 0x57e <__stack+0x7f>
    }else{                                      // Last Pulse
        freq = FOSC / Ndiv / meas_array[tacho_n];
     548:	60 91 9c 01 	lds	r22, 0x019C
     54c:	70 91 9d 01 	lds	r23, 0x019D
     550:	80 91 9e 01 	lds	r24, 0x019E
     554:	90 91 9f 01 	lds	r25, 0x019F
     558:	20 91 94 01 	lds	r18, 0x0194
     55c:	30 91 95 01 	lds	r19, 0x0195
     560:	40 91 96 01 	lds	r20, 0x0196
     564:	50 91 97 01 	lds	r21, 0x0197
     568:	11 db       	rcall	.-2526   	; 0xfffffb8c <__eeprom_end+0xff7efb8c>
     56a:	ca 01       	movw	r24, r20
     56c:	b9 01       	movw	r22, r18
     56e:	a7 01       	movw	r20, r14
     570:	96 01       	movw	r18, r12
     572:	0c db       	rcall	.-2536   	; 0xfffffb8c <__eeprom_end+0xff7efb8c>
     574:	ca 01       	movw	r24, r20
     576:	b9 01       	movw	r22, r18
     578:	d5 d9       	rcall	.-3158   	; 0xfffff924 <__eeprom_end+0xff7ef924>
     57a:	dc 01       	movw	r26, r24
     57c:	cb 01       	movw	r24, r22
     57e:	80 93 8c 01 	sts	0x018C, r24
     582:	90 93 8d 01 	sts	0x018D, r25
     586:	a0 93 8e 01 	sts	0x018E, r26
     58a:	b0 93 8f 01 	sts	0x018F, r27
    }
    
    // Decide measured frequency is valid or invalid
    
    if( ( freq - freq_cur ) < RPM_DIFF/60.0 ){  // Tracking
     58e:	c0 90 8c 01 	lds	r12, 0x018C
     592:	d0 90 8d 01 	lds	r13, 0x018D
     596:	e0 90 8e 01 	lds	r14, 0x018E
     59a:	f0 90 8f 01 	lds	r15, 0x018F
     59e:	c7 01       	movw	r24, r14
     5a0:	b6 01       	movw	r22, r12
     5a2:	20 91 98 01 	lds	r18, 0x0198
     5a6:	30 91 99 01 	lds	r19, 0x0199
     5aa:	40 91 9a 01 	lds	r20, 0x019A
     5ae:	50 91 9b 01 	lds	r21, 0x019B
     5b2:	bb d8       	rcall	.-3722   	; 0xfffff72a <__eeprom_end+0xff7ef72a>
     5b4:	25 e5       	ldi	r18, 0x55	; 85
     5b6:	35 e5       	ldi	r19, 0x55	; 85
     5b8:	45 e0       	ldi	r20, 0x05	; 5
     5ba:	51 e4       	ldi	r21, 0x41	; 65
     5bc:	1b d9       	rcall	.-3530   	; 0xfffff7f4 <__eeprom_end+0xff7ef7f4>
     5be:	87 ff       	sbrs	r24, 7
     5c0:	09 c0       	rjmp	.+18     	; 0x5d4 <__stack+0xd5>
        freq_cur = freq;
     5c2:	c0 92 98 01 	sts	0x0198, r12
     5c6:	d0 92 99 01 	sts	0x0199, r13
     5ca:	e0 92 9a 01 	sts	0x019A, r14
     5ce:	f0 92 9b 01 	sts	0x019B, r15
     5d2:	53 c0       	rjmp	.+166    	; 0x67a <__stack+0x17b>
    }else{                                      // Force Track
        cnt_min = proc_array[0];
     5d4:	80 91 28 02 	lds	r24, 0x0228
     5d8:	90 91 29 02 	lds	r25, 0x0229
     5dc:	a0 91 2a 02 	lds	r26, 0x022A
     5e0:	b0 91 2b 02 	lds	r27, 0x022B
     5e4:	80 93 24 02 	sts	0x0224, r24
     5e8:	90 93 25 02 	sts	0x0225, r25
     5ec:	a0 93 26 02 	sts	0x0226, r26
     5f0:	b0 93 27 02 	sts	0x0227, r27
        cnt_max = proc_array[Nmed-1];
     5f4:	80 91 a4 02 	lds	r24, 0x02A4
     5f8:	90 91 a5 02 	lds	r25, 0x02A5
     5fc:	a0 91 a6 02 	lds	r26, 0x02A6
     600:	b0 91 a7 02 	lds	r27, 0x02A7
     604:	80 93 20 02 	sts	0x0220, r24
     608:	90 93 21 02 	sts	0x0221, r25
     60c:	a0 93 22 02 	sts	0x0222, r26
     610:	b0 93 23 02 	sts	0x0223, r27
        cnt = proc_array[Nmed>>1]; // 最新カウント値をセット
     614:	c0 90 68 02 	lds	r12, 0x0268
     618:	d0 90 69 02 	lds	r13, 0x0269
     61c:	e0 90 6a 02 	lds	r14, 0x026A
     620:	f0 90 6b 02 	lds	r15, 0x026B
     624:	c0 92 90 01 	sts	0x0190, r12
     628:	d0 92 91 01 	sts	0x0191, r13
     62c:	e0 92 92 01 	sts	0x0192, r14
     630:	f0 92 93 01 	sts	0x0193, r15
        freq_cur = FOSC / Ndiv / cnt;
     634:	60 91 9c 01 	lds	r22, 0x019C
     638:	70 91 9d 01 	lds	r23, 0x019D
     63c:	80 91 9e 01 	lds	r24, 0x019E
     640:	90 91 9f 01 	lds	r25, 0x019F
     644:	20 91 94 01 	lds	r18, 0x0194
     648:	30 91 95 01 	lds	r19, 0x0195
     64c:	40 91 96 01 	lds	r20, 0x0196
     650:	50 91 97 01 	lds	r21, 0x0197
     654:	9b da       	rcall	.-2762   	; 0xfffffb8c <__eeprom_end+0xff7efb8c>
     656:	ca 01       	movw	r24, r20
     658:	b9 01       	movw	r22, r18
     65a:	a7 01       	movw	r20, r14
     65c:	96 01       	movw	r18, r12
     65e:	96 da       	rcall	.-2772   	; 0xfffffb8c <__eeprom_end+0xff7efb8c>
     660:	ca 01       	movw	r24, r20
     662:	b9 01       	movw	r22, r18
     664:	5f d9       	rcall	.-3394   	; 0xfffff924 <__eeprom_end+0xff7ef924>
     666:	dc 01       	movw	r26, r24
     668:	cb 01       	movw	r24, r22
     66a:	80 93 98 01 	sts	0x0198, r24
     66e:	90 93 99 01 	sts	0x0199, r25
     672:	a0 93 9a 01 	sts	0x019A, r26
     676:	b0 93 9b 01 	sts	0x019B, r27
    }
    
    // Calcurate RPM
    rpm = (unsigned long int)( 60.0 * freq_cur / Npulse );
     67a:	60 91 98 01 	lds	r22, 0x0198
     67e:	70 91 99 01 	lds	r23, 0x0199
     682:	80 91 9a 01 	lds	r24, 0x019A
     686:	90 91 9b 01 	lds	r25, 0x019B
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	40 e7       	ldi	r20, 0x70	; 112
     690:	52 e4       	ldi	r21, 0x42	; 66
     692:	fa d9       	rcall	.-3084   	; 0xfffffa88 <__eeprom_end+0xff7efa88>
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	5f e3       	ldi	r21, 0x3F	; 63
     69c:	f5 d9       	rcall	.-3094   	; 0xfffffa88 <__eeprom_end+0xff7efa88>
     69e:	16 d9       	rcall	.-3540   	; 0xfffff8cc <__eeprom_end+0xff7ef8cc>
     6a0:	60 93 84 01 	sts	0x0184, r22
     6a4:	70 93 85 01 	sts	0x0185, r23
     6a8:	80 93 86 01 	sts	0x0186, r24
     6ac:	90 93 87 01 	sts	0x0187, r25
    
    return rpm;
    
}
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	df 90       	pop	r13
     6b6:	cf 90       	pop	r12
     6b8:	08 95       	ret

000006ba <FaceMark_init>:
    
    //code 0-5 is used in "BarMeter"
    // "ω"
    code = 6;
    addr = 0;
    lcd_set_CGRAMaddr(code,addr);
     6ba:	86 e0       	ldi	r24, 0x06	; 6
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	42 d2       	rcall	.+1156   	; 0xb44 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00000000);
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	24 d1       	rcall	.+584    	; 0x90c <lcd_set_char>
    addr = 1;
    lcd_set_CGRAMaddr(code,addr);
     6c4:	86 e0       	ldi	r24, 0x06	; 6
     6c6:	61 e0       	ldi	r22, 0x01	; 1
     6c8:	3d d2       	rcall	.+1146   	; 0xb44 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00000000);
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	1f d1       	rcall	.+574    	; 0x90c <lcd_set_char>
    addr = 2;
    lcd_set_CGRAMaddr(code,addr);
     6ce:	86 e0       	ldi	r24, 0x06	; 6
     6d0:	62 e0       	ldi	r22, 0x02	; 2
     6d2:	38 d2       	rcall	.+1136   	; 0xb44 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00000000);
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	1a d1       	rcall	.+564    	; 0x90c <lcd_set_char>
    addr = 3;
    lcd_set_CGRAMaddr(code,addr);
     6d8:	86 e0       	ldi	r24, 0x06	; 6
     6da:	63 e0       	ldi	r22, 0x03	; 3
     6dc:	33 d2       	rcall	.+1126   	; 0xb44 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00000000);
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	15 d1       	rcall	.+554    	; 0x90c <lcd_set_char>
    addr = 4;
    lcd_set_CGRAMaddr(code,addr);
     6e2:	86 e0       	ldi	r24, 0x06	; 6
     6e4:	64 e0       	ldi	r22, 0x04	; 4
     6e6:	2e d2       	rcall	.+1116   	; 0xb44 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010001);
     6e8:	81 e1       	ldi	r24, 0x11	; 17
     6ea:	10 d1       	rcall	.+544    	; 0x90c <lcd_set_char>
    addr = 5;
    lcd_set_CGRAMaddr(code,addr);
     6ec:	86 e0       	ldi	r24, 0x06	; 6
     6ee:	65 e0       	ldi	r22, 0x05	; 5
     6f0:	29 d2       	rcall	.+1106   	; 0xb44 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010101);
     6f2:	85 e1       	ldi	r24, 0x15	; 21
     6f4:	0b d1       	rcall	.+534    	; 0x90c <lcd_set_char>
    addr = 6;
    lcd_set_CGRAMaddr(code,addr);
     6f6:	86 e0       	ldi	r24, 0x06	; 6
     6f8:	66 e0       	ldi	r22, 0x06	; 6
     6fa:	24 d2       	rcall	.+1096   	; 0xb44 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010101);
     6fc:	85 e1       	ldi	r24, 0x15	; 21
     6fe:	06 d1       	rcall	.+524    	; 0x90c <lcd_set_char>
    addr = 7;
    lcd_set_CGRAMaddr(code,addr);
     700:	86 e0       	ldi	r24, 0x06	; 6
     702:	67 e0       	ldi	r22, 0x07	; 7
     704:	1f d2       	rcall	.+1086   	; 0xb44 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00001010);
     706:	8a e0       	ldi	r24, 0x0A	; 10
     708:	01 d1       	rcall	.+514    	; 0x90c <lcd_set_char>
    
    // "Д"
    code = 7;
    addr = 0;
    lcd_set_CGRAMaddr(code,addr);
     70a:	87 e0       	ldi	r24, 0x07	; 7
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	1a d2       	rcall	.+1076   	; 0xb44 <lcd_set_CGRAMaddr>
    lcd_set_char(0x00);
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	fc d0       	rcall	.+504    	; 0x90c <lcd_set_char>
    addr = 1;
    lcd_set_CGRAMaddr(code,addr);
     714:	87 e0       	ldi	r24, 0x07	; 7
     716:	61 e0       	ldi	r22, 0x01	; 1
     718:	15 d2       	rcall	.+1066   	; 0xb44 <lcd_set_CGRAMaddr>
    lcd_set_char(0x00);
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	f7 d0       	rcall	.+494    	; 0x90c <lcd_set_char>
    addr = 2;
    lcd_set_CGRAMaddr(code,addr);
     71e:	87 e0       	ldi	r24, 0x07	; 7
     720:	62 e0       	ldi	r22, 0x02	; 2
     722:	10 d2       	rcall	.+1056   	; 0xb44 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00011100);
     724:	8c e1       	ldi	r24, 0x1C	; 28
     726:	f2 d0       	rcall	.+484    	; 0x90c <lcd_set_char>
    addr = 3;
    lcd_set_CGRAMaddr(code,addr);
     728:	87 e0       	ldi	r24, 0x07	; 7
     72a:	63 e0       	ldi	r22, 0x03	; 3
     72c:	0b d2       	rcall	.+1046   	; 0xb44 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010100);
     72e:	84 e1       	ldi	r24, 0x14	; 20
     730:	ed d0       	rcall	.+474    	; 0x90c <lcd_set_char>
    addr = 4;
    lcd_set_CGRAMaddr(code,addr);
     732:	87 e0       	ldi	r24, 0x07	; 7
     734:	64 e0       	ldi	r22, 0x04	; 4
     736:	06 d2       	rcall	.+1036   	; 0xb44 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010100);
     738:	84 e1       	ldi	r24, 0x14	; 20
     73a:	e8 d0       	rcall	.+464    	; 0x90c <lcd_set_char>
    addr = 5;
    lcd_set_CGRAMaddr(code,addr);
     73c:	87 e0       	ldi	r24, 0x07	; 7
     73e:	65 e0       	ldi	r22, 0x05	; 5
     740:	01 d2       	rcall	.+1026   	; 0xb44 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010010);
     742:	82 e1       	ldi	r24, 0x12	; 18
     744:	e3 d0       	rcall	.+454    	; 0x90c <lcd_set_char>
    addr = 6;
    lcd_set_CGRAMaddr(code,addr);
     746:	87 e0       	ldi	r24, 0x07	; 7
     748:	66 e0       	ldi	r22, 0x06	; 6
     74a:	fc d1       	rcall	.+1016   	; 0xb44 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00011111);
     74c:	8f e1       	ldi	r24, 0x1F	; 31
     74e:	de d0       	rcall	.+444    	; 0x90c <lcd_set_char>
    addr = 7;
    lcd_set_CGRAMaddr(code,addr);
     750:	87 e0       	ldi	r24, 0x07	; 7
     752:	67 e0       	ldi	r22, 0x07	; 7
     754:	f7 d1       	rcall	.+1006   	; 0xb44 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010001);
     756:	81 e1       	ldi	r24, 0x11	; 17
     758:	d9 d0       	rcall	.+434    	; 0x90c <lcd_set_char>
    
}
     75a:	08 95       	ret

0000075c <shobon>:

void shobon(void){
    lcd_set_char('(');
     75c:	88 e2       	ldi	r24, 0x28	; 40
     75e:	d6 d0       	rcall	.+428    	; 0x90c <lcd_set_char>
    lcd_set_char(0x27);
     760:	87 e2       	ldi	r24, 0x27	; 39
     762:	d4 d0       	rcall	.+424    	; 0x90c <lcd_set_char>
    lcd_set_char(0xa5);
     764:	85 ea       	ldi	r24, 0xA5	; 165
     766:	d2 d0       	rcall	.+420    	; 0x90c <lcd_set_char>
    lcd_set_char(0x06); // "ω"
     768:	86 e0       	ldi	r24, 0x06	; 6
     76a:	d0 d0       	rcall	.+416    	; 0x90c <lcd_set_char>
    lcd_set_char(0xa5);
     76c:	85 ea       	ldi	r24, 0xA5	; 165
     76e:	ce d0       	rcall	.+412    	; 0x90c <lcd_set_char>
    lcd_set_char(0x60);
     770:	80 e6       	ldi	r24, 0x60	; 96
     772:	cc d0       	rcall	.+408    	; 0x90c <lcd_set_char>
    lcd_set_char(')');
     774:	89 e2       	ldi	r24, 0x29	; 41
     776:	ca d0       	rcall	.+404    	; 0x90c <lcd_set_char>
}
     778:	08 95       	ret

0000077a <shakin>:

void shakin(void){
    lcd_set_char('(');
     77a:	88 e2       	ldi	r24, 0x28	; 40
     77c:	c7 d0       	rcall	.+398    	; 0x90c <lcd_set_char>
    lcd_set_char(0x60);
     77e:	80 e6       	ldi	r24, 0x60	; 96
     780:	c5 d0       	rcall	.+394    	; 0x90c <lcd_set_char>
    lcd_set_char(0xa5);
     782:	85 ea       	ldi	r24, 0xA5	; 165
     784:	c3 d0       	rcall	.+390    	; 0x90c <lcd_set_char>
    lcd_set_char(0x06); // "ω"
     786:	86 e0       	ldi	r24, 0x06	; 6
     788:	c1 d0       	rcall	.+386    	; 0x90c <lcd_set_char>
    lcd_set_char(0xa5);
     78a:	85 ea       	ldi	r24, 0xA5	; 165
     78c:	bf d0       	rcall	.+382    	; 0x90c <lcd_set_char>
    lcd_set_char(0x27);
     78e:	87 e2       	ldi	r24, 0x27	; 39
     790:	bd d0       	rcall	.+378    	; 0x90c <lcd_set_char>
    lcd_set_char(')');
     792:	89 e2       	ldi	r24, 0x29	; 41
     794:	bb d0       	rcall	.+374    	; 0x90c <lcd_set_char>
}
     796:	08 95       	ret

00000798 <kuwa>:

void kuwa(void){
    lcd_set_char('(');
     798:	88 e2       	ldi	r24, 0x28	; 40
     79a:	b8 d0       	rcall	.+368    	; 0x90c <lcd_set_char>
    lcd_set_char(0xdf);
     79c:	8f ed       	ldi	r24, 0xDF	; 223
     79e:	b6 d0       	rcall	.+364    	; 0x90c <lcd_set_char>
    lcd_set_char(0x07); // "Д"
     7a0:	87 e0       	ldi	r24, 0x07	; 7
     7a2:	b4 d0       	rcall	.+360    	; 0x90c <lcd_set_char>
    lcd_set_char(0xdf);
     7a4:	8f ed       	ldi	r24, 0xDF	; 223
     7a6:	b2 d0       	rcall	.+356    	; 0x90c <lcd_set_char>
    lcd_set_char(')');
     7a8:	89 e2       	ldi	r24, 0x29	; 41
     7aa:	b0 d0       	rcall	.+352    	; 0x90c <lcd_set_char>
}
     7ac:	08 95       	ret

000007ae <SoftSPI_Init>:
unsigned char RS;
unsigned char DATA;

void SoftSPI_Init(void){
    /*MOSI,SCK=出力、他は入力に設定 */
    DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RCK);
     7ae:	84 b1       	in	r24, 0x04	; 4
     7b0:	87 60       	ori	r24, 0x07	; 7
     7b2:	84 b9       	out	0x04, r24	; 4
}
     7b4:	08 95       	ret

000007b6 <SoftSPI_TX>:

void SoftSPI_TX(unsigned char cData){
     7b6:	27 e0       	ldi	r18, 0x07	; 7
     7b8:	30 e0       	ldi	r19, 0x00	; 0
    unsigned int n;
    for(n=0;n<8;n++){
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
     7ba:	90 e0       	ldi	r25, 0x00	; 0
}

void SoftSPI_TX(unsigned char cData){
    unsigned int n;
    for(n=0;n<8;n++){
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
     7bc:	29 98       	cbi	0x05, 1	; 5
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
     7be:	28 98       	cbi	0x05, 0	; 5
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
     7c0:	65 b1       	in	r22, 0x05	; 5
     7c2:	ac 01       	movw	r20, r24
     7c4:	02 2e       	mov	r0, r18
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <SoftSPI_TX+0x16>
     7c8:	55 95       	asr	r21
     7ca:	47 95       	ror	r20
     7cc:	0a 94       	dec	r0
     7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <SoftSPI_TX+0x12>
     7d0:	41 70       	andi	r20, 0x01	; 1
     7d2:	46 2b       	or	r20, r22
     7d4:	45 b9       	out	0x05, r20	; 5
        PORT_SPI |= (1<<DD_SCK);                // Set SCK "H"
     7d6:	29 9a       	sbi	0x05, 1	; 5
     7d8:	21 50       	subi	r18, 0x01	; 1
     7da:	30 40       	sbci	r19, 0x00	; 0
    DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RCK);
}

void SoftSPI_TX(unsigned char cData){
    unsigned int n;
    for(n=0;n<8;n++){
     7dc:	4f ef       	ldi	r20, 0xFF	; 255
     7de:	2f 3f       	cpi	r18, 0xFF	; 255
     7e0:	34 07       	cpc	r19, r20
     7e2:	61 f7       	brne	.-40     	; 0x7bc <SoftSPI_TX+0x6>
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
        PORT_SPI |= (1<<DD_SCK);                // Set SCK "H"
    }
}
     7e4:	08 95       	ret

000007e6 <send_bits_595>:

void send_bits_595(unsigned char RS, unsigned char E, unsigned char DATA){
    unsigned char bits;
    bits = 0x3f & ( (RS<<5)|(E<<4)|DATA );
     7e6:	82 95       	swap	r24
     7e8:	88 0f       	add	r24, r24
     7ea:	80 7e       	andi	r24, 0xE0	; 224
     7ec:	84 2b       	or	r24, r20
     7ee:	62 95       	swap	r22
     7f0:	60 7f       	andi	r22, 0xF0	; 240
     7f2:	68 2b       	or	r22, r24
    SoftSPI_TX(bits);
     7f4:	86 2f       	mov	r24, r22
     7f6:	8f 73       	andi	r24, 0x3F	; 63
     7f8:	de df       	rcall	.-68     	; 0x7b6 <SoftSPI_TX>
    PORT_SPI &= ~(1<<DD_RCK);   // Set RCK "L"
     7fa:	2a 98       	cbi	0x05, 2	; 5
    PORT_SPI |=  (1<<DD_RCK);   // Set RCK "H"
     7fc:	2a 9a       	sbi	0x05, 2	; 5
    PORT_SPI &= ~(1<<DD_RCK);   // Set RCK "L"
     7fe:	2a 98       	cbi	0x05, 2	; 5
}
     800:	08 95       	ret

00000802 <lcd_set_4bit>:

// fuction for sending control bitpattern
void lcd_set_4bit(unsigned char bitpattern){
	DATA    =   0x0f & bitpattern; // set sending data
     802:	48 2f       	mov	r20, r24
     804:	4f 70       	andi	r20, 0x0F	; 15
     806:	40 93 a8 02 	sts	0x02A8, r20
	E       =   0;
     80a:	10 92 a9 02 	sts	0x02A9, r1
    send_bits_595(RS,E,DATA);
     80e:	80 91 aa 02 	lds	r24, 0x02AA
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	e8 df       	rcall	.-48     	; 0x7e6 <send_bits_595>
	E       =   1;
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	80 93 a9 02 	sts	0x02A9, r24
    send_bits_595(RS,E,DATA);
     81c:	80 91 aa 02 	lds	r24, 0x02AA
     820:	61 e0       	ldi	r22, 0x01	; 1
     822:	40 91 a8 02 	lds	r20, 0x02A8
     826:	df df       	rcall	.-66     	; 0x7e6 <send_bits_595>
	E       =   0;
     828:	10 92 a9 02 	sts	0x02A9, r1
    send_bits_595(RS,E,DATA);
     82c:	80 91 aa 02 	lds	r24, 0x02AA
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	40 91 a8 02 	lds	r20, 0x02A8
     836:	d7 df       	rcall	.-82     	; 0x7e6 <send_bits_595>
}
     838:	08 95       	ret

0000083a <lcd_init>:

// Initializing LCD
void lcd_init(void){

	// set enable "0"
    E       = 0;
     83a:	10 92 a9 02 	sts	0x02A9, r1
    // set instruction input mode
	RS      = 0;
     83e:	10 92 aa 02 	sts	0x02AA, r1
	// initialize data port
	DATA	= 0x00;
     842:	10 92 a8 02 	sts	0x02A8, r1
    send_bits_595(RS,E,DATA);
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	cc df       	rcall	.-104    	; 0x7e6 <send_bits_595>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     84e:	8f ef       	ldi	r24, 0xFF	; 255
     850:	99 ef       	ldi	r25, 0xF9	; 249
     852:	a0 e0       	ldi	r26, 0x00	; 0
     854:	81 50       	subi	r24, 0x01	; 1
     856:	90 40       	sbci	r25, 0x00	; 0
     858:	a0 40       	sbci	r26, 0x00	; 0
     85a:	e1 f7       	brne	.-8      	; 0x854 <lcd_init+0x1a>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <lcd_init+0x24>
     85e:	00 00       	nop
    
	// wait more than 15ms
	_delay_ms(20);

	// set 8-bit mode
	lcd_set_4bit(0x03);
     860:	83 e0       	ldi	r24, 0x03	; 3
     862:	cf df       	rcall	.-98     	; 0x802 <lcd_set_4bit>
     864:	af e1       	ldi	r26, 0x1F	; 31
     866:	be e4       	ldi	r27, 0x4E	; 78
     868:	11 97       	sbiw	r26, 0x01	; 1
     86a:	f1 f7       	brne	.-4      	; 0x868 <lcd_init+0x2e>
     86c:	00 c0       	rjmp	.+0      	; 0x86e <lcd_init+0x34>
     86e:	00 00       	nop
	_delay_ms(5);
	lcd_set_4bit(0x03);
     870:	83 e0       	ldi	r24, 0x03	; 3
     872:	c7 df       	rcall	.-114    	; 0x802 <lcd_set_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     874:	87 eb       	ldi	r24, 0xB7	; 183
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	01 97       	sbiw	r24, 0x01	; 1
     87a:	f1 f7       	brne	.-4      	; 0x878 <lcd_init+0x3e>
     87c:	00 c0       	rjmp	.+0      	; 0x87e <lcd_init+0x44>
     87e:	00 00       	nop
	_delay_us(110);
	lcd_set_4bit(0x03);
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	bf df       	rcall	.-130    	; 0x802 <lcd_set_4bit>
     884:	a7 ec       	ldi	r26, 0xC7	; 199
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	11 97       	sbiw	r26, 0x01	; 1
     88a:	f1 f7       	brne	.-4      	; 0x888 <lcd_init+0x4e>
     88c:	00 c0       	rjmp	.+0      	; 0x88e <lcd_init+0x54>
     88e:	00 00       	nop
	_delay_us(50);
	
	// set 4-bit mode
	lcd_set_4bit(0x02);
     890:	82 e0       	ldi	r24, 0x02	; 2
     892:	b7 df       	rcall	.-146    	; 0x802 <lcd_set_4bit>
     894:	87 ec       	ldi	r24, 0xC7	; 199
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	01 97       	sbiw	r24, 0x01	; 1
     89a:	f1 f7       	brne	.-4      	; 0x898 <lcd_init+0x5e>
     89c:	00 c0       	rjmp	.+0      	; 0x89e <lcd_init+0x64>
     89e:	00 00       	nop
	_delay_us(50);

	// function setting
	lcd_set_4bit(0x02);
     8a0:	82 e0       	ldi	r24, 0x02	; 2
     8a2:	af df       	rcall	.-162    	; 0x802 <lcd_set_4bit>
	lcd_set_4bit(0x08);
     8a4:	88 e0       	ldi	r24, 0x08	; 8
     8a6:	ad df       	rcall	.-166    	; 0x802 <lcd_set_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8a8:	af e9       	ldi	r26, 0x9F	; 159
     8aa:	bf e0       	ldi	r27, 0x0F	; 15
     8ac:	11 97       	sbiw	r26, 0x01	; 1
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <lcd_init+0x72>
     8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <lcd_init+0x78>
     8b2:	00 00       	nop
	_delay_ms(1);

	// set display on, cursol off and blink off
	lcd_set_4bit(0x00);
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	a5 df       	rcall	.-182    	; 0x802 <lcd_set_4bit>
	lcd_set_4bit(0x0c);
     8b8:	8c e0       	ldi	r24, 0x0C	; 12
     8ba:	a3 df       	rcall	.-186    	; 0x802 <lcd_set_4bit>
     8bc:	8f e9       	ldi	r24, 0x9F	; 159
     8be:	9f e0       	ldi	r25, 0x0F	; 15
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <lcd_init+0x86>
     8c4:	00 c0       	rjmp	.+0      	; 0x8c6 <lcd_init+0x8c>
     8c6:	00 00       	nop
	_delay_ms(1);

	// set entry mode (cursol direction : right, disable shift)
	lcd_set_4bit(0x00);
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	9b df       	rcall	.-202    	; 0x802 <lcd_set_4bit>
	lcd_set_4bit(0x06);
     8cc:	86 e0       	ldi	r24, 0x06	; 6
     8ce:	99 df       	rcall	.-206    	; 0x802 <lcd_set_4bit>
     8d0:	af e9       	ldi	r26, 0x9F	; 159
     8d2:	bf e0       	ldi	r27, 0x0F	; 15
     8d4:	11 97       	sbiw	r26, 0x01	; 1
     8d6:	f1 f7       	brne	.-4      	; 0x8d4 <lcd_init+0x9a>
     8d8:	00 c0       	rjmp	.+0      	; 0x8da <lcd_init+0xa0>
     8da:	00 00       	nop
	_delay_ms(1);

	// clear display
	lcd_set_4bit(0x00);
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	91 df       	rcall	.-222    	; 0x802 <lcd_set_4bit>
	lcd_set_4bit(0x01);
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	8f df       	rcall	.-226    	; 0x802 <lcd_set_4bit>
     8e4:	8f e3       	ldi	r24, 0x3F	; 63
     8e6:	9f e1       	ldi	r25, 0x1F	; 31
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <lcd_init+0xae>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <lcd_init+0xb4>
     8ee:	00 00       	nop
	_delay_ms(2);

	// clear cursol position
	lcd_set_4bit(0x00);
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	87 df       	rcall	.-242    	; 0x802 <lcd_set_4bit>
	lcd_set_4bit(0x02);
     8f4:	82 e0       	ldi	r24, 0x02	; 2
     8f6:	85 df       	rcall	.-246    	; 0x802 <lcd_set_4bit>
     8f8:	af e3       	ldi	r26, 0x3F	; 63
     8fa:	bf e1       	ldi	r27, 0x1F	; 31
     8fc:	11 97       	sbiw	r26, 0x01	; 1
     8fe:	f1 f7       	brne	.-4      	; 0x8fc <lcd_init+0xc2>
     900:	00 c0       	rjmp	.+0      	; 0x902 <lcd_init+0xc8>
     902:	00 00       	nop
	_delay_ms(2);

	// set data input mode
    RS      =   1;
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	80 93 aa 02 	sts	0x02AA, r24
}
     90a:	08 95       	ret

0000090c <lcd_set_char>:
    RS      =   1;
}

// LCD character (1 byte) sending
void lcd_set_char(unsigned char c)
{
     90c:	cf 93       	push	r28
     90e:	c8 2f       	mov	r28, r24
	lcd_set_4bit(c >> 4); // Upper Bit
     910:	82 95       	swap	r24
     912:	8f 70       	andi	r24, 0x0F	; 15
     914:	76 df       	rcall	.-276    	; 0x802 <lcd_set_4bit>
	lcd_set_4bit(0x0f & c); // Lower Bit
     916:	8c 2f       	mov	r24, r28
     918:	8f 70       	andi	r24, 0x0F	; 15
     91a:	73 df       	rcall	.-282    	; 0x802 <lcd_set_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     91c:	87 ec       	ldi	r24, 0xC7	; 199
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	01 97       	sbiw	r24, 0x01	; 1
     922:	f1 f7       	brne	.-4      	; 0x920 <lcd_set_char+0x14>
     924:	00 c0       	rjmp	.+0      	; 0x926 <lcd_set_char+0x1a>
     926:	00 00       	nop
	_delay_us(50);
}
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <lcd_locate>:

// LCD character allocation
void lcd_locate(unsigned char row, unsigned char col)
{
	// set instruction input mode
    RS      =   0;
     92c:	10 92 aa 02 	sts	0x02AA, r1
//	lcd_set_char(0x80 | col | (0x40 * row) );
	lcd_set_char(0x80 | ( col + 20*(unsigned int)(row/2) ) | ( 0x40 * (row%2) ) );
     930:	98 2f       	mov	r25, r24
     932:	91 70       	andi	r25, 0x01	; 1
     934:	92 95       	swap	r25
     936:	99 0f       	add	r25, r25
     938:	99 0f       	add	r25, r25
     93a:	90 7c       	andi	r25, 0xC0	; 192
     93c:	90 68       	ori	r25, 0x80	; 128
     93e:	86 95       	lsr	r24
     940:	24 e1       	ldi	r18, 0x14	; 20
     942:	82 9f       	mul	r24, r18
     944:	80 2d       	mov	r24, r0
     946:	11 24       	eor	r1, r1
     948:	86 0f       	add	r24, r22
     94a:	89 2b       	or	r24, r25
     94c:	df df       	rcall	.-66     	; 0x90c <lcd_set_char>
	// set data input mode
    RS      =   1;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	80 93 aa 02 	sts	0x02AA, r24
}
     954:	08 95       	ret

00000956 <lcd_set_str>:
	_delay_us(50);
}

// LCD String Sending
void lcd_set_str(unsigned char *s)
{
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	ec 01       	movw	r28, r24
	while (*s != 0) {
     95c:	01 c0       	rjmp	.+2      	; 0x960 <lcd_set_str+0xa>
		lcd_set_char(*s);
     95e:	d6 df       	rcall	.-84     	; 0x90c <lcd_set_char>
}

// LCD String Sending
void lcd_set_str(unsigned char *s)
{
	while (*s != 0) {
     960:	89 91       	ld	r24, Y+
     962:	88 23       	and	r24, r24
     964:	e1 f7       	brne	.-8      	; 0x95e <lcd_set_str+0x8>
		lcd_set_char(*s);
		s++;
	} 
}
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	08 95       	ret

0000096c <lcd_set_numeric>:

// Display numeric on LCD display
void lcd_set_numeric(float num, unsigned int Nint, unsigned int Nfrac, unsigned int sign){
     96c:	2f 92       	push	r2
     96e:	3f 92       	push	r3
     970:	4f 92       	push	r4
     972:	5f 92       	push	r5
     974:	6f 92       	push	r6
     976:	7f 92       	push	r7
     978:	8f 92       	push	r8
     97a:	9f 92       	push	r9
     97c:	af 92       	push	r10
     97e:	bf 92       	push	r11
     980:	cf 92       	push	r12
     982:	df 92       	push	r13
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
     994:	28 97       	sbiw	r28, 0x08	; 8
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	6b 01       	movw	r12, r22
     9a2:	7c 01       	movw	r14, r24
     9a4:	1a 01       	movw	r2, r20
     9a6:	29 01       	movw	r4, r18
    unsigned long int DivFactor = 1;
	unsigned int n, m;
	unsigned int d[10];
    unsigned int valid = 0;
    
    for(n=0;n<Nfrac;n++){
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	4c 01       	movw	r8, r24
     9ae:	0e c0       	rjmp	.+28     	; 0x9cc <lcd_set_numeric+0x60>
        num = num * 10;
     9b0:	c7 01       	movw	r24, r14
     9b2:	b6 01       	movw	r22, r12
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 e2       	ldi	r20, 0x20	; 32
     9ba:	51 e4       	ldi	r21, 0x41	; 65
     9bc:	65 d8       	rcall	.-3894   	; 0xfffffa88 <__eeprom_end+0xff7efa88>
     9be:	c6 2e       	mov	r12, r22
     9c0:	d7 2e       	mov	r13, r23
     9c2:	e8 2e       	mov	r14, r24
     9c4:	f9 2e       	mov	r15, r25
    unsigned long int DivFactor = 1;
	unsigned int n, m;
	unsigned int d[10];
    unsigned int valid = 0;
    
    for(n=0;n<Nfrac;n++){
     9c6:	08 94       	sec
     9c8:	81 1c       	adc	r8, r1
     9ca:	91 1c       	adc	r9, r1
     9cc:	84 14       	cp	r8, r4
     9ce:	95 04       	cpc	r9, r5
     9d0:	79 f7       	brne	.-34     	; 0x9b0 <lcd_set_numeric+0x44>
        num = num * 10;
    }
    
    // Detect sign
    if( sign == 1){
     9d2:	01 30       	cpi	r16, 0x01	; 1
     9d4:	11 05       	cpc	r17, r1
     9d6:	71 f4       	brne	.+28     	; 0x9f4 <lcd_set_numeric+0x88>
        if( num < 0 ){
     9d8:	c7 01       	movw	r24, r14
     9da:	b6 01       	movw	r22, r12
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	a9 01       	movw	r20, r18
     9e2:	08 d7       	rcall	.+3600   	; 0x17f4 <__cmpsf2>
     9e4:	87 ff       	sbrs	r24, 7
     9e6:	1a c0       	rjmp	.+52     	; 0xa1c <lcd_set_numeric+0xb0>
            lcd_set_char('-');
     9e8:	8d e2       	ldi	r24, 0x2D	; 45
     9ea:	90 df       	rcall	.-224    	; 0x90c <lcd_set_char>
            num = -num;
     9ec:	f7 fa       	bst	r15, 7
     9ee:	f0 94       	com	r15
     9f0:	f7 f8       	bld	r15, 7
     9f2:	f0 94       	com	r15
        for(m=n+1;m<Nint+Nfrac;m++){
            DivFactor = DivFactor * 10;
        }
        
        d[n] = (unsigned int)( num / DivFactor );
        if( (valid == 0) && ( d[n]!=0 || n==Nint-1) ) valid = 1;
     9f4:	00 e0       	ldi	r16, 0x00	; 0
     9f6:	10 e0       	ldi	r17, 0x00	; 0
     9f8:	66 24       	eor	r6, r6
     9fa:	77 24       	eor	r7, r7
            lcd_set_char('+');
        }
    }
    // end of
				
    for(n=0;n<=Nint+Nfrac-1;n++){
     9fc:	92 01       	movw	r18, r4
     9fe:	22 0d       	add	r18, r2
     a00:	33 1d       	adc	r19, r3
     a02:	3a 83       	std	Y+2, r19	; 0x02
     a04:	29 83       	std	Y+1, r18	; 0x01
     a06:	21 50       	subi	r18, 0x01	; 1
     a08:	30 40       	sbci	r19, 0x00	; 0
     a0a:	3c 83       	std	Y+4, r19	; 0x04
     a0c:	2b 83       	std	Y+3, r18	; 0x03
        for(m=n+1;m<Nint+Nfrac;m++){
            DivFactor = DivFactor * 10;
        }
        
        d[n] = (unsigned int)( num / DivFactor );
        if( (valid == 0) && ( d[n]!=0 || n==Nint-1) ) valid = 1;
     a0e:	c1 01       	movw	r24, r2
     a10:	01 97       	sbiw	r24, 0x01	; 1
     a12:	9e 83       	std	Y+6, r25	; 0x06
     a14:	8d 83       	std	Y+5, r24	; 0x05
     a16:	78 86       	std	Y+8, r7	; 0x08
     a18:	6f 82       	std	Y+7, r6	; 0x07
     a1a:	64 c0       	rjmp	.+200    	; 0xae4 <lcd_set_numeric+0x178>
    if( sign == 1){
        if( num < 0 ){
            lcd_set_char('-');
            num = -num;
        }else{
            lcd_set_char('+');
     a1c:	8b e2       	ldi	r24, 0x2B	; 43
     a1e:	76 df       	rcall	.-276    	; 0x90c <lcd_set_char>
     a20:	e9 cf       	rjmp	.-46     	; 0x9f4 <lcd_set_numeric+0x88>
    }
    // end of
				
    for(n=0;n<=Nint+Nfrac-1;n++){
        
        if( ( n== Nint ) && ( Nfrac!=0 )){
     a22:	02 15       	cp	r16, r2
     a24:	13 05       	cpc	r17, r3
     a26:	29 f4       	brne	.+10     	; 0xa32 <lcd_set_numeric+0xc6>
     a28:	41 14       	cp	r4, r1
     a2a:	51 04       	cpc	r5, r1
     a2c:	11 f0       	breq	.+4      	; 0xa32 <lcd_set_numeric+0xc6>
            lcd_set_char('.');
     a2e:	8e e2       	ldi	r24, 0x2E	; 46
     a30:	6d df       	rcall	.-294    	; 0x90c <lcd_set_char>
        }
        
        DivFactor = 1;
        for(m=n+1;m<Nint+Nfrac;m++){
     a32:	38 01       	movw	r6, r16
        
        if( ( n== Nint ) && ( Nfrac!=0 )){
            lcd_set_char('.');
        }
        
        DivFactor = 1;
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	88 2e       	mov	r8, r24
     a38:	91 2c       	mov	r9, r1
     a3a:	a1 2c       	mov	r10, r1
     a3c:	b1 2c       	mov	r11, r1
     a3e:	c5 01       	movw	r24, r10
     a40:	b4 01       	movw	r22, r8
        for(m=n+1;m<Nint+Nfrac;m++){
     a42:	05 c0       	rjmp	.+10     	; 0xa4e <lcd_set_numeric+0xe2>
            DivFactor = DivFactor * 10;
     a44:	2a e0       	ldi	r18, 0x0A	; 10
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	80 d8       	rcall	.-3840   	; 0xfffffb4e <__eeprom_end+0xff7efb4e>
     a4e:	08 94       	sec
     a50:	61 1c       	adc	r6, r1
     a52:	71 1c       	adc	r7, r1
        if( ( n== Nint ) && ( Nfrac!=0 )){
            lcd_set_char('.');
        }
        
        DivFactor = 1;
        for(m=n+1;m<Nint+Nfrac;m++){
     a54:	e9 81       	ldd	r30, Y+1	; 0x01
     a56:	fa 81       	ldd	r31, Y+2	; 0x02
     a58:	6e 16       	cp	r6, r30
     a5a:	7f 06       	cpc	r7, r31
     a5c:	98 f3       	brcs	.-26     	; 0xa44 <lcd_set_numeric+0xd8>
     a5e:	4b 01       	movw	r8, r22
     a60:	5c 01       	movw	r10, r24
            DivFactor = DivFactor * 10;
        }
        
        d[n] = (unsigned int)( num / DivFactor );
     a62:	60 d7       	rcall	.+3776   	; 0x1924 <__floatunsisf>
     a64:	9b 01       	movw	r18, r22
     a66:	ac 01       	movw	r20, r24
     a68:	c7 01       	movw	r24, r14
     a6a:	b6 01       	movw	r22, r12
     a6c:	c7 d6       	rcall	.+3470   	; 0x17fc <__divsf3>
     a6e:	2e d7       	rcall	.+3676   	; 0x18cc <__fixunssfsi>
     a70:	dc 01       	movw	r26, r24
     a72:	cb 01       	movw	r24, r22
     a74:	3c 01       	movw	r6, r24
        if( (valid == 0) && ( d[n]!=0 || n==Nint-1) ) valid = 1;
     a76:	2f 81       	ldd	r18, Y+7	; 0x07
     a78:	38 85       	ldd	r19, Y+8	; 0x08
     a7a:	21 15       	cp	r18, r1
     a7c:	31 05       	cpc	r19, r1
     a7e:	79 f4       	brne	.+30     	; 0xa9e <lcd_set_numeric+0x132>
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	98 87       	std	Y+8, r25	; 0x08
     a86:	8f 83       	std	Y+7, r24	; 0x07
     a88:	61 14       	cp	r6, r1
     a8a:	71 04       	cpc	r7, r1
     a8c:	61 f4       	brne	.+24     	; 0xaa6 <lcd_set_numeric+0x13a>
     a8e:	ed 81       	ldd	r30, Y+5	; 0x05
     a90:	fe 81       	ldd	r31, Y+6	; 0x06
     a92:	0e 17       	cp	r16, r30
     a94:	1f 07       	cpc	r17, r31
     a96:	39 f0       	breq	.+14     	; 0xaa6 <lcd_set_numeric+0x13a>
     a98:	18 86       	std	Y+8, r1	; 0x08
     a9a:	1f 82       	std	Y+7, r1	; 0x07
     a9c:	04 c0       	rjmp	.+8      	; 0xaa6 <lcd_set_numeric+0x13a>
     a9e:	21 e0       	ldi	r18, 0x01	; 1
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	38 87       	std	Y+8, r19	; 0x08
     aa4:	2f 83       	std	Y+7, r18	; 0x07
        num = num - d[n]*DivFactor;
     aa6:	b3 01       	movw	r22, r6
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	a5 01       	movw	r20, r10
     aae:	94 01       	movw	r18, r8
     ab0:	4e d8       	rcall	.-3940   	; 0xfffffb4e <__eeprom_end+0xff7efb4e>
     ab2:	38 d7       	rcall	.+3696   	; 0x1924 <__floatunsisf>
     ab4:	9b 01       	movw	r18, r22
     ab6:	ac 01       	movw	r20, r24
     ab8:	c7 01       	movw	r24, r14
     aba:	b6 01       	movw	r22, r12
     abc:	36 d6       	rcall	.+3180   	; 0x172a <__subsf3>
     abe:	6b 01       	movw	r12, r22
     ac0:	e8 2e       	mov	r14, r24
     ac2:	f9 2e       	mov	r15, r25
        
        if( (valid == 1)|(n == (Nint+Nfrac-1)) ) lcd_set_char(0x30 + d[n]);
     ac4:	ef 81       	ldd	r30, Y+7	; 0x07
     ac6:	f8 85       	ldd	r31, Y+8	; 0x08
     ac8:	30 97       	sbiw	r30, 0x00	; 0
     aca:	29 f4       	brne	.+10     	; 0xad6 <lcd_set_numeric+0x16a>
     acc:	2b 81       	ldd	r18, Y+3	; 0x03
     ace:	3c 81       	ldd	r19, Y+4	; 0x04
     ad0:	02 17       	cp	r16, r18
     ad2:	13 07       	cpc	r17, r19
     ad4:	19 f4       	brne	.+6      	; 0xadc <lcd_set_numeric+0x170>
     ad6:	86 2d       	mov	r24, r6
     ad8:	80 5d       	subi	r24, 0xD0	; 208
     ada:	01 c0       	rjmp	.+2      	; 0xade <lcd_set_numeric+0x172>
        else if( valid == 0 )                   lcd_set_char(0x20);
     adc:	80 e2       	ldi	r24, 0x20	; 32
     ade:	16 df       	rcall	.-468    	; 0x90c <lcd_set_char>
     ae0:	0f 5f       	subi	r16, 0xFF	; 255
     ae2:	1f 4f       	sbci	r17, 0xFF	; 255
            lcd_set_char('+');
        }
    }
    // end of
				
    for(n=0;n<=Nint+Nfrac-1;n++){
     ae4:	8b 81       	ldd	r24, Y+3	; 0x03
     ae6:	9c 81       	ldd	r25, Y+4	; 0x04
     ae8:	80 17       	cp	r24, r16
     aea:	91 07       	cpc	r25, r17
     aec:	08 f0       	brcs	.+2      	; 0xaf0 <lcd_set_numeric+0x184>
     aee:	99 cf       	rjmp	.-206    	; 0xa22 <lcd_set_numeric+0xb6>
        
        if( (valid == 1)|(n == (Nint+Nfrac-1)) ) lcd_set_char(0x30 + d[n]);
        else if( valid == 0 )                   lcd_set_char(0x20);
        else                                    lcd_set_char(0xff);
    }
}
     af0:	28 96       	adiw	r28, 0x08	; 8
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	f8 94       	cli
     af6:	de bf       	out	0x3e, r29	; 62
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	cd bf       	out	0x3d, r28	; 61
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	1f 91       	pop	r17
     b02:	0f 91       	pop	r16
     b04:	ff 90       	pop	r15
     b06:	ef 90       	pop	r14
     b08:	df 90       	pop	r13
     b0a:	cf 90       	pop	r12
     b0c:	bf 90       	pop	r11
     b0e:	af 90       	pop	r10
     b10:	9f 90       	pop	r9
     b12:	8f 90       	pop	r8
     b14:	7f 90       	pop	r7
     b16:	6f 90       	pop	r6
     b18:	5f 90       	pop	r5
     b1a:	4f 90       	pop	r4
     b1c:	3f 90       	pop	r3
     b1e:	2f 90       	pop	r2
     b20:	08 95       	ret

00000b22 <lcd_clear>:

// Clear LCD
void lcd_clear(void){
	// clear display
    RS      =   0;
     b22:	10 92 aa 02 	sts	0x02AA, r1
	lcd_set_4bit(0x00);
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	6c de       	rcall	.-808    	; 0x802 <lcd_set_4bit>
	lcd_set_4bit(0x01);
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	6a de       	rcall	.-812    	; 0x802 <lcd_set_4bit>
     b2e:	85 e3       	ldi	r24, 0x35	; 53
     b30:	8a 95       	dec	r24
     b32:	f1 f7       	brne	.-4      	; 0xb30 <lcd_clear+0xe>
     b34:	00 00       	nop
    _delay_us(10);
//    _delay_ms(1);
    RS      =   1;
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	80 93 aa 02 	sts	0x02AA, r24
	lcd_locate(0,0);
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	f5 de       	rcall	.-534    	; 0x92c <lcd_locate>
}
     b42:	08 95       	ret

00000b44 <lcd_set_CGRAMaddr>:

// Set CGRAM address
void lcd_set_CGRAMaddr(unsigned char code,unsigned char addr)
{
	// set instruction input mode
    RS      =   0;
     b44:	10 92 aa 02 	sts	0x02AA, r1
    lcd_set_char(0x40 | code<<3 | addr );
     b48:	60 64       	ori	r22, 0x40	; 64
     b4a:	88 0f       	add	r24, r24
     b4c:	88 0f       	add	r24, r24
     b4e:	88 0f       	add	r24, r24
     b50:	86 2b       	or	r24, r22
     b52:	dc de       	rcall	.-584    	; 0x90c <lcd_set_char>
	// set data input mode
    RS      =   1;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	80 93 aa 02 	sts	0x02AA, r24
}
     b5a:	08 95       	ret

00000b5c <SoftSPI_LED_Init>:
unsigned char RS;
unsigned char DATA;

void SoftSPI_LED_Init(void){
    /*MOSI,SCK=出力、他は入力に設定 */
    DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RCK);
     b5c:	84 b1       	in	r24, 0x04	; 4
     b5e:	88 63       	ori	r24, 0x38	; 56
     b60:	84 b9       	out	0x04, r24	; 4
}
     b62:	08 95       	ret

00000b64 <SoftSPI_LED_TX>:

void SoftSPI_LED_TX(unsigned char cData){
     b64:	27 e0       	ldi	r18, 0x07	; 7
     b66:	30 e0       	ldi	r19, 0x00	; 0
    unsigned int n;
    for(n=0;n<8;n++){
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
     b68:	90 e0       	ldi	r25, 0x00	; 0
}

void SoftSPI_LED_TX(unsigned char cData){
    unsigned int n;
    for(n=0;n<8;n++){
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
     b6a:	2c 98       	cbi	0x05, 4	; 5
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
     b6c:	2b 98       	cbi	0x05, 3	; 5
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
     b6e:	65 b1       	in	r22, 0x05	; 5
     b70:	ac 01       	movw	r20, r24
     b72:	02 2e       	mov	r0, r18
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <SoftSPI_LED_TX+0x16>
     b76:	55 95       	asr	r21
     b78:	47 95       	ror	r20
     b7a:	0a 94       	dec	r0
     b7c:	e2 f7       	brpl	.-8      	; 0xb76 <SoftSPI_LED_TX+0x12>
     b7e:	41 70       	andi	r20, 0x01	; 1
     b80:	50 70       	andi	r21, 0x00	; 0
     b82:	73 e0       	ldi	r23, 0x03	; 3
     b84:	44 0f       	add	r20, r20
     b86:	55 1f       	adc	r21, r21
     b88:	7a 95       	dec	r23
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <SoftSPI_LED_TX+0x20>
     b8c:	64 2b       	or	r22, r20
     b8e:	65 b9       	out	0x05, r22	; 5
        PORT_SPI |= (1<<DD_SCK);                // Set SCK "H"
     b90:	2c 9a       	sbi	0x05, 4	; 5
     b92:	21 50       	subi	r18, 0x01	; 1
     b94:	30 40       	sbci	r19, 0x00	; 0
    DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RCK);
}

void SoftSPI_LED_TX(unsigned char cData){
    unsigned int n;
    for(n=0;n<8;n++){
     b96:	4f ef       	ldi	r20, 0xFF	; 255
     b98:	2f 3f       	cpi	r18, 0xFF	; 255
     b9a:	34 07       	cpc	r19, r20
     b9c:	31 f7       	brne	.-52     	; 0xb6a <SoftSPI_LED_TX+0x6>
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
        PORT_SPI |= (1<<DD_SCK);                // Set SCK "H"
    }
}
     b9e:	08 95       	ret

00000ba0 <send_bits_595_LED>:

void send_bits_595_LED(unsigned char DATA){
    unsigned char bits;
    bits = DATA;
    SoftSPI_LED_TX(bits);
     ba0:	e1 df       	rcall	.-62     	; 0xb64 <SoftSPI_LED_TX>
    PORT_SPI &= ~(1<<DD_RCK);   // Set RCK "L"
     ba2:	2d 98       	cbi	0x05, 5	; 5
    PORT_SPI |=  (1<<DD_RCK);   // Set RCK "H"
     ba4:	2d 9a       	sbi	0x05, 5	; 5
    PORT_SPI &= ~(1<<DD_RCK);   // Set RCK "L"
     ba6:	2d 98       	cbi	0x05, 5	; 5
}
     ba8:	08 95       	ret

00000baa <set_initial_t_id>:
};

// Measure Tarfet ID Declarations
uint8_t     t_id[Ndata];
void set_initial_t_id(void){
    t_id[0] = 6;
     baa:	86 e0       	ldi	r24, 0x06	; 6
     bac:	80 93 b9 02 	sts	0x02B9, r24
    t_id[1] = 5;
     bb0:	85 e0       	ldi	r24, 0x05	; 5
     bb2:	80 93 ba 02 	sts	0x02BA, r24
    t_id[2] = 3;
     bb6:	83 e0       	ldi	r24, 0x03	; 3
     bb8:	80 93 bb 02 	sts	0x02BB, r24
    t_id[3] = 0;
     bbc:	10 92 bc 02 	sts	0x02BC, r1
}
     bc0:	08 95       	ret

00000bc2 <__vector_default>:
uint16_t            timer2_cnt_last = 0;
uint16_t            delay_cnt;


// Bad ISR interrput detector for debugging
ISR(BADISR_vect){
     bc2:	1f 92       	push	r1
     bc4:	0f 92       	push	r0
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	0f 92       	push	r0
     bca:	11 24       	eor	r1, r1
    cli();    // disable interrupt
     bcc:	f8 94       	cli
    lcd_locate(0,0);
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	ac de       	rcall	.-680    	; 0x92c <lcd_locate>
    lcd_set_str("BADISR ERROR");
     bd4:	86 e0       	ldi	r24, 0x06	; 6
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	be de       	rcall	.-644    	; 0x956 <lcd_set_str>
     bda:	ff cf       	rjmp	.-2      	; 0xbda <__vector_default+0x18>

00000bdc <timer0_init>:


// 8-bit timer intialazation for PWM FuelPump Driver
unsigned long int   Ndiv0;
void timer0_init(void) {
    TCCR0A  = 0b10000001;	// Timer/Counter1 Control Register A
     bdc:	81 e8       	ldi	r24, 0x81	; 129
     bde:	84 bd       	out	0x24, r24	; 36
    TCCR0B  = 0b00000100;
     be0:	84 e0       	ldi	r24, 0x04	; 4
     be2:	85 bd       	out	0x25, r24	; 37
    TIMSK0  = 0b00000000;   // ovfl interrupt is enabled for delay timer
     be4:	10 92 6e 00 	sts	0x006E, r1
    TCNT0   = 0x00;         // Initialize 8-bit counter bit
     be8:	16 bc       	out	0x26, r1	; 38
    OCR0A   = 0x00;         // Compare value for Fuel Pump driver PWM
     bea:	17 bc       	out	0x27, r1	; 39
    OCR0B   = 0xff;         // Compare value
     bec:	8f ef       	ldi	r24, 0xFF	; 255
     bee:	88 bd       	out	0x28, r24	; 40

    switch( TCCR0B & 0b00000111 ){
     bf0:	85 b5       	in	r24, 0x25	; 37
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	87 70       	andi	r24, 0x07	; 7
     bf6:	90 70       	andi	r25, 0x00	; 0
     bf8:	83 30       	cpi	r24, 0x03	; 3
     bfa:	91 05       	cpc	r25, r1
     bfc:	b1 f0       	breq	.+44     	; 0xc2a <timer0_init+0x4e>
     bfe:	84 30       	cpi	r24, 0x04	; 4
     c00:	91 05       	cpc	r25, r1
     c02:	3c f4       	brge	.+14     	; 0xc12 <timer0_init+0x36>
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	91 05       	cpc	r25, r1
     c08:	f9 f0       	breq	.+62     	; 0xc48 <timer0_init+0x6c>
     c0a:	82 30       	cpi	r24, 0x02	; 2
     c0c:	91 05       	cpc	r25, r1
     c0e:	e1 f4       	brne	.+56     	; 0xc48 <timer0_init+0x6c>
     c10:	07 c0       	rjmp	.+14     	; 0xc20 <timer0_init+0x44>
     c12:	84 30       	cpi	r24, 0x04	; 4
     c14:	91 05       	cpc	r25, r1
     c16:	71 f0       	breq	.+28     	; 0xc34 <timer0_init+0x58>
     c18:	85 30       	cpi	r24, 0x05	; 5
     c1a:	91 05       	cpc	r25, r1
     c1c:	a9 f4       	brne	.+42     	; 0xc48 <timer0_init+0x6c>
     c1e:	0f c0       	rjmp	.+30     	; 0xc3e <timer0_init+0x62>
        case 0b001 :
            Ndiv0 = 1;
            break;
        case 0b010 :
            Ndiv0 = 8;
     c20:	88 e0       	ldi	r24, 0x08	; 8
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	a0 e0       	ldi	r26, 0x00	; 0
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	13 c0       	rjmp	.+38     	; 0xc50 <timer0_init+0x74>
            break;
        case 0b011 :
            Ndiv0 = 64;
     c2a:	80 e4       	ldi	r24, 0x40	; 64
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	a0 e0       	ldi	r26, 0x00	; 0
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	0e c0       	rjmp	.+28     	; 0xc50 <timer0_init+0x74>
            break;
        case 0b100 :
            Ndiv0 = 256;
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	a0 e0       	ldi	r26, 0x00	; 0
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	09 c0       	rjmp	.+18     	; 0xc50 <timer0_init+0x74>
            break;
        case 0b101 :
            Ndiv0 = 1024;
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	94 e0       	ldi	r25, 0x04	; 4
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	04 c0       	rjmp	.+8      	; 0xc50 <timer0_init+0x74>
            break;
        default :
            Ndiv0 = 1;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	a0 e0       	ldi	r26, 0x00	; 0
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	80 93 bd 02 	sts	0x02BD, r24
     c54:	90 93 be 02 	sts	0x02BE, r25
     c58:	a0 93 bf 02 	sts	0x02BF, r26
     c5c:	b0 93 c0 02 	sts	0x02C0, r27
     c60:	08 95       	ret

00000c62 <timer1_init>:
}

// 16-bit Counter intialazation for Tacho Meter
unsigned long int   Ndiv1;
void timer1_init(void) {
	TCCR1A  = 0b00000000;	// Timer/Counter1 Control Register A
     c62:	10 92 80 00 	sts	0x0080, r1
	TCCR1B  = 0b00000011;
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	80 93 81 00 	sts	0x0081, r24
	TCCR1C  = 0b00000000;
     c6c:	10 92 82 00 	sts	0x0082, r1
	TIMSK1  = 0b00000001;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	80 93 6f 00 	sts	0x006F, r24
	TCNT1   = 0x0000;         // Initialize 16-bit counter bit
     c76:	10 92 85 00 	sts	0x0085, r1
     c7a:	10 92 84 00 	sts	0x0084, r1
	OCR1A   = 0xffff;         // 16-bit register for compare
     c7e:	8f ef       	ldi	r24, 0xFF	; 255
     c80:	9f ef       	ldi	r25, 0xFF	; 255
     c82:	90 93 89 00 	sts	0x0089, r25
     c86:	80 93 88 00 	sts	0x0088, r24

    switch( TCCR1B & 0b00000111 ){
     c8a:	80 91 81 00 	lds	r24, 0x0081
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	87 70       	andi	r24, 0x07	; 7
     c92:	90 70       	andi	r25, 0x00	; 0
     c94:	83 30       	cpi	r24, 0x03	; 3
     c96:	91 05       	cpc	r25, r1
     c98:	b1 f0       	breq	.+44     	; 0xcc6 <timer1_init+0x64>
     c9a:	84 30       	cpi	r24, 0x04	; 4
     c9c:	91 05       	cpc	r25, r1
     c9e:	3c f4       	brge	.+14     	; 0xcae <timer1_init+0x4c>
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	91 05       	cpc	r25, r1
     ca4:	f9 f0       	breq	.+62     	; 0xce4 <timer1_init+0x82>
     ca6:	82 30       	cpi	r24, 0x02	; 2
     ca8:	91 05       	cpc	r25, r1
     caa:	e1 f4       	brne	.+56     	; 0xce4 <timer1_init+0x82>
     cac:	07 c0       	rjmp	.+14     	; 0xcbc <timer1_init+0x5a>
     cae:	84 30       	cpi	r24, 0x04	; 4
     cb0:	91 05       	cpc	r25, r1
     cb2:	71 f0       	breq	.+28     	; 0xcd0 <timer1_init+0x6e>
     cb4:	85 30       	cpi	r24, 0x05	; 5
     cb6:	91 05       	cpc	r25, r1
     cb8:	a9 f4       	brne	.+42     	; 0xce4 <timer1_init+0x82>
     cba:	0f c0       	rjmp	.+30     	; 0xcda <timer1_init+0x78>
        case 0b001 :
            Ndiv1 = 1;
            break;
        case 0b010 :
            Ndiv1 = 8;
     cbc:	88 e0       	ldi	r24, 0x08	; 8
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	a0 e0       	ldi	r26, 0x00	; 0
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	13 c0       	rjmp	.+38     	; 0xcec <timer1_init+0x8a>
            break;
        case 0b011 :
            Ndiv1 = 64;
     cc6:	80 e4       	ldi	r24, 0x40	; 64
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	a0 e0       	ldi	r26, 0x00	; 0
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	0e c0       	rjmp	.+28     	; 0xcec <timer1_init+0x8a>
            break;
        case 0b100 :
            Ndiv1 = 256;
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	a0 e0       	ldi	r26, 0x00	; 0
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	09 c0       	rjmp	.+18     	; 0xcec <timer1_init+0x8a>
            break;
        case 0b101 :
            Ndiv1 = 1024;
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	94 e0       	ldi	r25, 0x04	; 4
     cde:	a0 e0       	ldi	r26, 0x00	; 0
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	04 c0       	rjmp	.+8      	; 0xcec <timer1_init+0x8a>
            break;
        default :
            Ndiv1 = 1;
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	a0 e0       	ldi	r26, 0x00	; 0
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	80 93 d1 02 	sts	0x02D1, r24
     cf0:	90 93 d2 02 	sts	0x02D2, r25
     cf4:	a0 93 d3 02 	sts	0x02D3, r26
     cf8:	b0 93 d4 02 	sts	0x02D4, r27
     cfc:	08 95       	ret

00000cfe <timer2_init>:
}

// 8-bit timer intialazation for Timing Control, LEDarray duty
unsigned long int   Ndiv2;
void timer2_init(void) {
    TCCR2A  = 0b00000000;	// Timer/Counter1 Control Register A
     cfe:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B  = 0b00000101;
     d02:	85 e0       	ldi	r24, 0x05	; 5
     d04:	80 93 b1 00 	sts	0x00B1, r24
    TIMSK2  = 0b00000011;   // ovfl interrupt is enabled for delay timer
     d08:	83 e0       	ldi	r24, 0x03	; 3
     d0a:	80 93 70 00 	sts	0x0070, r24
    TCNT2   = 0x00;         // Initialize 8-bit counter bit
     d0e:	10 92 b2 00 	sts	0x00B2, r1
    OCR2A   = 8;
     d12:	88 e0       	ldi	r24, 0x08	; 8
     d14:	80 93 b3 00 	sts	0x00B3, r24
    
    switch( TCCR2B & 0b00000111 ){
     d18:	80 91 b1 00 	lds	r24, 0x00B1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	87 70       	andi	r24, 0x07	; 7
     d20:	90 70       	andi	r25, 0x00	; 0
     d22:	83 30       	cpi	r24, 0x03	; 3
     d24:	91 05       	cpc	r25, r1
     d26:	b1 f0       	breq	.+44     	; 0xd54 <timer2_init+0x56>
     d28:	84 30       	cpi	r24, 0x04	; 4
     d2a:	91 05       	cpc	r25, r1
     d2c:	3c f4       	brge	.+14     	; 0xd3c <timer2_init+0x3e>
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	91 05       	cpc	r25, r1
     d32:	f9 f0       	breq	.+62     	; 0xd72 <timer2_init+0x74>
     d34:	82 30       	cpi	r24, 0x02	; 2
     d36:	91 05       	cpc	r25, r1
     d38:	e1 f4       	brne	.+56     	; 0xd72 <timer2_init+0x74>
     d3a:	07 c0       	rjmp	.+14     	; 0xd4a <timer2_init+0x4c>
     d3c:	84 30       	cpi	r24, 0x04	; 4
     d3e:	91 05       	cpc	r25, r1
     d40:	71 f0       	breq	.+28     	; 0xd5e <timer2_init+0x60>
     d42:	85 30       	cpi	r24, 0x05	; 5
     d44:	91 05       	cpc	r25, r1
     d46:	a9 f4       	brne	.+42     	; 0xd72 <timer2_init+0x74>
     d48:	0f c0       	rjmp	.+30     	; 0xd68 <timer2_init+0x6a>
        case 0b001 :
            Ndiv2 = 1;
            break;
        case 0b010 :
            Ndiv2 = 8;
     d4a:	88 e0       	ldi	r24, 0x08	; 8
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	a0 e0       	ldi	r26, 0x00	; 0
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	13 c0       	rjmp	.+38     	; 0xd7a <timer2_init+0x7c>
            break;
        case 0b011 :
            Ndiv2 = 64;
     d54:	80 e4       	ldi	r24, 0x40	; 64
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	a0 e0       	ldi	r26, 0x00	; 0
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	0e c0       	rjmp	.+28     	; 0xd7a <timer2_init+0x7c>
            break;
        case 0b100 :
            Ndiv2 = 256;
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	a0 e0       	ldi	r26, 0x00	; 0
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	09 c0       	rjmp	.+18     	; 0xd7a <timer2_init+0x7c>
            break;
        case 0b101 :
            Ndiv2 = 1024;
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	94 e0       	ldi	r25, 0x04	; 4
     d6c:	a0 e0       	ldi	r26, 0x00	; 0
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	04 c0       	rjmp	.+8      	; 0xd7a <timer2_init+0x7c>
            break;
        default :
            Ndiv2 = 1;
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	a0 e0       	ldi	r26, 0x00	; 0
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	80 93 e5 02 	sts	0x02E5, r24
     d7e:	90 93 e6 02 	sts	0x02E6, r25
     d82:	a0 93 e7 02 	sts	0x02E7, r26
     d86:	b0 93 e8 02 	sts	0x02E8, r27
     d8a:	08 95       	ret

00000d8c <__vector_18>:
    
}

unsigned int    USART_index;
unsigned int    USART_data_index = 99; // do not initialize to "0"
ISR(USART_RX_vect){
     d8c:	1f 92       	push	r1
     d8e:	0f 92       	push	r0
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	0f 92       	push	r0
     d94:	11 24       	eor	r1, r1
     d96:	2f 93       	push	r18
     d98:	3f 93       	push	r19
     d9a:	4f 93       	push	r20
     d9c:	5f 93       	push	r21
     d9e:	6f 93       	push	r22
     da0:	7f 93       	push	r23
     da2:	8f 93       	push	r24
     da4:	9f 93       	push	r25
     da6:	af 93       	push	r26
     da8:	bf 93       	push	r27
     daa:	ef 93       	push	r30
     dac:	ff 93       	push	r31
    unsigned int    usart_data;
    unsigned int    index;
    
    usart_data = USART_receive_woTO(); // Synchronize & Detect receiver ID
     dae:	59 d1       	rcall	.+690    	; 0x1062 <USART_receive_woTO>
     db0:	48 2f       	mov	r20, r24
     db2:	50 e0       	ldi	r21, 0x00	; 0
    
    if( (usart_data & 0xf0) == 0x00){ // received data is ID ?
     db4:	9a 01       	movw	r18, r20
     db6:	20 7f       	andi	r18, 0xF0	; 240
     db8:	30 70       	andi	r19, 0x00	; 0
     dba:	21 15       	cp	r18, r1
     dbc:	31 05       	cpc	r19, r1
     dbe:	d9 f4       	brne	.+54     	; 0xdf6 <__vector_18+0x6a>
     dc0:	a9 eb       	ldi	r26, 0xB9	; 185
     dc2:	b2 e0       	ldi	r27, 0x02	; 2
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
        // Is it display target ID ?
        for(index=0;index<Ndata;index++){
            if ( usart_data == RxID[t_id[index]] ){
     dc8:	ed 91       	ld	r30, X+
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	ec 58       	subi	r30, 0x8C	; 140
     dce:	fe 4f       	sbci	r31, 0xFE	; 254
     dd0:	20 81       	ld	r18, Z
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	42 17       	cp	r20, r18
     dd6:	53 07       	cpc	r21, r19
     dd8:	49 f4       	brne	.+18     	; 0xdec <__vector_18+0x60>
                USART_index = index;
     dda:	90 93 c2 02 	sts	0x02C2, r25
     dde:	80 93 c1 02 	sts	0x02C1, r24
                USART_data_index = 0;
     de2:	10 92 72 01 	sts	0x0172, r1
     de6:	10 92 71 01 	sts	0x0171, r1
                break;
     dea:	2f c0       	rjmp	.+94     	; 0xe4a <__vector_18+0xbe>
    
    usart_data = USART_receive_woTO(); // Synchronize & Detect receiver ID
    
    if( (usart_data & 0xf0) == 0x00){ // received data is ID ?
        // Is it display target ID ?
        for(index=0;index<Ndata;index++){
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	84 30       	cpi	r24, 0x04	; 4
     df0:	91 05       	cpc	r25, r1
     df2:	51 f7       	brne	.-44     	; 0xdc8 <__vector_18+0x3c>
     df4:	2a c0       	rjmp	.+84     	; 0xe4a <__vector_18+0xbe>
                USART_index = index;
                USART_data_index = 0;
                break;
            }
        }
    }else if( USART_data_index < 4 ){ // capture meter data
     df6:	20 91 71 01 	lds	r18, 0x0171
     dfa:	30 91 72 01 	lds	r19, 0x0172
     dfe:	24 30       	cpi	r18, 0x04	; 4
     e00:	31 05       	cpc	r19, r1
     e02:	18 f5       	brcc	.+70     	; 0xe4a <__vector_18+0xbe>
        data[USART_index][USART_data_index] = usart_data;
     e04:	40 91 c1 02 	lds	r20, 0x02C1
     e08:	50 91 c2 02 	lds	r21, 0x02C2
     e0c:	fa 01       	movw	r30, r20
     e0e:	ee 0f       	add	r30, r30
     e10:	ff 1f       	adc	r31, r31
     e12:	ee 0f       	add	r30, r30
     e14:	ff 1f       	adc	r31, r31
     e16:	e2 0f       	add	r30, r18
     e18:	f3 1f       	adc	r31, r19
     e1a:	eb 52       	subi	r30, 0x2B	; 43
     e1c:	fd 4f       	sbci	r31, 0xFD	; 253
     e1e:	80 83       	st	Z, r24
        if( USART_data_index == 3 ){
     e20:	23 30       	cpi	r18, 0x03	; 3
     e22:	31 05       	cpc	r19, r1
     e24:	61 f4       	brne	.+24     	; 0xe3e <__vector_18+0xb2>
            data_updated[USART_index] = 1;
     e26:	40 51       	subi	r20, 0x10	; 16
     e28:	5d 4f       	sbci	r21, 0xFD	; 253
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	fa 01       	movw	r30, r20
     e2e:	80 83       	st	Z, r24
            USART_data_index = 99;
     e30:	83 e6       	ldi	r24, 0x63	; 99
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	90 93 72 01 	sts	0x0172, r25
     e38:	80 93 71 01 	sts	0x0171, r24
     e3c:	06 c0       	rjmp	.+12     	; 0xe4a <__vector_18+0xbe>
        }else{
            USART_data_index++;
     e3e:	2f 5f       	subi	r18, 0xFF	; 255
     e40:	3f 4f       	sbci	r19, 0xFF	; 255
     e42:	30 93 72 01 	sts	0x0172, r19
     e46:	20 93 71 01 	sts	0x0171, r18
        }
    }
    
}
     e4a:	ff 91       	pop	r31
     e4c:	ef 91       	pop	r30
     e4e:	bf 91       	pop	r27
     e50:	af 91       	pop	r26
     e52:	9f 91       	pop	r25
     e54:	8f 91       	pop	r24
     e56:	7f 91       	pop	r23
     e58:	6f 91       	pop	r22
     e5a:	5f 91       	pop	r21
     e5c:	4f 91       	pop	r20
     e5e:	3f 91       	pop	r19
     e60:	2f 91       	pop	r18
     e62:	0f 90       	pop	r0
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	0f 90       	pop	r0
     e68:	1f 90       	pop	r1
     e6a:	18 95       	reti

00000e6c <__vector_9>:


// 8-bit Timer2 overflow
ISR(TIMER2_OVF_vect){
     e6c:	1f 92       	push	r1
     e6e:	0f 92       	push	r0
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	0f 92       	push	r0
     e74:	11 24       	eor	r1, r1
     e76:	2f 93       	push	r18
     e78:	3f 93       	push	r19
     e7a:	4f 93       	push	r20
     e7c:	5f 93       	push	r21
     e7e:	6f 93       	push	r22
     e80:	7f 93       	push	r23
     e82:	8f 93       	push	r24
     e84:	9f 93       	push	r25
     e86:	af 93       	push	r26
     e88:	bf 93       	push	r27
     e8a:	ef 93       	push	r30
     e8c:	ff 93       	push	r31
    // increment counter for display update
    timer2_cnt++;
     e8e:	80 91 02 03 	lds	r24, 0x0302
     e92:	90 91 03 03 	lds	r25, 0x0303
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	90 93 03 03 	sts	0x0303, r25
     e9c:	80 93 02 03 	sts	0x0302, r24
    
    // LED array : display
    LEDarray((unsigned int)rpm);
     ea0:	80 91 84 01 	lds	r24, 0x0184
     ea4:	90 91 85 01 	lds	r25, 0x0185
     ea8:	b5 d9       	rcall	.-3222   	; 0x214 <LEDarray>
}
     eaa:	ff 91       	pop	r31
     eac:	ef 91       	pop	r30
     eae:	bf 91       	pop	r27
     eb0:	af 91       	pop	r26
     eb2:	9f 91       	pop	r25
     eb4:	8f 91       	pop	r24
     eb6:	7f 91       	pop	r23
     eb8:	6f 91       	pop	r22
     eba:	5f 91       	pop	r21
     ebc:	4f 91       	pop	r20
     ebe:	3f 91       	pop	r19
     ec0:	2f 91       	pop	r18
     ec2:	0f 90       	pop	r0
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	0f 90       	pop	r0
     ec8:	1f 90       	pop	r1
     eca:	18 95       	reti

00000ecc <__vector_7>:

// 8-bit Timer2 overflow
ISR(TIMER2_COMPA_vect){
     ecc:	1f 92       	push	r1
     ece:	0f 92       	push	r0
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	0f 92       	push	r0
     ed4:	11 24       	eor	r1, r1
     ed6:	2f 93       	push	r18
     ed8:	3f 93       	push	r19
     eda:	4f 93       	push	r20
     edc:	5f 93       	push	r21
     ede:	6f 93       	push	r22
     ee0:	7f 93       	push	r23
     ee2:	8f 93       	push	r24
     ee4:	9f 93       	push	r25
     ee6:	af 93       	push	r26
     ee8:	bf 93       	push	r27
     eea:	ef 93       	push	r30
     eec:	ff 93       	push	r31
    // LED array : off
    send_bits_595_LED(0x00);
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	57 de       	rcall	.-850    	; 0xba0 <send_bits_595_LED>
}
     ef2:	ff 91       	pop	r31
     ef4:	ef 91       	pop	r30
     ef6:	bf 91       	pop	r27
     ef8:	af 91       	pop	r26
     efa:	9f 91       	pop	r25
     efc:	8f 91       	pop	r24
     efe:	7f 91       	pop	r23
     f00:	6f 91       	pop	r22
     f02:	5f 91       	pop	r21
     f04:	4f 91       	pop	r20
     f06:	3f 91       	pop	r19
     f08:	2f 91       	pop	r18
     f0a:	0f 90       	pop	r0
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	0f 90       	pop	r0
     f10:	1f 90       	pop	r1
     f12:	18 95       	reti

00000f14 <StrLength>:

// Count character length
int StrLength(const char *s){
     f14:	fc 01       	movw	r30, r24
    int n = 0;
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
    while (*s++ != '\0')
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <StrLength+0xc>
        n++;
     f1c:	2f 5f       	subi	r18, 0xFF	; 255
     f1e:	3f 4f       	sbci	r19, 0xFF	; 255
}

// Count character length
int StrLength(const char *s){
    int n = 0;
    while (*s++ != '\0')
     f20:	81 91       	ld	r24, Z+
     f22:	88 23       	and	r24, r24
     f24:	d9 f7       	brne	.-10     	; 0xf1c <StrLength+0x8>
        n++;
    return (n);
}
     f26:	c9 01       	movw	r24, r18
     f28:	08 95       	ret

00000f2a <DisplayItemInfo>:

// Display
void DisplayItemInfo(void){
     f2a:	1f 93       	push	r17
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	c9 eb       	ldi	r28, 0xB9	; 185
     f32:	d2 e0       	ldi	r29, 0x02	; 2
     f34:	10 e0       	ldi	r17, 0x00	; 0
    int k=0;
    for(k=0;k<Ndata;k++){
        lcd_locate(k,0);
     f36:	81 2f       	mov	r24, r17
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	f8 dc       	rcall	.-1552   	; 0x92c <lcd_locate>
        lcd_set_str((unsigned char*)RxName[t_id[k]]);
     f3c:	e9 91       	ld	r30, Y+
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	ee 0f       	add	r30, r30
     f42:	ff 1f       	adc	r31, r31
     f44:	e5 55       	subi	r30, 0x55	; 85
     f46:	fd 4f       	sbci	r31, 0xFD	; 253
     f48:	80 81       	ld	r24, Z
     f4a:	91 81       	ldd	r25, Z+1	; 0x01
     f4c:	04 dd       	rcall	.-1528   	; 0x956 <lcd_set_str>
     f4e:	1f 5f       	subi	r17, 0xFF	; 255
}

// Display
void DisplayItemInfo(void){
    int k=0;
    for(k=0;k<Ndata;k++){
     f50:	14 30       	cpi	r17, 0x04	; 4
     f52:	89 f7       	brne	.-30     	; 0xf36 <DisplayItemInfo+0xc>
        lcd_locate(k,0);
        lcd_set_str((unsigned char*)RxName[t_id[k]]);
    }
    
}
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	08 95       	ret

00000f5c <tictoc_init>:

double              unit_time_us;
unsigned long int   start_cnt;
unsigned long int   end_cnt;

void tictoc_init(unsigned int fosc_MHz, unsigned int Ndiv){
     f5c:	cf 92       	push	r12
     f5e:	df 92       	push	r13
     f60:	ef 92       	push	r14
     f62:	ff 92       	push	r15
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	ec 01       	movw	r28, r24
    
    unit_time_us = Ndiv / ( 1.0*fosc_MHz );
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	da d4       	rcall	.+2484   	; 0x1924 <__floatunsisf>
     f70:	6b 01       	movw	r12, r22
     f72:	7c 01       	movw	r14, r24
     f74:	be 01       	movw	r22, r28
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	d4 d4       	rcall	.+2472   	; 0x1924 <__floatunsisf>
     f7c:	9b 01       	movw	r18, r22
     f7e:	ac 01       	movw	r20, r24
     f80:	c7 01       	movw	r24, r14
     f82:	b6 01       	movw	r22, r12
     f84:	3b d4       	rcall	.+2166   	; 0x17fc <__divsf3>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	80 93 0e 03 	sts	0x030E, r24
     f8e:	90 93 0f 03 	sts	0x030F, r25
     f92:	a0 93 10 03 	sts	0x0310, r26
     f96:	b0 93 11 03 	sts	0x0311, r27
    
}
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	cf 90       	pop	r12
     fa6:	08 95       	ret

00000fa8 <tic>:

void tic(){
    
    start_cnt = TCNT1;
     fa8:	80 91 84 00 	lds	r24, 0x0084
     fac:	90 91 85 00 	lds	r25, 0x0085
     fb0:	a0 e0       	ldi	r26, 0x00	; 0
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	80 93 06 03 	sts	0x0306, r24
     fb8:	90 93 07 03 	sts	0x0307, r25
     fbc:	a0 93 08 03 	sts	0x0308, r26
     fc0:	b0 93 09 03 	sts	0x0309, r27
    
}
     fc4:	08 95       	ret

00000fc6 <toc>:

unsigned long int toc(){
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
    
    unsigned long int time_us;
    
    end_cnt = TCNT1;
     fca:	80 91 84 00 	lds	r24, 0x0084
     fce:	90 91 85 00 	lds	r25, 0x0085
     fd2:	a0 e0       	ldi	r26, 0x00	; 0
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	80 93 0a 03 	sts	0x030A, r24
     fda:	90 93 0b 03 	sts	0x030B, r25
     fde:	a0 93 0c 03 	sts	0x030C, r26
     fe2:	b0 93 0d 03 	sts	0x030D, r27
    if( start_cnt < end_cnt ){
     fe6:	00 91 06 03 	lds	r16, 0x0306
     fea:	10 91 07 03 	lds	r17, 0x0307
     fee:	20 91 08 03 	lds	r18, 0x0308
     ff2:	30 91 09 03 	lds	r19, 0x0309
     ff6:	ac 01       	movw	r20, r24
     ff8:	bd 01       	movw	r22, r26
     ffa:	40 1b       	sub	r20, r16
     ffc:	51 0b       	sbc	r21, r17
     ffe:	62 0b       	sbc	r22, r18
    1000:	73 0b       	sbc	r23, r19
    1002:	08 17       	cp	r16, r24
    1004:	19 07       	cpc	r17, r25
    1006:	2a 07       	cpc	r18, r26
    1008:	3b 07       	cpc	r19, r27
    100a:	20 f4       	brcc	.+8      	; 0x1014 <toc+0x4e>
        time_us = ( ( 0x10000 + end_cnt ) - start_cnt ) * unit_time_us;
    100c:	40 50       	subi	r20, 0x00	; 0
    100e:	50 40       	sbci	r21, 0x00	; 0
    1010:	6f 4f       	sbci	r22, 0xFF	; 255
    1012:	7f 4f       	sbci	r23, 0xFF	; 255
    }else{
        time_us = ( end_cnt - start_cnt ) * unit_time_us;
    1014:	cb 01       	movw	r24, r22
    1016:	ba 01       	movw	r22, r20
    1018:	85 d4       	rcall	.+2314   	; 0x1924 <__floatunsisf>
    101a:	20 91 0e 03 	lds	r18, 0x030E
    101e:	30 91 0f 03 	lds	r19, 0x030F
    1022:	40 91 10 03 	lds	r20, 0x0310
    1026:	50 91 11 03 	lds	r21, 0x0311
    102a:	2e d5       	rcall	.+2652   	; 0x1a88 <__mulsf3>
    102c:	4f d4       	rcall	.+2206   	; 0x18cc <__fixunssfsi>
    }
    return time_us;
    
}
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	08 95       	ret

00001034 <USARTinit>:
#define UBRR FOSC/16/BAUD-1 
*/

// USART initialize
void USARTinit(unsigned int ubrr){
	UBRR0H = (unsigned char)(ubrr>>8);
    1034:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
    1038:	80 93 c4 00 	sts	0x00C4, r24
								//   '000' : 5bit
								//   '001' : 6bit
								//   '010' : 7bit
								//   '011' : 8bit
	unsigned int U2X = 0;		// Over clocking operation
	UCSR0B = (RCIE<<7)|(TCIE<<6)|(TRIE<<5)|(RE<<4)|(TE<<3)|((Nb>>2)<<2);
    103c:	80 e9       	ldi	r24, 0x90	; 144
    103e:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (Mode<<6)|(Pari<<4)|(STPB<<3)|(Nb<<1)|(CLKE);
    1042:	86 e2       	ldi	r24, 0x26	; 38
    1044:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0A = U2X<<1;
    1048:	10 92 c0 00 	sts	0x00C0, r1
}
    104c:	08 95       	ret

0000104e <USART_transmit>:

// USART transmit
void USART_transmit(unsigned char data){
	while(!(USART_STATUS & (1<<UDRE0)));	// Wait until tx buffer is empty
    104e:	90 91 c0 00 	lds	r25, 0x00C0
    1052:	95 ff       	sbrs	r25, 5
    1054:	fc cf       	rjmp	.-8      	; 0x104e <USART_transmit>
	UDR0 = data;
    1056:	80 93 c6 00 	sts	0x00C6, r24
}
    105a:	08 95       	ret

0000105c <USART_receive>:


// USART receive without wait & Error rejection
unsigned char USART_receive(void){
	return UDR0;
    105c:	80 91 c6 00 	lds	r24, 0x00C6
}
    1060:	08 95       	ret

00001062 <USART_receive_woTO>:

// USART receive w/o. Time-out
unsigned char USART_receive_woTO(void){
	unsigned char error_data;
	while(!(USART_STATUS & (1<<RXC0)));	// Wait receive process
    1062:	80 91 c0 00 	lds	r24, 0x00C0
    1066:	87 ff       	sbrs	r24, 7
    1068:	fc cf       	rjmp	.-8      	; 0x1062 <USART_receive_woTO>
	if ( !( ( USART_STATUS & (1<< FE0))
    106a:	20 91 c0 00 	lds	r18, 0x00C0
	      | ( USART_STATUS & (1<<UPE0)) ) ){	// detect framing & parity error
    106e:	80 91 c0 00 	lds	r24, 0x00C0
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	84 70       	andi	r24, 0x04	; 4
    1076:	90 70       	andi	r25, 0x00	; 0

// USART receive w/o. Time-out
unsigned char USART_receive_woTO(void){
	unsigned char error_data;
	while(!(USART_STATUS & (1<<RXC0)));	// Wait receive process
	if ( !( ( USART_STATUS & (1<< FE0))
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	20 71       	andi	r18, 0x10	; 16
    107c:	30 70       	andi	r19, 0x00	; 0
	      | ( USART_STATUS & (1<<UPE0)) ) ){	// detect framing & parity error
    107e:	82 2b       	or	r24, r18
    1080:	93 2b       	or	r25, r19

// USART receive w/o. Time-out
unsigned char USART_receive_woTO(void){
	unsigned char error_data;
	while(!(USART_STATUS & (1<<RXC0)));	// Wait receive process
	if ( !( ( USART_STATUS & (1<< FE0))
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	19 f4       	brne	.+6      	; 0x108c <USART_receive_woTO+0x2a>
	      | ( USART_STATUS & (1<<UPE0)) ) ){	// detect framing & parity error
		return UDR0;
    1086:	80 91 c6 00 	lds	r24, 0x00C6
    108a:	08 95       	ret
	}else{
		error_data = UDR0;
    108c:	80 91 c6 00 	lds	r24, 0x00C6
		return 0xff;
    1090:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1092:	08 95       	ret

00001094 <USART_receive_wTO>:
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	95 e0       	ldi	r25, 0x05	; 5
    1098:	20 91 c0 00 	lds	r18, 0x00C0
    109c:	27 ff       	sbrs	r18, 7
    109e:	15 c0       	rjmp	.+42     	; 0x10ca <USART_receive_wTO+0x36>
    10a0:	20 91 c0 00 	lds	r18, 0x00C0
    10a4:	80 91 c0 00 	lds	r24, 0x00C0
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	84 70       	andi	r24, 0x04	; 4
    10ac:	90 70       	andi	r25, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	20 71       	andi	r18, 0x10	; 16
    10b2:	30 70       	andi	r19, 0x00	; 0
    10b4:	82 2b       	or	r24, r18
    10b6:	93 2b       	or	r25, r19
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	19 f4       	brne	.+6      	; 0x10c2 <USART_receive_wTO+0x2e>
    10bc:	80 91 c6 00 	lds	r24, 0x00C6
    10c0:	08 95       	ret
    10c2:	80 91 c6 00 	lds	r24, 0x00C6
    10c6:	8f ef       	ldi	r24, 0xFF	; 255
    10c8:	08 95       	ret
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	29 f7       	brne	.-54     	; 0x1098 <USART_receive_wTO+0x4>
    10ce:	8f ef       	ldi	r24, 0xFF	; 255
    10d0:	08 95       	ret

000010d2 <main>:
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	cc 55       	subi	r28, 0x5C	; 92
    10dc:	d0 40       	sbci	r29, 0x00	; 0
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	62 db       	rcall	.-2364   	; 0x7ae <SoftSPI_Init>
    10ea:	38 dd       	rcall	.-1424   	; 0xb5c <SoftSPI_LED_Init>
    10ec:	a6 db       	rcall	.-2228   	; 0x83a <lcd_init>
    10ee:	76 dd       	rcall	.-1300   	; 0xbdc <timer0_init>
    10f0:	b8 dd       	rcall	.-1168   	; 0xc62 <timer1_init>
    10f2:	05 de       	rcall	.-1014   	; 0xcfe <timer2_init>
    10f4:	56 9a       	sbi	0x0a, 6	; 10
    10f6:	89 e1       	ldi	r24, 0x19	; 25
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	9c df       	rcall	.-200    	; 0x1034 <USARTinit>
    10fc:	68 d8       	rcall	.-3888   	; 0x1ce <ExtInterrupt_init>
    10fe:	60 91 d1 02 	lds	r22, 0x02D1
    1102:	70 91 d2 02 	lds	r23, 0x02D2
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	92 e1       	ldi	r25, 0x12	; 18
    110a:	28 df       	rcall	.-432    	; 0xf5c <tictoc_init>
    110c:	20 91 d1 02 	lds	r18, 0x02D1
    1110:	30 91 d2 02 	lds	r19, 0x02D2
    1114:	40 91 d3 02 	lds	r20, 0x02D3
    1118:	50 91 d4 02 	lds	r21, 0x02D4
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	72 e1       	ldi	r23, 0x12	; 18
    1120:	8a e7       	ldi	r24, 0x7A	; 122
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	ce d9       	rcall	.-3172   	; 0x4c2 <TachoMeter_init>
    1126:	a2 d7       	rcall	.+3908   	; 0x206c <__data_load_end+0x41a>
    1128:	c8 da       	rcall	.-2672   	; 0x6ba <FaceMark_init>
    112a:	3f dd       	rcall	.-1410   	; 0xbaa <set_initial_t_id>
    112c:	de 01       	movw	r26, r28
    112e:	d9 96       	adiw	r26, 0x39	; 57
    1130:	e7 e4       	ldi	r30, 0x47	; 71
    1132:	f1 e0       	ldi	r31, 0x01	; 1
    1134:	8e e0       	ldi	r24, 0x0E	; 14
    1136:	01 90       	ld	r0, Z+
    1138:	0d 92       	st	X+, r0
    113a:	81 50       	subi	r24, 0x01	; 1
    113c:	e1 f7       	brne	.-8      	; 0x1136 <main+0x64>
    113e:	de 01       	movw	r26, r28
    1140:	9b 96       	adiw	r26, 0x2b	; 43
    1142:	e5 e5       	ldi	r30, 0x55	; 85
    1144:	f1 e0       	ldi	r31, 0x01	; 1
    1146:	8e e0       	ldi	r24, 0x0E	; 14
    1148:	01 90       	ld	r0, Z+
    114a:	0d 92       	st	X+, r0
    114c:	81 50       	subi	r24, 0x01	; 1
    114e:	e1 f7       	brne	.-8      	; 0x1148 <main+0x76>
    1150:	de 01       	movw	r26, r28
    1152:	94 96       	adiw	r26, 0x24	; 36
    1154:	e3 e6       	ldi	r30, 0x63	; 99
    1156:	f1 e0       	ldi	r31, 0x01	; 1
    1158:	87 e0       	ldi	r24, 0x07	; 7
    115a:	01 90       	ld	r0, Z+
    115c:	0d 92       	st	X+, r0
    115e:	81 50       	subi	r24, 0x01	; 1
    1160:	e1 f7       	brne	.-8      	; 0x115a <main+0x88>
    1162:	de 01       	movw	r26, r28
    1164:	5d 96       	adiw	r26, 0x1d	; 29
    1166:	ea e6       	ldi	r30, 0x6A	; 106
    1168:	f1 e0       	ldi	r31, 0x01	; 1
    116a:	87 e0       	ldi	r24, 0x07	; 7
    116c:	01 90       	ld	r0, Z+
    116e:	0d 92       	st	X+, r0
    1170:	81 50       	subi	r24, 0x01	; 1
    1172:	e1 f7       	brne	.-8      	; 0x116c <main+0x9a>
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	8e 8b       	std	Y+22, r24	; 0x16
    1178:	1f 8a       	std	Y+23, r1	; 0x17
    117a:	18 8e       	std	Y+24, r1	; 0x18
    117c:	19 8e       	std	Y+25, r1	; 0x19
    117e:	1a 8e       	std	Y+26, r1	; 0x1a
    1180:	1b 8e       	std	Y+27, r1	; 0x1b
    1182:	1c 8e       	std	Y+28, r1	; 0x1c
    1184:	83 e1       	ldi	r24, 0x13	; 19
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	90 93 ac 02 	sts	0x02AC, r25
    118c:	80 93 ab 02 	sts	0x02AB, r24
    1190:	89 e1       	ldi	r24, 0x19	; 25
    1192:	91 e0       	ldi	r25, 0x01	; 1
    1194:	90 93 ae 02 	sts	0x02AE, r25
    1198:	80 93 ad 02 	sts	0x02AD, r24
    119c:	8f e1       	ldi	r24, 0x1F	; 31
    119e:	91 e0       	ldi	r25, 0x01	; 1
    11a0:	90 93 b0 02 	sts	0x02B0, r25
    11a4:	80 93 af 02 	sts	0x02AF, r24
    11a8:	85 e2       	ldi	r24, 0x25	; 37
    11aa:	91 e0       	ldi	r25, 0x01	; 1
    11ac:	90 93 b2 02 	sts	0x02B2, r25
    11b0:	80 93 b1 02 	sts	0x02B1, r24
    11b4:	8c e2       	ldi	r24, 0x2C	; 44
    11b6:	91 e0       	ldi	r25, 0x01	; 1
    11b8:	90 93 b4 02 	sts	0x02B4, r25
    11bc:	80 93 b3 02 	sts	0x02B3, r24
    11c0:	82 e3       	ldi	r24, 0x32	; 50
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	90 93 b6 02 	sts	0x02B6, r25
    11c8:	80 93 b5 02 	sts	0x02B5, r24
    11cc:	88 e3       	ldi	r24, 0x38	; 56
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	90 93 b8 02 	sts	0x02B8, r25
    11d4:	80 93 b7 02 	sts	0x02B7, r24
    11d8:	24 e2       	ldi	r18, 0x24	; 36
    11da:	a2 2e       	mov	r10, r18
    11dc:	b1 2c       	mov	r11, r1
    11de:	ac 0e       	add	r10, r28
    11e0:	bd 1e       	adc	r11, r29
    11e2:	3d e1       	ldi	r19, 0x1D	; 29
    11e4:	83 2e       	mov	r8, r19
    11e6:	91 2c       	mov	r9, r1
    11e8:	8c 0e       	add	r8, r28
    11ea:	9d 1e       	adc	r9, r29
    11ec:	00 e0       	ldi	r16, 0x00	; 0
    11ee:	10 e0       	ldi	r17, 0x00	; 0
    11f0:	4b e0       	ldi	r20, 0x0B	; 11
    11f2:	c4 2e       	mov	r12, r20
    11f4:	2e c0       	rjmp	.+92     	; 0x1252 <main+0x180>
    11f6:	4f 5f       	subi	r20, 0xFF	; 255
    11f8:	24 2f       	mov	r18, r20
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	28 17       	cp	r18, r24
    11fe:	39 07       	cpc	r19, r25
    1200:	d4 f3       	brlt	.-12     	; 0x11f6 <main+0x124>
    1202:	f8 01       	movw	r30, r16
    1204:	ee 0f       	add	r30, r30
    1206:	ff 1f       	adc	r31, r31
    1208:	e5 55       	subi	r30, 0x55	; 85
    120a:	fd 4f       	sbci	r31, 0xFD	; 253
    120c:	80 81       	ld	r24, Z
    120e:	91 81       	ldd	r25, Z+1	; 0x01
    1210:	81 de       	rcall	.-766    	; 0xf14 <StrLength>
    1212:	f8 01       	movw	r30, r16
    1214:	e7 51       	subi	r30, 0x17	; 23
    1216:	fd 4f       	sbci	r31, 0xFD	; 253
    1218:	80 83       	st	Z, r24
    121a:	af e0       	ldi	r26, 0x0F	; 15
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	ac 0f       	add	r26, r28
    1220:	bd 1f       	adc	r27, r29
    1222:	a0 0f       	add	r26, r16
    1224:	b1 1f       	adc	r27, r17
    1226:	9c 2d       	mov	r25, r12
    1228:	9f 19       	sub	r25, r15
    122a:	98 1b       	sub	r25, r24
    122c:	e6 e1       	ldi	r30, 0x16	; 22
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	ec 0f       	add	r30, r28
    1232:	fd 1f       	adc	r31, r29
    1234:	e0 0f       	add	r30, r16
    1236:	f1 1f       	adc	r31, r17
    1238:	80 81       	ld	r24, Z
    123a:	98 1b       	sub	r25, r24
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	fe 14       	cp	r15, r14
    1240:	09 f4       	brne	.+2      	; 0x1244 <main+0x172>
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	98 1b       	sub	r25, r24
    1246:	9c 93       	st	X, r25
    1248:	0f 5f       	subi	r16, 0xFF	; 255
    124a:	1f 4f       	sbci	r17, 0xFF	; 255
    124c:	07 30       	cpi	r16, 0x07	; 7
    124e:	11 05       	cpc	r17, r1
    1250:	61 f0       	breq	.+24     	; 0x126a <main+0x198>
    1252:	d5 01       	movw	r26, r10
    1254:	fd 90       	ld	r15, X+
    1256:	5d 01       	movw	r10, r26
    1258:	f4 01       	movw	r30, r8
    125a:	e1 90       	ld	r14, Z+
    125c:	4f 01       	movw	r8, r30
    125e:	8f 2d       	mov	r24, r15
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	8e 19       	sub	r24, r14
    1264:	91 09       	sbc	r25, r1
    1266:	40 e0       	ldi	r20, 0x00	; 0
    1268:	c7 cf       	rjmp	.-114    	; 0x11f8 <main+0x126>
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	9a 87       	std	Y+10, r25	; 0x0a
    1270:	89 87       	std	Y+9, r24	; 0x09
    1272:	80 e1       	ldi	r24, 0x10	; 16
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	9c 87       	std	Y+12, r25	; 0x0c
    1278:	8b 87       	std	Y+11, r24	; 0x0b
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	91 e0       	ldi	r25, 0x01	; 1
    127e:	9e 87       	std	Y+14, r25	; 0x0e
    1280:	8d 87       	std	Y+13, r24	; 0x0d
    1282:	60 91 e5 02 	lds	r22, 0x02E5
    1286:	70 91 e6 02 	lds	r23, 0x02E6
    128a:	80 91 e7 02 	lds	r24, 0x02E7
    128e:	90 91 e8 02 	lds	r25, 0x02E8
    1292:	48 d3       	rcall	.+1680   	; 0x1924 <__floatunsisf>
    1294:	9b 01       	movw	r18, r22
    1296:	ac 01       	movw	r20, r24
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	74 e2       	ldi	r23, 0x24	; 36
    129c:	84 ef       	ldi	r24, 0xF4	; 244
    129e:	9a e4       	ldi	r25, 0x4A	; 74
    12a0:	ad d2       	rcall	.+1370   	; 0x17fc <__divsf3>
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	4a ef       	ldi	r20, 0xFA	; 250
    12a8:	53 e4       	ldi	r21, 0x43	; 67
    12aa:	ee d3       	rcall	.+2012   	; 0x1a88 <__mulsf3>
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	40 e8       	ldi	r20, 0x80	; 128
    12b2:	5b e3       	ldi	r21, 0x3B	; 59
    12b4:	e9 d3       	rcall	.+2002   	; 0x1a88 <__mulsf3>
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	4a e7       	ldi	r20, 0x7A	; 122
    12bc:	54 e4       	ldi	r21, 0x44	; 68
    12be:	9e d2       	rcall	.+1340   	; 0x17fc <__divsf3>
    12c0:	05 d3       	rcall	.+1546   	; 0x18cc <__fixunssfsi>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	90 93 05 03 	sts	0x0305, r25
    12ca:	80 93 04 03 	sts	0x0304, r24
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	80 93 f0 02 	sts	0x02F0, r24
    12d4:	80 93 f1 02 	sts	0x02F1, r24
    12d8:	80 93 f2 02 	sts	0x02F2, r24
    12dc:	80 93 f3 02 	sts	0x02F3, r24
    12e0:	78 94       	sei
    12e2:	87 b9       	out	0x07, r24	; 7
    12e4:	88 b9       	out	0x08, r24	; 8
    12e6:	8f ef       	ldi	r24, 0xFF	; 255
    12e8:	99 e6       	ldi	r25, 0x69	; 105
    12ea:	a8 e1       	ldi	r26, 0x18	; 24
    12ec:	81 50       	subi	r24, 0x01	; 1
    12ee:	90 40       	sbci	r25, 0x00	; 0
    12f0:	a0 40       	sbci	r26, 0x00	; 0
    12f2:	e1 f7       	brne	.-8      	; 0x12ec <main+0x21a>
    12f4:	00 c0       	rjmp	.+0      	; 0x12f6 <main+0x224>
    12f6:	00 00       	nop
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	6c e0       	ldi	r22, 0x0C	; 12
    12fc:	17 db       	rcall	.-2514   	; 0x92c <lcd_locate>
    12fe:	60 91 02 03 	lds	r22, 0x0302
    1302:	70 91 03 03 	lds	r23, 0x0303
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0c d3       	rcall	.+1560   	; 0x1924 <__floatunsisf>
    130c:	46 e0       	ldi	r20, 0x06	; 6
    130e:	50 e0       	ldi	r21, 0x00	; 0
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	00 e0       	ldi	r16, 0x00	; 0
    1316:	10 e0       	ldi	r17, 0x00	; 0
    1318:	29 db       	rcall	.-2478   	; 0x96c <lcd_set_numeric>
    131a:	80 91 73 01 	lds	r24, 0x0173
    131e:	88 23       	and	r24, r24
    1320:	89 f0       	breq	.+34     	; 0x1344 <main+0x272>
    1322:	03 de       	rcall	.-1018   	; 0xf2a <DisplayItemInfo>
    1324:	20 91 7d 01 	lds	r18, 0x017D
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	c9 01       	movw	r24, r18
    132c:	83 70       	andi	r24, 0x03	; 3
    132e:	90 70       	andi	r25, 0x00	; 0
    1330:	95 95       	asr	r25
    1332:	87 95       	ror	r24
    1334:	20 ff       	sbrs	r18, 0
    1336:	02 c0       	rjmp	.+4      	; 0x133c <main+0x26a>
    1338:	68 e0       	ldi	r22, 0x08	; 8
    133a:	01 c0       	rjmp	.+2      	; 0x133e <main+0x26c>
    133c:	67 e0       	ldi	r22, 0x07	; 7
    133e:	f6 da       	rcall	.-2580   	; 0x92c <lcd_locate>
    1340:	10 92 73 01 	sts	0x0173, r1
    1344:	a0 ef       	ldi	r26, 0xF0	; 240
    1346:	6a 2e       	mov	r6, r26
    1348:	a2 e0       	ldi	r26, 0x02	; 2
    134a:	7a 2e       	mov	r7, r26
    134c:	de 01       	movw	r26, r28
    134e:	15 96       	adiw	r26, 0x05	; 5
    1350:	6d 96       	adiw	r28, 0x1d	; 29
    1352:	bf af       	sts	0x7f, r27
    1354:	ae af       	sts	0x7e, r26
    1356:	6d 97       	sbiw	r28, 0x1d	; 29
    1358:	fe 01       	movw	r30, r28
    135a:	e9 5b       	subi	r30, 0xB9	; 185
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	6b 96       	adiw	r28, 0x1b	; 27
    1360:	ff af       	sts	0x7f, r31
    1362:	ee af       	sts	0x7e, r30
    1364:	6b 97       	sbiw	r28, 0x1b	; 27
    1366:	15 ed       	ldi	r17, 0xD5	; 213
    1368:	41 2e       	mov	r4, r17
    136a:	12 e0       	ldi	r17, 0x02	; 2
    136c:	51 2e       	mov	r5, r17
    136e:	1f 01       	movw	r2, r30
    1370:	5d 01       	movw	r10, r26
    1372:	88 24       	eor	r8, r8
    1374:	99 24       	eor	r9, r9
    1376:	ce 01       	movw	r24, r28
    1378:	09 96       	adiw	r24, 0x09	; 9
    137a:	69 96       	adiw	r28, 0x19	; 25
    137c:	9f af       	sts	0x7f, r25
    137e:	8e af       	sts	0x7e, r24
    1380:	69 97       	sbiw	r28, 0x19	; 25
    1382:	d3 01       	movw	r26, r6
    1384:	8c 91       	ld	r24, X
    1386:	81 30       	cpi	r24, 0x01	; 1
    1388:	09 f0       	breq	.+2      	; 0x138c <main+0x2ba>
    138a:	90 c0       	rjmp	.+288    	; 0x14ac <main+0x3da>
    138c:	1c 92       	st	X, r1
    138e:	f4 01       	movw	r30, r8
    1390:	e7 54       	subi	r30, 0x47	; 71
    1392:	fd 4f       	sbci	r31, 0xFD	; 253
    1394:	00 81       	ld	r16, Z
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	f2 01       	movw	r30, r4
    139c:	e8 0f       	add	r30, r24
    139e:	f9 1f       	adc	r31, r25
    13a0:	21 81       	ldd	r18, Z+1	; 0x01
    13a2:	32 2f       	mov	r19, r18
    13a4:	31 54       	subi	r19, 0x41	; 65
    13a6:	36 30       	cpi	r19, 0x06	; 6
    13a8:	18 f0       	brcs	.+6      	; 0x13b0 <main+0x2de>
    13aa:	20 53       	subi	r18, 0x30	; 48
    13ac:	2a 30       	cpi	r18, 0x0A	; 10
    13ae:	40 f4       	brcc	.+16     	; 0x13c0 <main+0x2ee>
    13b0:	21 e0       	ldi	r18, 0x01	; 1
    13b2:	f5 01       	movw	r30, r10
    13b4:	20 83       	st	Z, r18
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	83 30       	cpi	r24, 0x03	; 3
    13ba:	91 05       	cpc	r25, r1
    13bc:	71 f7       	brne	.-36     	; 0x139a <main+0x2c8>
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <main+0x2f2>
    13c0:	d5 01       	movw	r26, r10
    13c2:	1c 92       	st	X, r1
    13c4:	f5 01       	movw	r30, r10
    13c6:	80 81       	ld	r24, Z
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	09 f0       	breq	.+2      	; 0x13ce <main+0x2fc>
    13cc:	6f c0       	rjmp	.+222    	; 0x14ac <main+0x3da>
    13ce:	64 01       	movw	r12, r8
    13d0:	cc 0c       	add	r12, r12
    13d2:	dd 1c       	adc	r13, r13
    13d4:	cc 0c       	add	r12, r12
    13d6:	dd 1c       	adc	r13, r13
    13d8:	86 ed       	ldi	r24, 0xD6	; 214
    13da:	92 e0       	ldi	r25, 0x02	; 2
    13dc:	c8 0e       	add	r12, r24
    13de:	d9 1e       	adc	r13, r25
    13e0:	de 01       	movw	r26, r28
    13e2:	12 96       	adiw	r26, 0x02	; 2
    13e4:	be 01       	movw	r22, r28
    13e6:	61 5f       	subi	r22, 0xF1	; 241
    13e8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ea:	ee 24       	eor	r14, r14
    13ec:	ff 24       	eor	r15, r15
    13ee:	f6 01       	movw	r30, r12
    13f0:	81 91       	ld	r24, Z+
    13f2:	6f 01       	movw	r12, r30
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	20 7f       	andi	r18, 0xF0	; 240
    13fa:	30 70       	andi	r19, 0x00	; 0
    13fc:	20 33       	cpi	r18, 0x30	; 48
    13fe:	31 05       	cpc	r19, r1
    1400:	11 f4       	brne	.+4      	; 0x1406 <main+0x334>
    1402:	8f 70       	andi	r24, 0x0F	; 15
    1404:	05 c0       	rjmp	.+10     	; 0x1410 <main+0x33e>
    1406:	20 34       	cpi	r18, 0x40	; 64
    1408:	31 05       	cpc	r19, r1
    140a:	c9 f4       	brne	.+50     	; 0x143e <main+0x36c>
    140c:	8f 70       	andi	r24, 0x0F	; 15
    140e:	87 5f       	subi	r24, 0xF7	; 247
    1410:	8c 93       	st	X, r24
    1412:	8d 91       	ld	r24, X+
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	fb 01       	movw	r30, r22
    1418:	32 91       	ld	r19, -Z
    141a:	22 91       	ld	r18, -Z
    141c:	bf 01       	movw	r22, r30
    141e:	82 9f       	mul	r24, r18
    1420:	a0 01       	movw	r20, r0
    1422:	83 9f       	mul	r24, r19
    1424:	50 0d       	add	r21, r0
    1426:	92 9f       	mul	r25, r18
    1428:	50 0d       	add	r21, r0
    142a:	11 24       	eor	r1, r1
    142c:	e4 0e       	add	r14, r20
    142e:	f5 1e       	adc	r15, r21
    1430:	69 96       	adiw	r28, 0x19	; 25
    1432:	8e ad       	sts	0x6e, r24
    1434:	9f ad       	sts	0x6f, r25
    1436:	69 97       	sbiw	r28, 0x19	; 25
    1438:	e8 17       	cp	r30, r24
    143a:	f9 07       	cpc	r31, r25
    143c:	c1 f6       	brne	.-80     	; 0x13ee <main+0x31c>
    143e:	10 e0       	ldi	r17, 0x00	; 0
    1440:	b7 01       	movw	r22, r14
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	6e d2       	rcall	.+1244   	; 0x1924 <__floatunsisf>
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	43 e1       	ldi	r20, 0x13	; 19
    144e:	55 e4       	ldi	r21, 0x45	; 69
    1450:	d5 d1       	rcall	.+938    	; 0x17fc <__divsf3>
    1452:	6b 01       	movw	r12, r22
    1454:	7c 01       	movw	r14, r24
    1456:	00 0f       	add	r16, r16
    1458:	11 1f       	adc	r17, r17
    145a:	a1 e0       	ldi	r26, 0x01	; 1
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	ac 0f       	add	r26, r28
    1460:	bd 1f       	adc	r27, r29
    1462:	0a 0f       	add	r16, r26
    1464:	1b 1f       	adc	r17, r27
    1466:	f8 01       	movw	r30, r16
    1468:	60 ad       	sts	0x60, r22
    146a:	71 ad       	sts	0x61, r23
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	59 d2       	rcall	.+1202   	; 0x1924 <__floatunsisf>
    1472:	9b 01       	movw	r18, r22
    1474:	ac 01       	movw	r20, r24
    1476:	c7 01       	movw	r24, r14
    1478:	b6 01       	movw	r22, r12
    147a:	06 d3       	rcall	.+1548   	; 0x1a88 <__mulsf3>
    147c:	6b 01       	movw	r12, r22
    147e:	7c 01       	movw	r14, r24
    1480:	d8 01       	movw	r26, r16
    1482:	9a 96       	adiw	r26, 0x2a	; 42
    1484:	6d 91       	ld	r22, X+
    1486:	7c 91       	ld	r23, X
    1488:	9b 97       	sbiw	r26, 0x2b	; 43
    148a:	88 27       	eor	r24, r24
    148c:	77 fd       	sbrc	r23, 7
    148e:	80 95       	com	r24
    1490:	98 2f       	mov	r25, r24
    1492:	4a d2       	rcall	.+1172   	; 0x1928 <__floatsisf>
    1494:	9b 01       	movw	r18, r22
    1496:	ac 01       	movw	r20, r24
    1498:	c7 01       	movw	r24, r14
    149a:	b6 01       	movw	r22, r12
    149c:	47 d1       	rcall	.+654    	; 0x172c <__addsf3>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	f1 01       	movw	r30, r2
    14a4:	80 83       	st	Z, r24
    14a6:	91 83       	std	Z+1, r25	; 0x01
    14a8:	a2 83       	std	Z+2, r26	; 0x02
    14aa:	b3 83       	std	Z+3, r27	; 0x03
    14ac:	08 94       	sec
    14ae:	81 1c       	adc	r8, r1
    14b0:	91 1c       	adc	r9, r1
    14b2:	08 94       	sec
    14b4:	61 1c       	adc	r6, r1
    14b6:	71 1c       	adc	r7, r1
    14b8:	08 94       	sec
    14ba:	a1 1c       	adc	r10, r1
    14bc:	b1 1c       	adc	r11, r1
    14be:	84 e0       	ldi	r24, 0x04	; 4
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	28 0e       	add	r2, r24
    14c4:	39 1e       	adc	r3, r25
    14c6:	48 0e       	add	r4, r24
    14c8:	59 1e       	adc	r5, r25
    14ca:	94 e0       	ldi	r25, 0x04	; 4
    14cc:	89 16       	cp	r8, r25
    14ce:	91 04       	cpc	r9, r1
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <main+0x402>
    14d2:	57 cf       	rjmp	.-338    	; 0x1382 <main+0x2b0>
    14d4:	09 d8       	rcall	.-4078   	; 0x4e8 <TachoMeter>
    14d6:	60 93 84 01 	sts	0x0184, r22
    14da:	70 93 85 01 	sts	0x0185, r23
    14de:	80 93 86 01 	sts	0x0186, r24
    14e2:	90 93 87 01 	sts	0x0187, r25
    14e6:	63 96       	adiw	r28, 0x13	; 19
    14e8:	2c ad       	sts	0x6c, r18
    14ea:	3d ad       	sts	0x6d, r19
    14ec:	4e ad       	sts	0x6e, r20
    14ee:	5f ad       	sts	0x6f, r21
    14f0:	63 97       	sbiw	r28, 0x13	; 19
    14f2:	67 96       	adiw	r28, 0x17	; 23
    14f4:	ec ac       	sts	0xac, r30
    14f6:	fd ac       	sts	0xad, r31
    14f8:	0e ad       	sts	0x6e, r16
    14fa:	1f ad       	sts	0x6f, r17
    14fc:	67 97       	sbiw	r28, 0x17	; 23
    14fe:	75 d6       	rcall	.+3306   	; 0x21ea <__data_load_end+0x598>
    1500:	87 bd       	out	0x27, r24	; 39
    1502:	20 91 82 01 	lds	r18, 0x0182
    1506:	30 91 83 01 	lds	r19, 0x0183
    150a:	b9 01       	movw	r22, r18
    150c:	60 95       	com	r22
    150e:	70 95       	com	r23
    1510:	40 91 04 03 	lds	r20, 0x0304
    1514:	50 91 05 03 	lds	r21, 0x0305
    1518:	46 17       	cp	r20, r22
    151a:	57 07       	cpc	r21, r23
    151c:	48 f4       	brcc	.+18     	; 0x1530 <main+0x45e>
    151e:	80 91 02 03 	lds	r24, 0x0302
    1522:	90 91 03 03 	lds	r25, 0x0303
    1526:	82 1b       	sub	r24, r18
    1528:	93 0b       	sbc	r25, r19
    152a:	48 17       	cp	r20, r24
    152c:	59 07       	cpc	r21, r25
    152e:	70 f0       	brcs	.+28     	; 0x154c <main+0x47a>
    1530:	64 17       	cp	r22, r20
    1532:	75 07       	cpc	r23, r21
    1534:	08 f0       	brcs	.+2      	; 0x1538 <main+0x466>
    1536:	d7 c0       	rjmp	.+430    	; 0x16e6 <main+0x614>
    1538:	80 91 02 03 	lds	r24, 0x0302
    153c:	90 91 03 03 	lds	r25, 0x0303
    1540:	86 0f       	add	r24, r22
    1542:	97 1f       	adc	r25, r23
    1544:	48 17       	cp	r20, r24
    1546:	59 07       	cpc	r21, r25
    1548:	08 f0       	brcs	.+2      	; 0x154c <main+0x47a>
    154a:	cd c0       	rjmp	.+410    	; 0x16e6 <main+0x614>
    154c:	80 91 02 03 	lds	r24, 0x0302
    1550:	90 91 03 03 	lds	r25, 0x0303
    1554:	90 93 83 01 	sts	0x0183, r25
    1558:	80 93 82 01 	sts	0x0182, r24
    155c:	88 b1       	in	r24, 0x08	; 8
    155e:	80 95       	com	r24
    1560:	88 b9       	out	0x08, r24	; 8
    1562:	59 eb       	ldi	r21, 0xB9	; 185
    1564:	65 2e       	mov	r6, r21
    1566:	52 e0       	ldi	r21, 0x02	; 2
    1568:	75 2e       	mov	r7, r21
    156a:	ee 24       	eor	r14, r14
    156c:	6a e0       	ldi	r22, 0x0A	; 10
    156e:	46 2e       	mov	r4, r22
    1570:	51 2c       	mov	r5, r1
    1572:	d3 01       	movw	r26, r6
    1574:	cd 90       	ld	r12, X+
    1576:	3d 01       	movw	r6, r26
    1578:	dd 24       	eor	r13, r13
    157a:	86 01       	movw	r16, r12
    157c:	07 51       	subi	r16, 0x17	; 23
    157e:	1d 4f       	sbci	r17, 0xFD	; 253
    1580:	8e 2d       	mov	r24, r14
    1582:	f8 01       	movw	r30, r16
    1584:	60 81       	ld	r22, Z
    1586:	d2 d9       	rcall	.-3164   	; 0x92c <lcd_locate>
    1588:	ff 24       	eor	r15, r15
    158a:	03 c0       	rjmp	.+6      	; 0x1592 <main+0x4c0>
    158c:	80 e2       	ldi	r24, 0x20	; 32
    158e:	be d9       	rcall	.-3204   	; 0x90c <lcd_set_char>
    1590:	f3 94       	inc	r15
    1592:	d8 01       	movw	r26, r16
    1594:	6c 91       	ld	r22, X
    1596:	8f 2d       	mov	r24, r15
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	92 01       	movw	r18, r4
    159c:	26 1b       	sub	r18, r22
    159e:	31 09       	sbc	r19, r1
    15a0:	28 17       	cp	r18, r24
    15a2:	39 07       	cpc	r19, r25
    15a4:	9c f7       	brge	.-26     	; 0x158c <main+0x4ba>
    15a6:	8e 2d       	mov	r24, r14
    15a8:	c1 d9       	rcall	.-3198   	; 0x92c <lcd_locate>
    15aa:	ff 24       	eor	r15, r15
    15ac:	0f e0       	ldi	r16, 0x0F	; 15
    15ae:	10 e0       	ldi	r17, 0x00	; 0
    15b0:	0c 0f       	add	r16, r28
    15b2:	1d 1f       	adc	r17, r29
    15b4:	0c 0d       	add	r16, r12
    15b6:	1d 1d       	adc	r17, r13
    15b8:	03 c0       	rjmp	.+6      	; 0x15c0 <main+0x4ee>
    15ba:	80 e2       	ldi	r24, 0x20	; 32
    15bc:	a7 d9       	rcall	.-3250   	; 0x90c <lcd_set_char>
    15be:	f3 94       	inc	r15
    15c0:	f8 01       	movw	r30, r16
    15c2:	80 81       	ld	r24, Z
    15c4:	f8 16       	cp	r15, r24
    15c6:	c8 f3       	brcs	.-14     	; 0x15ba <main+0x4e8>
    15c8:	6d 96       	adiw	r28, 0x1d	; 29
    15ca:	ae ad       	sts	0x6e, r26
    15cc:	bf ad       	sts	0x6f, r27
    15ce:	6d 97       	sbiw	r28, 0x1d	; 29
    15d0:	8d 91       	ld	r24, X+
    15d2:	6d 96       	adiw	r28, 0x1d	; 29
    15d4:	bf af       	sts	0x7f, r27
    15d6:	ae af       	sts	0x7e, r26
    15d8:	6d 97       	sbiw	r28, 0x1d	; 29
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	21 f5       	brne	.+72     	; 0x1626 <main+0x554>
    15de:	ed e1       	ldi	r30, 0x1D	; 29
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	ec 0f       	add	r30, r28
    15e4:	fd 1f       	adc	r31, r29
    15e6:	ec 0d       	add	r30, r12
    15e8:	fd 1d       	adc	r31, r13
    15ea:	40 81       	ld	r20, Z
    15ec:	6b 96       	adiw	r28, 0x1b	; 27
    15ee:	ee ad       	sts	0x6e, r30
    15f0:	ff ad       	sts	0x6f, r31
    15f2:	6b 97       	sbiw	r28, 0x1b	; 27
    15f4:	60 81       	ld	r22, Z
    15f6:	71 81       	ldd	r23, Z+1	; 0x01
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	93 81       	ldd	r25, Z+3	; 0x03
    15fc:	e4 e2       	ldi	r30, 0x24	; 36
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	ec 0f       	add	r30, r28
    1602:	fd 1f       	adc	r31, r29
    1604:	ec 0d       	add	r30, r12
    1606:	fd 1d       	adc	r31, r13
    1608:	20 81       	ld	r18, Z
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	24 1b       	sub	r18, r20
    160e:	31 09       	sbc	r19, r1
    1610:	e6 e1       	ldi	r30, 0x16	; 22
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	ec 0f       	add	r30, r28
    1616:	fd 1f       	adc	r31, r29
    1618:	ec 0d       	add	r30, r12
    161a:	fd 1d       	adc	r31, r13
    161c:	00 81       	ld	r16, Z
    161e:	50 e0       	ldi	r21, 0x00	; 0
    1620:	10 e0       	ldi	r17, 0x00	; 0
    1622:	a4 d9       	rcall	.-3256   	; 0x96c <lcd_set_numeric>
    1624:	36 c0       	rjmp	.+108    	; 0x1692 <main+0x5c0>
    1626:	88 23       	and	r24, r24
    1628:	29 f0       	breq	.+10     	; 0x1634 <main+0x562>
    162a:	33 c0       	rjmp	.+102    	; 0x1692 <main+0x5c0>
    162c:	80 e2       	ldi	r24, 0x20	; 32
    162e:	6e d9       	rcall	.-3364   	; 0x90c <lcd_set_char>
    1630:	0f 5f       	subi	r16, 0xFF	; 255
    1632:	15 c0       	rjmp	.+42     	; 0x165e <main+0x58c>
    1634:	00 e0       	ldi	r16, 0x00	; 0
    1636:	34 e2       	ldi	r19, 0x24	; 36
    1638:	a3 2e       	mov	r10, r19
    163a:	b1 2c       	mov	r11, r1
    163c:	ac 0e       	add	r10, r28
    163e:	bd 1e       	adc	r11, r29
    1640:	ac 0c       	add	r10, r12
    1642:	bd 1c       	adc	r11, r13
    1644:	4d e1       	ldi	r20, 0x1D	; 29
    1646:	84 2e       	mov	r8, r20
    1648:	91 2c       	mov	r9, r1
    164a:	8c 0e       	add	r8, r28
    164c:	9d 1e       	adc	r9, r29
    164e:	8c 0c       	add	r8, r12
    1650:	9d 1c       	adc	r9, r13
    1652:	86 e1       	ldi	r24, 0x16	; 22
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	8c 0f       	add	r24, r28
    1658:	9d 1f       	adc	r25, r29
    165a:	c8 0e       	add	r12, r24
    165c:	d9 1e       	adc	r13, r25
    165e:	d5 01       	movw	r26, r10
    1660:	fc 90       	ld	r15, X
    1662:	20 2f       	mov	r18, r16
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	f4 01       	movw	r30, r8
    166c:	40 81       	ld	r20, Z
    166e:	f4 16       	cp	r15, r20
    1670:	11 f4       	brne	.+4      	; 0x1676 <main+0x5a4>
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	d6 01       	movw	r26, r12
    1678:	4c 91       	ld	r20, X
    167a:	84 0f       	add	r24, r20
    167c:	91 1d       	adc	r25, r1
    167e:	28 17       	cp	r18, r24
    1680:	39 07       	cpc	r19, r25
    1682:	a4 f2       	brlt	.-88     	; 0x162c <main+0x55a>
    1684:	00 e0       	ldi	r16, 0x00	; 0
    1686:	03 c0       	rjmp	.+6      	; 0x168e <main+0x5bc>
    1688:	8a e2       	ldi	r24, 0x2A	; 42
    168a:	40 d9       	rcall	.-3456   	; 0x90c <lcd_set_char>
    168c:	0f 5f       	subi	r16, 0xFF	; 255
    168e:	0f 15       	cp	r16, r15
    1690:	d9 f7       	brne	.-10     	; 0x1688 <main+0x5b6>
    1692:	e3 94       	inc	r14
    1694:	6b 96       	adiw	r28, 0x1b	; 27
    1696:	ee ad       	sts	0x6e, r30
    1698:	ff ad       	sts	0x6f, r31
    169a:	6b 97       	sbiw	r28, 0x1b	; 27
    169c:	34 96       	adiw	r30, 0x04	; 4
    169e:	6b 96       	adiw	r28, 0x1b	; 27
    16a0:	ff af       	sts	0x7f, r31
    16a2:	ee af       	sts	0x7e, r30
    16a4:	6b 97       	sbiw	r28, 0x1b	; 27
    16a6:	f4 e0       	ldi	r31, 0x04	; 4
    16a8:	ef 16       	cp	r14, r31
    16aa:	09 f0       	breq	.+2      	; 0x16ae <main+0x5dc>
    16ac:	62 cf       	rjmp	.-316    	; 0x1572 <main+0x4a0>
    16ae:	82 e0       	ldi	r24, 0x02	; 2
    16b0:	6d e0       	ldi	r22, 0x0D	; 13
    16b2:	3c d9       	rcall	.-3464   	; 0x92c <lcd_locate>
    16b4:	80 91 84 01 	lds	r24, 0x0184
    16b8:	90 91 85 01 	lds	r25, 0x0185
    16bc:	2b e0       	ldi	r18, 0x0B	; 11
    16be:	88 3b       	cpi	r24, 0xB8	; 184
    16c0:	92 07       	cpc	r25, r18
    16c2:	10 f4       	brcc	.+4      	; 0x16c8 <main+0x5f6>
    16c4:	4b d8       	rcall	.-3946   	; 0x75c <shobon>
    16c6:	0a c0       	rjmp	.+20     	; 0x16dc <main+0x60a>
    16c8:	a3 e1       	ldi	r26, 0x13	; 19
    16ca:	88 38       	cpi	r24, 0x88	; 136
    16cc:	9a 07       	cpc	r25, r26
    16ce:	10 f4       	brcc	.+4      	; 0x16d4 <main+0x602>
    16d0:	54 d8       	rcall	.-3928   	; 0x77a <shakin>
    16d2:	04 c0       	rjmp	.+8      	; 0x16dc <main+0x60a>
    16d4:	61 d8       	rcall	.-3902   	; 0x798 <kuwa>
    16d6:	80 e4       	ldi	r24, 0x40	; 64
    16d8:	91 e0       	ldi	r25, 0x01	; 1
    16da:	3d d9       	rcall	.-3462   	; 0x956 <lcd_set_str>
    16dc:	82 e0       	ldi	r24, 0x02	; 2
    16de:	6c e0       	ldi	r22, 0x0C	; 12
    16e0:	25 d9       	rcall	.-3510   	; 0x92c <lcd_locate>
    16e2:	8f ef       	ldi	r24, 0xFF	; 255
    16e4:	04 c0       	rjmp	.+8      	; 0x16ee <main+0x61c>
    16e6:	82 e0       	ldi	r24, 0x02	; 2
    16e8:	6c e0       	ldi	r22, 0x0C	; 12
    16ea:	20 d9       	rcall	.-3520   	; 0x92c <lcd_locate>
    16ec:	80 e2       	ldi	r24, 0x20	; 32
    16ee:	0e d9       	rcall	.-3556   	; 0x90c <lcd_set_char>
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	6c e0       	ldi	r22, 0x0C	; 12
    16f4:	1b d9       	rcall	.-3530   	; 0x92c <lcd_locate>
    16f6:	60 91 84 01 	lds	r22, 0x0184
    16fa:	70 91 85 01 	lds	r23, 0x0185
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	10 d1       	rcall	.+544    	; 0x1924 <__floatunsisf>
    1704:	45 e0       	ldi	r20, 0x05	; 5
    1706:	50 e0       	ldi	r21, 0x00	; 0
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	00 e0       	ldi	r16, 0x00	; 0
    170e:	10 e0       	ldi	r17, 0x00	; 0
    1710:	2d d9       	rcall	.-3494   	; 0x96c <lcd_set_numeric>
    1712:	83 e4       	ldi	r24, 0x43	; 67
    1714:	91 e0       	ldi	r25, 0x01	; 1
    1716:	1f d9       	rcall	.-3522   	; 0x956 <lcd_set_str>
    1718:	83 e0       	ldi	r24, 0x03	; 3
    171a:	6c e0       	ldi	r22, 0x0C	; 12
    171c:	07 d9       	rcall	.-3570   	; 0x92c <lcd_locate>
    171e:	80 91 84 01 	lds	r24, 0x0184
    1722:	90 91 85 01 	lds	r25, 0x0185
    1726:	e1 d4       	rcall	.+2498   	; 0x20ea <__data_load_end+0x498>
    1728:	e7 cd       	rjmp	.-1074   	; 0x12f8 <main+0x226>

0000172a <__subsf3>:
    172a:	50 58       	subi	r21, 0x80	; 128

0000172c <__addsf3>:
    172c:	bb 27       	eor	r27, r27
    172e:	aa 27       	eor	r26, r26
    1730:	0e d0       	rcall	.+28     	; 0x174e <__addsf3x>
    1732:	70 c1       	rjmp	.+736    	; 0x1a14 <__fp_round>
    1734:	61 d1       	rcall	.+706    	; 0x19f8 <__fp_pscA>
    1736:	30 f0       	brcs	.+12     	; 0x1744 <__addsf3+0x18>
    1738:	66 d1       	rcall	.+716    	; 0x1a06 <__fp_pscB>
    173a:	20 f0       	brcs	.+8      	; 0x1744 <__addsf3+0x18>
    173c:	31 f4       	brne	.+12     	; 0x174a <__addsf3+0x1e>
    173e:	9f 3f       	cpi	r25, 0xFF	; 255
    1740:	11 f4       	brne	.+4      	; 0x1746 <__addsf3+0x1a>
    1742:	1e f4       	brtc	.+6      	; 0x174a <__addsf3+0x1e>
    1744:	56 c1       	rjmp	.+684    	; 0x19f2 <__fp_nan>
    1746:	0e f4       	brtc	.+2      	; 0x174a <__addsf3+0x1e>
    1748:	e0 95       	com	r30
    174a:	e7 fb       	bst	r30, 7
    174c:	4c c1       	rjmp	.+664    	; 0x19e6 <__fp_inf>

0000174e <__addsf3x>:
    174e:	e9 2f       	mov	r30, r25
    1750:	72 d1       	rcall	.+740    	; 0x1a36 <__fp_split3>
    1752:	80 f3       	brcs	.-32     	; 0x1734 <__addsf3+0x8>
    1754:	ba 17       	cp	r27, r26
    1756:	62 07       	cpc	r22, r18
    1758:	73 07       	cpc	r23, r19
    175a:	84 07       	cpc	r24, r20
    175c:	95 07       	cpc	r25, r21
    175e:	18 f0       	brcs	.+6      	; 0x1766 <__addsf3x+0x18>
    1760:	71 f4       	brne	.+28     	; 0x177e <__addsf3x+0x30>
    1762:	9e f5       	brtc	.+102    	; 0x17ca <__addsf3x+0x7c>
    1764:	8a c1       	rjmp	.+788    	; 0x1a7a <__fp_zero>
    1766:	0e f4       	brtc	.+2      	; 0x176a <__addsf3x+0x1c>
    1768:	e0 95       	com	r30
    176a:	0b 2e       	mov	r0, r27
    176c:	ba 2f       	mov	r27, r26
    176e:	a0 2d       	mov	r26, r0
    1770:	0b 01       	movw	r0, r22
    1772:	b9 01       	movw	r22, r18
    1774:	90 01       	movw	r18, r0
    1776:	0c 01       	movw	r0, r24
    1778:	ca 01       	movw	r24, r20
    177a:	a0 01       	movw	r20, r0
    177c:	11 24       	eor	r1, r1
    177e:	ff 27       	eor	r31, r31
    1780:	59 1b       	sub	r21, r25
    1782:	99 f0       	breq	.+38     	; 0x17aa <__addsf3x+0x5c>
    1784:	59 3f       	cpi	r21, 0xF9	; 249
    1786:	50 f4       	brcc	.+20     	; 0x179c <__addsf3x+0x4e>
    1788:	50 3e       	cpi	r21, 0xE0	; 224
    178a:	68 f1       	brcs	.+90     	; 0x17e6 <__addsf3x+0x98>
    178c:	1a 16       	cp	r1, r26
    178e:	f0 40       	sbci	r31, 0x00	; 0
    1790:	a2 2f       	mov	r26, r18
    1792:	23 2f       	mov	r18, r19
    1794:	34 2f       	mov	r19, r20
    1796:	44 27       	eor	r20, r20
    1798:	58 5f       	subi	r21, 0xF8	; 248
    179a:	f3 cf       	rjmp	.-26     	; 0x1782 <__addsf3x+0x34>
    179c:	46 95       	lsr	r20
    179e:	37 95       	ror	r19
    17a0:	27 95       	ror	r18
    17a2:	a7 95       	ror	r26
    17a4:	f0 40       	sbci	r31, 0x00	; 0
    17a6:	53 95       	inc	r21
    17a8:	c9 f7       	brne	.-14     	; 0x179c <__addsf3x+0x4e>
    17aa:	7e f4       	brtc	.+30     	; 0x17ca <__addsf3x+0x7c>
    17ac:	1f 16       	cp	r1, r31
    17ae:	ba 0b       	sbc	r27, r26
    17b0:	62 0b       	sbc	r22, r18
    17b2:	73 0b       	sbc	r23, r19
    17b4:	84 0b       	sbc	r24, r20
    17b6:	ba f0       	brmi	.+46     	; 0x17e6 <__addsf3x+0x98>
    17b8:	91 50       	subi	r25, 0x01	; 1
    17ba:	a1 f0       	breq	.+40     	; 0x17e4 <__addsf3x+0x96>
    17bc:	ff 0f       	add	r31, r31
    17be:	bb 1f       	adc	r27, r27
    17c0:	66 1f       	adc	r22, r22
    17c2:	77 1f       	adc	r23, r23
    17c4:	88 1f       	adc	r24, r24
    17c6:	c2 f7       	brpl	.-16     	; 0x17b8 <__addsf3x+0x6a>
    17c8:	0e c0       	rjmp	.+28     	; 0x17e6 <__addsf3x+0x98>
    17ca:	ba 0f       	add	r27, r26
    17cc:	62 1f       	adc	r22, r18
    17ce:	73 1f       	adc	r23, r19
    17d0:	84 1f       	adc	r24, r20
    17d2:	48 f4       	brcc	.+18     	; 0x17e6 <__addsf3x+0x98>
    17d4:	87 95       	ror	r24
    17d6:	77 95       	ror	r23
    17d8:	67 95       	ror	r22
    17da:	b7 95       	ror	r27
    17dc:	f7 95       	ror	r31
    17de:	9e 3f       	cpi	r25, 0xFE	; 254
    17e0:	08 f0       	brcs	.+2      	; 0x17e4 <__addsf3x+0x96>
    17e2:	b3 cf       	rjmp	.-154    	; 0x174a <__addsf3+0x1e>
    17e4:	93 95       	inc	r25
    17e6:	88 0f       	add	r24, r24
    17e8:	08 f0       	brcs	.+2      	; 0x17ec <__addsf3x+0x9e>
    17ea:	99 27       	eor	r25, r25
    17ec:	ee 0f       	add	r30, r30
    17ee:	97 95       	ror	r25
    17f0:	87 95       	ror	r24
    17f2:	08 95       	ret

000017f4 <__cmpsf2>:
    17f4:	d4 d0       	rcall	.+424    	; 0x199e <__fp_cmp>
    17f6:	08 f4       	brcc	.+2      	; 0x17fa <__cmpsf2+0x6>
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	08 95       	ret

000017fc <__divsf3>:
    17fc:	0c d0       	rcall	.+24     	; 0x1816 <__divsf3x>
    17fe:	0a c1       	rjmp	.+532    	; 0x1a14 <__fp_round>
    1800:	02 d1       	rcall	.+516    	; 0x1a06 <__fp_pscB>
    1802:	40 f0       	brcs	.+16     	; 0x1814 <__divsf3+0x18>
    1804:	f9 d0       	rcall	.+498    	; 0x19f8 <__fp_pscA>
    1806:	30 f0       	brcs	.+12     	; 0x1814 <__divsf3+0x18>
    1808:	21 f4       	brne	.+8      	; 0x1812 <__divsf3+0x16>
    180a:	5f 3f       	cpi	r21, 0xFF	; 255
    180c:	19 f0       	breq	.+6      	; 0x1814 <__divsf3+0x18>
    180e:	eb c0       	rjmp	.+470    	; 0x19e6 <__fp_inf>
    1810:	51 11       	cpse	r21, r1
    1812:	34 c1       	rjmp	.+616    	; 0x1a7c <__fp_szero>
    1814:	ee c0       	rjmp	.+476    	; 0x19f2 <__fp_nan>

00001816 <__divsf3x>:
    1816:	0f d1       	rcall	.+542    	; 0x1a36 <__fp_split3>
    1818:	98 f3       	brcs	.-26     	; 0x1800 <__divsf3+0x4>

0000181a <__divsf3_pse>:
    181a:	99 23       	and	r25, r25
    181c:	c9 f3       	breq	.-14     	; 0x1810 <__divsf3+0x14>
    181e:	55 23       	and	r21, r21
    1820:	b1 f3       	breq	.-20     	; 0x180e <__divsf3+0x12>
    1822:	95 1b       	sub	r25, r21
    1824:	55 0b       	sbc	r21, r21
    1826:	bb 27       	eor	r27, r27
    1828:	aa 27       	eor	r26, r26
    182a:	62 17       	cp	r22, r18
    182c:	73 07       	cpc	r23, r19
    182e:	84 07       	cpc	r24, r20
    1830:	38 f0       	brcs	.+14     	; 0x1840 <__divsf3_pse+0x26>
    1832:	9f 5f       	subi	r25, 0xFF	; 255
    1834:	5f 4f       	sbci	r21, 0xFF	; 255
    1836:	22 0f       	add	r18, r18
    1838:	33 1f       	adc	r19, r19
    183a:	44 1f       	adc	r20, r20
    183c:	aa 1f       	adc	r26, r26
    183e:	a9 f3       	breq	.-22     	; 0x182a <__divsf3_pse+0x10>
    1840:	33 d0       	rcall	.+102    	; 0x18a8 <__divsf3_pse+0x8e>
    1842:	0e 2e       	mov	r0, r30
    1844:	3a f0       	brmi	.+14     	; 0x1854 <__divsf3_pse+0x3a>
    1846:	e0 e8       	ldi	r30, 0x80	; 128
    1848:	30 d0       	rcall	.+96     	; 0x18aa <__divsf3_pse+0x90>
    184a:	91 50       	subi	r25, 0x01	; 1
    184c:	50 40       	sbci	r21, 0x00	; 0
    184e:	e6 95       	lsr	r30
    1850:	00 1c       	adc	r0, r0
    1852:	ca f7       	brpl	.-14     	; 0x1846 <__divsf3_pse+0x2c>
    1854:	29 d0       	rcall	.+82     	; 0x18a8 <__divsf3_pse+0x8e>
    1856:	fe 2f       	mov	r31, r30
    1858:	27 d0       	rcall	.+78     	; 0x18a8 <__divsf3_pse+0x8e>
    185a:	66 0f       	add	r22, r22
    185c:	77 1f       	adc	r23, r23
    185e:	88 1f       	adc	r24, r24
    1860:	bb 1f       	adc	r27, r27
    1862:	26 17       	cp	r18, r22
    1864:	37 07       	cpc	r19, r23
    1866:	48 07       	cpc	r20, r24
    1868:	ab 07       	cpc	r26, r27
    186a:	b0 e8       	ldi	r27, 0x80	; 128
    186c:	09 f0       	breq	.+2      	; 0x1870 <__divsf3_pse+0x56>
    186e:	bb 0b       	sbc	r27, r27
    1870:	80 2d       	mov	r24, r0
    1872:	bf 01       	movw	r22, r30
    1874:	ff 27       	eor	r31, r31
    1876:	93 58       	subi	r25, 0x83	; 131
    1878:	5f 4f       	sbci	r21, 0xFF	; 255
    187a:	2a f0       	brmi	.+10     	; 0x1886 <__divsf3_pse+0x6c>
    187c:	9e 3f       	cpi	r25, 0xFE	; 254
    187e:	51 05       	cpc	r21, r1
    1880:	68 f0       	brcs	.+26     	; 0x189c <__divsf3_pse+0x82>
    1882:	b1 c0       	rjmp	.+354    	; 0x19e6 <__fp_inf>
    1884:	fb c0       	rjmp	.+502    	; 0x1a7c <__fp_szero>
    1886:	5f 3f       	cpi	r21, 0xFF	; 255
    1888:	ec f3       	brlt	.-6      	; 0x1884 <__divsf3_pse+0x6a>
    188a:	98 3e       	cpi	r25, 0xE8	; 232
    188c:	dc f3       	brlt	.-10     	; 0x1884 <__divsf3_pse+0x6a>
    188e:	86 95       	lsr	r24
    1890:	77 95       	ror	r23
    1892:	67 95       	ror	r22
    1894:	b7 95       	ror	r27
    1896:	f7 95       	ror	r31
    1898:	9f 5f       	subi	r25, 0xFF	; 255
    189a:	c9 f7       	brne	.-14     	; 0x188e <__divsf3_pse+0x74>
    189c:	88 0f       	add	r24, r24
    189e:	91 1d       	adc	r25, r1
    18a0:	96 95       	lsr	r25
    18a2:	87 95       	ror	r24
    18a4:	97 f9       	bld	r25, 7
    18a6:	08 95       	ret
    18a8:	e1 e0       	ldi	r30, 0x01	; 1
    18aa:	66 0f       	add	r22, r22
    18ac:	77 1f       	adc	r23, r23
    18ae:	88 1f       	adc	r24, r24
    18b0:	bb 1f       	adc	r27, r27
    18b2:	62 17       	cp	r22, r18
    18b4:	73 07       	cpc	r23, r19
    18b6:	84 07       	cpc	r24, r20
    18b8:	ba 07       	cpc	r27, r26
    18ba:	20 f0       	brcs	.+8      	; 0x18c4 <__divsf3_pse+0xaa>
    18bc:	62 1b       	sub	r22, r18
    18be:	73 0b       	sbc	r23, r19
    18c0:	84 0b       	sbc	r24, r20
    18c2:	ba 0b       	sbc	r27, r26
    18c4:	ee 1f       	adc	r30, r30
    18c6:	88 f7       	brcc	.-30     	; 0x18aa <__divsf3_pse+0x90>
    18c8:	e0 95       	com	r30
    18ca:	08 95       	ret

000018cc <__fixunssfsi>:
    18cc:	bc d0       	rcall	.+376    	; 0x1a46 <__fp_splitA>
    18ce:	88 f0       	brcs	.+34     	; 0x18f2 <__fixunssfsi+0x26>
    18d0:	9f 57       	subi	r25, 0x7F	; 127
    18d2:	90 f0       	brcs	.+36     	; 0x18f8 <__fixunssfsi+0x2c>
    18d4:	b9 2f       	mov	r27, r25
    18d6:	99 27       	eor	r25, r25
    18d8:	b7 51       	subi	r27, 0x17	; 23
    18da:	a0 f0       	brcs	.+40     	; 0x1904 <__fixunssfsi+0x38>
    18dc:	d1 f0       	breq	.+52     	; 0x1912 <__fixunssfsi+0x46>
    18de:	66 0f       	add	r22, r22
    18e0:	77 1f       	adc	r23, r23
    18e2:	88 1f       	adc	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	1a f0       	brmi	.+6      	; 0x18ee <__fixunssfsi+0x22>
    18e8:	ba 95       	dec	r27
    18ea:	c9 f7       	brne	.-14     	; 0x18de <__fixunssfsi+0x12>
    18ec:	12 c0       	rjmp	.+36     	; 0x1912 <__fixunssfsi+0x46>
    18ee:	b1 30       	cpi	r27, 0x01	; 1
    18f0:	81 f0       	breq	.+32     	; 0x1912 <__fixunssfsi+0x46>
    18f2:	c3 d0       	rcall	.+390    	; 0x1a7a <__fp_zero>
    18f4:	b1 e0       	ldi	r27, 0x01	; 1
    18f6:	08 95       	ret
    18f8:	c0 c0       	rjmp	.+384    	; 0x1a7a <__fp_zero>
    18fa:	67 2f       	mov	r22, r23
    18fc:	78 2f       	mov	r23, r24
    18fe:	88 27       	eor	r24, r24
    1900:	b8 5f       	subi	r27, 0xF8	; 248
    1902:	39 f0       	breq	.+14     	; 0x1912 <__fixunssfsi+0x46>
    1904:	b9 3f       	cpi	r27, 0xF9	; 249
    1906:	cc f3       	brlt	.-14     	; 0x18fa <__fixunssfsi+0x2e>
    1908:	86 95       	lsr	r24
    190a:	77 95       	ror	r23
    190c:	67 95       	ror	r22
    190e:	b3 95       	inc	r27
    1910:	d9 f7       	brne	.-10     	; 0x1908 <__fixunssfsi+0x3c>
    1912:	3e f4       	brtc	.+14     	; 0x1922 <__fixunssfsi+0x56>
    1914:	90 95       	com	r25
    1916:	80 95       	com	r24
    1918:	70 95       	com	r23
    191a:	61 95       	neg	r22
    191c:	7f 4f       	sbci	r23, 0xFF	; 255
    191e:	8f 4f       	sbci	r24, 0xFF	; 255
    1920:	9f 4f       	sbci	r25, 0xFF	; 255
    1922:	08 95       	ret

00001924 <__floatunsisf>:
    1924:	e8 94       	clt
    1926:	09 c0       	rjmp	.+18     	; 0x193a <__floatsisf+0x12>

00001928 <__floatsisf>:
    1928:	97 fb       	bst	r25, 7
    192a:	3e f4       	brtc	.+14     	; 0x193a <__floatsisf+0x12>
    192c:	90 95       	com	r25
    192e:	80 95       	com	r24
    1930:	70 95       	com	r23
    1932:	61 95       	neg	r22
    1934:	7f 4f       	sbci	r23, 0xFF	; 255
    1936:	8f 4f       	sbci	r24, 0xFF	; 255
    1938:	9f 4f       	sbci	r25, 0xFF	; 255
    193a:	99 23       	and	r25, r25
    193c:	a9 f0       	breq	.+42     	; 0x1968 <__floatsisf+0x40>
    193e:	f9 2f       	mov	r31, r25
    1940:	96 e9       	ldi	r25, 0x96	; 150
    1942:	bb 27       	eor	r27, r27
    1944:	93 95       	inc	r25
    1946:	f6 95       	lsr	r31
    1948:	87 95       	ror	r24
    194a:	77 95       	ror	r23
    194c:	67 95       	ror	r22
    194e:	b7 95       	ror	r27
    1950:	f1 11       	cpse	r31, r1
    1952:	f8 cf       	rjmp	.-16     	; 0x1944 <__floatsisf+0x1c>
    1954:	fa f4       	brpl	.+62     	; 0x1994 <__floatsisf+0x6c>
    1956:	bb 0f       	add	r27, r27
    1958:	11 f4       	brne	.+4      	; 0x195e <__floatsisf+0x36>
    195a:	60 ff       	sbrs	r22, 0
    195c:	1b c0       	rjmp	.+54     	; 0x1994 <__floatsisf+0x6c>
    195e:	6f 5f       	subi	r22, 0xFF	; 255
    1960:	7f 4f       	sbci	r23, 0xFF	; 255
    1962:	8f 4f       	sbci	r24, 0xFF	; 255
    1964:	9f 4f       	sbci	r25, 0xFF	; 255
    1966:	16 c0       	rjmp	.+44     	; 0x1994 <__floatsisf+0x6c>
    1968:	88 23       	and	r24, r24
    196a:	11 f0       	breq	.+4      	; 0x1970 <__floatsisf+0x48>
    196c:	96 e9       	ldi	r25, 0x96	; 150
    196e:	11 c0       	rjmp	.+34     	; 0x1992 <__floatsisf+0x6a>
    1970:	77 23       	and	r23, r23
    1972:	21 f0       	breq	.+8      	; 0x197c <__floatsisf+0x54>
    1974:	9e e8       	ldi	r25, 0x8E	; 142
    1976:	87 2f       	mov	r24, r23
    1978:	76 2f       	mov	r23, r22
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <__floatsisf+0x5e>
    197c:	66 23       	and	r22, r22
    197e:	71 f0       	breq	.+28     	; 0x199c <__floatsisf+0x74>
    1980:	96 e8       	ldi	r25, 0x86	; 134
    1982:	86 2f       	mov	r24, r22
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	60 e0       	ldi	r22, 0x00	; 0
    1988:	2a f0       	brmi	.+10     	; 0x1994 <__floatsisf+0x6c>
    198a:	9a 95       	dec	r25
    198c:	66 0f       	add	r22, r22
    198e:	77 1f       	adc	r23, r23
    1990:	88 1f       	adc	r24, r24
    1992:	da f7       	brpl	.-10     	; 0x198a <__floatsisf+0x62>
    1994:	88 0f       	add	r24, r24
    1996:	96 95       	lsr	r25
    1998:	87 95       	ror	r24
    199a:	97 f9       	bld	r25, 7
    199c:	08 95       	ret

0000199e <__fp_cmp>:
    199e:	99 0f       	add	r25, r25
    19a0:	00 08       	sbc	r0, r0
    19a2:	55 0f       	add	r21, r21
    19a4:	aa 0b       	sbc	r26, r26
    19a6:	e0 e8       	ldi	r30, 0x80	; 128
    19a8:	fe ef       	ldi	r31, 0xFE	; 254
    19aa:	16 16       	cp	r1, r22
    19ac:	17 06       	cpc	r1, r23
    19ae:	e8 07       	cpc	r30, r24
    19b0:	f9 07       	cpc	r31, r25
    19b2:	c0 f0       	brcs	.+48     	; 0x19e4 <__fp_cmp+0x46>
    19b4:	12 16       	cp	r1, r18
    19b6:	13 06       	cpc	r1, r19
    19b8:	e4 07       	cpc	r30, r20
    19ba:	f5 07       	cpc	r31, r21
    19bc:	98 f0       	brcs	.+38     	; 0x19e4 <__fp_cmp+0x46>
    19be:	62 1b       	sub	r22, r18
    19c0:	73 0b       	sbc	r23, r19
    19c2:	84 0b       	sbc	r24, r20
    19c4:	95 0b       	sbc	r25, r21
    19c6:	39 f4       	brne	.+14     	; 0x19d6 <__fp_cmp+0x38>
    19c8:	0a 26       	eor	r0, r26
    19ca:	61 f0       	breq	.+24     	; 0x19e4 <__fp_cmp+0x46>
    19cc:	23 2b       	or	r18, r19
    19ce:	24 2b       	or	r18, r20
    19d0:	25 2b       	or	r18, r21
    19d2:	21 f4       	brne	.+8      	; 0x19dc <__fp_cmp+0x3e>
    19d4:	08 95       	ret
    19d6:	0a 26       	eor	r0, r26
    19d8:	09 f4       	brne	.+2      	; 0x19dc <__fp_cmp+0x3e>
    19da:	a1 40       	sbci	r26, 0x01	; 1
    19dc:	a6 95       	lsr	r26
    19de:	8f ef       	ldi	r24, 0xFF	; 255
    19e0:	81 1d       	adc	r24, r1
    19e2:	81 1d       	adc	r24, r1
    19e4:	08 95       	ret

000019e6 <__fp_inf>:
    19e6:	97 f9       	bld	r25, 7
    19e8:	9f 67       	ori	r25, 0x7F	; 127
    19ea:	80 e8       	ldi	r24, 0x80	; 128
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	60 e0       	ldi	r22, 0x00	; 0
    19f0:	08 95       	ret

000019f2 <__fp_nan>:
    19f2:	9f ef       	ldi	r25, 0xFF	; 255
    19f4:	80 ec       	ldi	r24, 0xC0	; 192
    19f6:	08 95       	ret

000019f8 <__fp_pscA>:
    19f8:	00 24       	eor	r0, r0
    19fa:	0a 94       	dec	r0
    19fc:	16 16       	cp	r1, r22
    19fe:	17 06       	cpc	r1, r23
    1a00:	18 06       	cpc	r1, r24
    1a02:	09 06       	cpc	r0, r25
    1a04:	08 95       	ret

00001a06 <__fp_pscB>:
    1a06:	00 24       	eor	r0, r0
    1a08:	0a 94       	dec	r0
    1a0a:	12 16       	cp	r1, r18
    1a0c:	13 06       	cpc	r1, r19
    1a0e:	14 06       	cpc	r1, r20
    1a10:	05 06       	cpc	r0, r21
    1a12:	08 95       	ret

00001a14 <__fp_round>:
    1a14:	09 2e       	mov	r0, r25
    1a16:	03 94       	inc	r0
    1a18:	00 0c       	add	r0, r0
    1a1a:	11 f4       	brne	.+4      	; 0x1a20 <__fp_round+0xc>
    1a1c:	88 23       	and	r24, r24
    1a1e:	52 f0       	brmi	.+20     	; 0x1a34 <__fp_round+0x20>
    1a20:	bb 0f       	add	r27, r27
    1a22:	40 f4       	brcc	.+16     	; 0x1a34 <__fp_round+0x20>
    1a24:	bf 2b       	or	r27, r31
    1a26:	11 f4       	brne	.+4      	; 0x1a2c <__fp_round+0x18>
    1a28:	60 ff       	sbrs	r22, 0
    1a2a:	04 c0       	rjmp	.+8      	; 0x1a34 <__fp_round+0x20>
    1a2c:	6f 5f       	subi	r22, 0xFF	; 255
    1a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a30:	8f 4f       	sbci	r24, 0xFF	; 255
    1a32:	9f 4f       	sbci	r25, 0xFF	; 255
    1a34:	08 95       	ret

00001a36 <__fp_split3>:
    1a36:	57 fd       	sbrc	r21, 7
    1a38:	90 58       	subi	r25, 0x80	; 128
    1a3a:	44 0f       	add	r20, r20
    1a3c:	55 1f       	adc	r21, r21
    1a3e:	59 f0       	breq	.+22     	; 0x1a56 <__fp_splitA+0x10>
    1a40:	5f 3f       	cpi	r21, 0xFF	; 255
    1a42:	71 f0       	breq	.+28     	; 0x1a60 <__fp_splitA+0x1a>
    1a44:	47 95       	ror	r20

00001a46 <__fp_splitA>:
    1a46:	88 0f       	add	r24, r24
    1a48:	97 fb       	bst	r25, 7
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	61 f0       	breq	.+24     	; 0x1a66 <__fp_splitA+0x20>
    1a4e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a50:	79 f0       	breq	.+30     	; 0x1a70 <__fp_splitA+0x2a>
    1a52:	87 95       	ror	r24
    1a54:	08 95       	ret
    1a56:	12 16       	cp	r1, r18
    1a58:	13 06       	cpc	r1, r19
    1a5a:	14 06       	cpc	r1, r20
    1a5c:	55 1f       	adc	r21, r21
    1a5e:	f2 cf       	rjmp	.-28     	; 0x1a44 <__fp_split3+0xe>
    1a60:	46 95       	lsr	r20
    1a62:	f1 df       	rcall	.-30     	; 0x1a46 <__fp_splitA>
    1a64:	08 c0       	rjmp	.+16     	; 0x1a76 <__fp_splitA+0x30>
    1a66:	16 16       	cp	r1, r22
    1a68:	17 06       	cpc	r1, r23
    1a6a:	18 06       	cpc	r1, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	f1 cf       	rjmp	.-30     	; 0x1a52 <__fp_splitA+0xc>
    1a70:	86 95       	lsr	r24
    1a72:	71 05       	cpc	r23, r1
    1a74:	61 05       	cpc	r22, r1
    1a76:	08 94       	sec
    1a78:	08 95       	ret

00001a7a <__fp_zero>:
    1a7a:	e8 94       	clt

00001a7c <__fp_szero>:
    1a7c:	bb 27       	eor	r27, r27
    1a7e:	66 27       	eor	r22, r22
    1a80:	77 27       	eor	r23, r23
    1a82:	cb 01       	movw	r24, r22
    1a84:	97 f9       	bld	r25, 7
    1a86:	08 95       	ret

00001a88 <__mulsf3>:
    1a88:	0b d0       	rcall	.+22     	; 0x1aa0 <__mulsf3x>
    1a8a:	c4 cf       	rjmp	.-120    	; 0x1a14 <__fp_round>
    1a8c:	b5 df       	rcall	.-150    	; 0x19f8 <__fp_pscA>
    1a8e:	28 f0       	brcs	.+10     	; 0x1a9a <__mulsf3+0x12>
    1a90:	ba df       	rcall	.-140    	; 0x1a06 <__fp_pscB>
    1a92:	18 f0       	brcs	.+6      	; 0x1a9a <__mulsf3+0x12>
    1a94:	95 23       	and	r25, r21
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <__mulsf3+0x12>
    1a98:	a6 cf       	rjmp	.-180    	; 0x19e6 <__fp_inf>
    1a9a:	ab cf       	rjmp	.-170    	; 0x19f2 <__fp_nan>
    1a9c:	11 24       	eor	r1, r1
    1a9e:	ee cf       	rjmp	.-36     	; 0x1a7c <__fp_szero>

00001aa0 <__mulsf3x>:
    1aa0:	ca df       	rcall	.-108    	; 0x1a36 <__fp_split3>
    1aa2:	a0 f3       	brcs	.-24     	; 0x1a8c <__mulsf3+0x4>

00001aa4 <__mulsf3_pse>:
    1aa4:	95 9f       	mul	r25, r21
    1aa6:	d1 f3       	breq	.-12     	; 0x1a9c <__mulsf3+0x14>
    1aa8:	95 0f       	add	r25, r21
    1aaa:	50 e0       	ldi	r21, 0x00	; 0
    1aac:	55 1f       	adc	r21, r21
    1aae:	62 9f       	mul	r22, r18
    1ab0:	f0 01       	movw	r30, r0
    1ab2:	72 9f       	mul	r23, r18
    1ab4:	bb 27       	eor	r27, r27
    1ab6:	f0 0d       	add	r31, r0
    1ab8:	b1 1d       	adc	r27, r1
    1aba:	63 9f       	mul	r22, r19
    1abc:	aa 27       	eor	r26, r26
    1abe:	f0 0d       	add	r31, r0
    1ac0:	b1 1d       	adc	r27, r1
    1ac2:	aa 1f       	adc	r26, r26
    1ac4:	64 9f       	mul	r22, r20
    1ac6:	66 27       	eor	r22, r22
    1ac8:	b0 0d       	add	r27, r0
    1aca:	a1 1d       	adc	r26, r1
    1acc:	66 1f       	adc	r22, r22
    1ace:	82 9f       	mul	r24, r18
    1ad0:	22 27       	eor	r18, r18
    1ad2:	b0 0d       	add	r27, r0
    1ad4:	a1 1d       	adc	r26, r1
    1ad6:	62 1f       	adc	r22, r18
    1ad8:	73 9f       	mul	r23, r19
    1ada:	b0 0d       	add	r27, r0
    1adc:	a1 1d       	adc	r26, r1
    1ade:	62 1f       	adc	r22, r18
    1ae0:	83 9f       	mul	r24, r19
    1ae2:	a0 0d       	add	r26, r0
    1ae4:	61 1d       	adc	r22, r1
    1ae6:	22 1f       	adc	r18, r18
    1ae8:	74 9f       	mul	r23, r20
    1aea:	33 27       	eor	r19, r19
    1aec:	a0 0d       	add	r26, r0
    1aee:	61 1d       	adc	r22, r1
    1af0:	23 1f       	adc	r18, r19
    1af2:	84 9f       	mul	r24, r20
    1af4:	60 0d       	add	r22, r0
    1af6:	21 1d       	adc	r18, r1
    1af8:	82 2f       	mov	r24, r18
    1afa:	76 2f       	mov	r23, r22
    1afc:	6a 2f       	mov	r22, r26
    1afe:	11 24       	eor	r1, r1
    1b00:	9f 57       	subi	r25, 0x7F	; 127
    1b02:	50 40       	sbci	r21, 0x00	; 0
    1b04:	8a f0       	brmi	.+34     	; 0x1b28 <__mulsf3_pse+0x84>
    1b06:	e1 f0       	breq	.+56     	; 0x1b40 <__mulsf3_pse+0x9c>
    1b08:	88 23       	and	r24, r24
    1b0a:	4a f0       	brmi	.+18     	; 0x1b1e <__mulsf3_pse+0x7a>
    1b0c:	ee 0f       	add	r30, r30
    1b0e:	ff 1f       	adc	r31, r31
    1b10:	bb 1f       	adc	r27, r27
    1b12:	66 1f       	adc	r22, r22
    1b14:	77 1f       	adc	r23, r23
    1b16:	88 1f       	adc	r24, r24
    1b18:	91 50       	subi	r25, 0x01	; 1
    1b1a:	50 40       	sbci	r21, 0x00	; 0
    1b1c:	a9 f7       	brne	.-22     	; 0x1b08 <__mulsf3_pse+0x64>
    1b1e:	9e 3f       	cpi	r25, 0xFE	; 254
    1b20:	51 05       	cpc	r21, r1
    1b22:	70 f0       	brcs	.+28     	; 0x1b40 <__mulsf3_pse+0x9c>
    1b24:	60 cf       	rjmp	.-320    	; 0x19e6 <__fp_inf>
    1b26:	aa cf       	rjmp	.-172    	; 0x1a7c <__fp_szero>
    1b28:	5f 3f       	cpi	r21, 0xFF	; 255
    1b2a:	ec f3       	brlt	.-6      	; 0x1b26 <__mulsf3_pse+0x82>
    1b2c:	98 3e       	cpi	r25, 0xE8	; 232
    1b2e:	dc f3       	brlt	.-10     	; 0x1b26 <__mulsf3_pse+0x82>
    1b30:	86 95       	lsr	r24
    1b32:	77 95       	ror	r23
    1b34:	67 95       	ror	r22
    1b36:	b7 95       	ror	r27
    1b38:	f7 95       	ror	r31
    1b3a:	e7 95       	ror	r30
    1b3c:	9f 5f       	subi	r25, 0xFF	; 255
    1b3e:	c1 f7       	brne	.-16     	; 0x1b30 <__mulsf3_pse+0x8c>
    1b40:	fe 2b       	or	r31, r30
    1b42:	88 0f       	add	r24, r24
    1b44:	91 1d       	adc	r25, r1
    1b46:	96 95       	lsr	r25
    1b48:	87 95       	ror	r24
    1b4a:	97 f9       	bld	r25, 7
    1b4c:	08 95       	ret

00001b4e <__mulsi3>:
    1b4e:	62 9f       	mul	r22, r18
    1b50:	d0 01       	movw	r26, r0
    1b52:	73 9f       	mul	r23, r19
    1b54:	f0 01       	movw	r30, r0
    1b56:	82 9f       	mul	r24, r18
    1b58:	e0 0d       	add	r30, r0
    1b5a:	f1 1d       	adc	r31, r1
    1b5c:	64 9f       	mul	r22, r20
    1b5e:	e0 0d       	add	r30, r0
    1b60:	f1 1d       	adc	r31, r1
    1b62:	92 9f       	mul	r25, r18
    1b64:	f0 0d       	add	r31, r0
    1b66:	83 9f       	mul	r24, r19
    1b68:	f0 0d       	add	r31, r0
    1b6a:	74 9f       	mul	r23, r20
    1b6c:	f0 0d       	add	r31, r0
    1b6e:	65 9f       	mul	r22, r21
    1b70:	f0 0d       	add	r31, r0
    1b72:	99 27       	eor	r25, r25
    1b74:	72 9f       	mul	r23, r18
    1b76:	b0 0d       	add	r27, r0
    1b78:	e1 1d       	adc	r30, r1
    1b7a:	f9 1f       	adc	r31, r25
    1b7c:	63 9f       	mul	r22, r19
    1b7e:	b0 0d       	add	r27, r0
    1b80:	e1 1d       	adc	r30, r1
    1b82:	f9 1f       	adc	r31, r25
    1b84:	bd 01       	movw	r22, r26
    1b86:	cf 01       	movw	r24, r30
    1b88:	11 24       	eor	r1, r1
    1b8a:	08 95       	ret

00001b8c <__udivmodsi4>:
    1b8c:	a1 e2       	ldi	r26, 0x21	; 33
    1b8e:	1a 2e       	mov	r1, r26
    1b90:	aa 1b       	sub	r26, r26
    1b92:	bb 1b       	sub	r27, r27
    1b94:	fd 01       	movw	r30, r26
    1b96:	0d c0       	rjmp	.+26     	; 0x1bb2 <__udivmodsi4_ep>

00001b98 <__udivmodsi4_loop>:
    1b98:	aa 1f       	adc	r26, r26
    1b9a:	bb 1f       	adc	r27, r27
    1b9c:	ee 1f       	adc	r30, r30
    1b9e:	ff 1f       	adc	r31, r31
    1ba0:	a2 17       	cp	r26, r18
    1ba2:	b3 07       	cpc	r27, r19
    1ba4:	e4 07       	cpc	r30, r20
    1ba6:	f5 07       	cpc	r31, r21
    1ba8:	20 f0       	brcs	.+8      	; 0x1bb2 <__udivmodsi4_ep>
    1baa:	a2 1b       	sub	r26, r18
    1bac:	b3 0b       	sbc	r27, r19
    1bae:	e4 0b       	sbc	r30, r20
    1bb0:	f5 0b       	sbc	r31, r21

00001bb2 <__udivmodsi4_ep>:
    1bb2:	66 1f       	adc	r22, r22
    1bb4:	77 1f       	adc	r23, r23
    1bb6:	88 1f       	adc	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	1a 94       	dec	r1
    1bbc:	69 f7       	brne	.-38     	; 0x1b98 <__udivmodsi4_loop>
    1bbe:	60 95       	com	r22
    1bc0:	70 95       	com	r23
    1bc2:	80 95       	com	r24
    1bc4:	90 95       	com	r25
    1bc6:	9b 01       	movw	r18, r22
    1bc8:	ac 01       	movw	r20, r24
    1bca:	bd 01       	movw	r22, r26
    1bcc:	cf 01       	movw	r24, r30
    1bce:	08 95       	ret

00001bd0 <_exit>:
    1bd0:	f8 94       	cli

00001bd2 <__stop_program>:
    1bd2:	ff cf       	rjmp	.-2      	; 0x1bd2 <__stop_program>
