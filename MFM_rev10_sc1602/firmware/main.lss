
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00001f90  00002024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000072  0080014c  0080014c  00002070  2**0
                  ALLOC
  3 .stab         00006c78  00000000  00000000  00002070  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000211f  00000000  00000000  00008ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  0000ae08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003c0  00000000  00000000  0000aea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000064  00000000  00000000  0000b268  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000218  00000000  00000000  0000b2cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__vector_1>
       8:	0c 94 12 08 	jmp	0x1024	; 0x1024 <__vector_2>
       c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      10:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      14:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      18:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      1c:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__vector_7>
      20:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      24:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__vector_9>
      28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      34:	0c 94 b3 02 	jmp	0x566	; 0x566 <__vector_13>
      38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      48:	0c 94 56 07 	jmp	0xeac	; 0xeac <__vector_18>
      4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>

00000068 <opening_message>:
      68:	98 00 83 00 6e 00                                   ....n.

0000006e <opening_message_2>:
      6e:	20 20 46 69 72 6d 77 61 72 65 20 52 65 76 2e 20       Firmware Rev. 
      7e:	31 30 20 20 00                                      10  .

00000083 <opening_message_1>:
      83:	20 77 2f 20 46 75 65 6c 50 75 6d 70 20 44 72 69      w/ FuelPump Dri
      93:	76 65 72 20 00                                      ver .

00000098 <opening_message_0>:
      98:	4d 75 6c 74 69 2d 46 75 6e 63 74 69 6f 6e 20 4d     Multi-Function M
      a8:	65 74 65 72 00                                      eter.

000000ad <RxName>:
      ad:	e2 00 dc 00 d6 00 cf 00 c9 00 c3 00 bb 00           ..............

000000bb <RxName_6>:
      bb:	57 41 54 45 52 2e 54 00                             WATER.T.

000000c3 <RxName_5>:
      c3:	4f 49 4c 2e 54 00                                   OIL.T.

000000c9 <RxName_4>:
      c9:	45 58 54 2e 54 00                                   EXT.T.

000000cf <RxName_3>:
      cf:	46 55 45 4c 2e 50 00                                FUEL.P.

000000d6 <RxName_2>:
      d6:	4f 49 4c 2e 50 00                                   OIL.P.

000000dc <RxName_1>:
      dc:	54 41 43 48 4f 00                                   TACHO.

000000e2 <RxName_0>:
      e2:	42 4f 4f 53 54 00                                   BOOST.

000000e8 <eq_grad.1754>:
      e8:	03 00 28 23 0a 00 06 00 84 03 64 00 64 00           ..(#......d.d.

000000f6 <eq_intercept.1755>:
      f6:	ff ff 00 00 00 00 00 00 c8 00 32 00 14 00           ..........2...

00000104 <__c.1806>:
     104:	43 4f 4e 4e 20 45 52 52 00 00                       CONN ERR..

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d8 e0       	ldi	r29, 0x08	; 8
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	11 e0       	ldi	r17, 0x01	; 1
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	e0 e9       	ldi	r30, 0x90	; 144
     122:	ff e1       	ldi	r31, 0x1F	; 31
     124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x10>
     126:	05 90       	lpm	r0, Z+
     128:	0d 92       	st	X+, r0
     12a:	ac 34       	cpi	r26, 0x4C	; 76
     12c:	b1 07       	cpc	r27, r17
     12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0xc>

00000130 <__do_clear_bss>:
     130:	11 e0       	ldi	r17, 0x01	; 1
     132:	ac e4       	ldi	r26, 0x4C	; 76
     134:	b1 e0       	ldi	r27, 0x01	; 1
     136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
     138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
     13a:	ae 3b       	cpi	r26, 0xBE	; 190
     13c:	b1 07       	cpc	r27, r17
     13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>
     140:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <main>
     144:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <_exit>

00000148 <__bad_interrupt>:
     148:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__vector_default>

0000014c <ADC_init>:

#include "ADC.h"

void ADC_init(){
    
    ADMUX   = 0b00100000;
     14c:	80 e2       	ldi	r24, 0x20	; 32
     14e:	80 93 7c 00 	sts	0x007C, r24
    //
    
    ADCSRA  = 0b11100111;
     152:	87 ee       	ldi	r24, 0xE7	; 231
     154:	80 93 7a 00 	sts	0x007A, r24
    // bit 5    ADATE (ADC Auto Trigger enable)
    // bit 4    ADIF (ADC Interrput flag)
    // bit 3    ADIF (ADC Interrput enable)
    // bit 2:0  ADPS (ADC Prescaler Select Bits)
    
    ADCSRB  = 0b00000000;
     158:	10 92 7b 00 	sts	0x007B, r1
    // bit 2:0  ADTS (ADC Auto Trigger Source)
    //          000 continuous
    
     15c:	08 95       	ret

0000015e <BarMeter_init>:
#define         BarMeter_MIN        0.0
#define         BarMeter_MAX        8000

static const float    BarMeter_INTG = (BarMeter_MAX-BarMeter_MIN)/BarMeter_N;

void BarMeter_init(void){
     15e:	df 92       	push	r13
     160:	ef 92       	push	r14
     162:	ff 92       	push	r15
     164:	0f 93       	push	r16
     166:	1f 93       	push	r17
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
    unsigned int code;
    unsigned int addr;
    
    // define User-characters
    for(code=0;code<6;code++){
     16c:	00 e0       	ldi	r16, 0x00	; 0
     16e:	10 e0       	ldi	r17, 0x00	; 0
        for(addr=0;addr<8;addr++){
            lcd_set_CGRAMaddr(code,addr);
            if( (addr > 1) & (addr < 6) )
                lcd_set_char(~(0x1f>>code));
     170:	8f e1       	ldi	r24, 0x1F	; 31
     172:	e8 2e       	mov	r14, r24
     174:	f1 2c       	mov	r15, r1
     176:	20 c0       	rjmp	.+64     	; 0x1b8 <BarMeter_init+0x5a>
    unsigned int addr;
    
    // define User-characters
    for(code=0;code<6;code++){
        for(addr=0;addr<8;addr++){
            lcd_set_CGRAMaddr(code,addr);
     178:	80 2f       	mov	r24, r16
     17a:	6c 2f       	mov	r22, r28
     17c:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_set_CGRAMaddr>
            if( (addr > 1) & (addr < 6) )
     180:	9e 01       	movw	r18, r28
     182:	22 50       	subi	r18, 0x02	; 2
     184:	30 40       	sbci	r19, 0x00	; 0
     186:	24 30       	cpi	r18, 0x04	; 4
     188:	31 05       	cpc	r19, r1
     18a:	10 f4       	brcc	.+4      	; 0x190 <BarMeter_init+0x32>
                lcd_set_char(~(0x1f>>code));
     18c:	8d 2d       	mov	r24, r13
     18e:	09 c0       	rjmp	.+18     	; 0x1a2 <BarMeter_init+0x44>
            else if( (addr == 6) | (addr == 1) ) lcd_set_char(0x00);
     190:	c1 30       	cpi	r28, 0x01	; 1
     192:	d1 05       	cpc	r29, r1
     194:	19 f0       	breq	.+6      	; 0x19c <BarMeter_init+0x3e>
     196:	c6 30       	cpi	r28, 0x06	; 6
     198:	d1 05       	cpc	r29, r1
     19a:	11 f4       	brne	.+4      	; 0x1a0 <BarMeter_init+0x42>
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <BarMeter_init+0x44>
            else                                 lcd_set_char(0x10);
     1a0:	80 e1       	ldi	r24, 0x10	; 16
     1a2:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    unsigned int code;
    unsigned int addr;
    
    // define User-characters
    for(code=0;code<6;code++){
        for(addr=0;addr<8;addr++){
     1a6:	21 96       	adiw	r28, 0x01	; 1
     1a8:	c8 30       	cpi	r28, 0x08	; 8
     1aa:	d1 05       	cpc	r29, r1
     1ac:	29 f7       	brne	.-54     	; 0x178 <BarMeter_init+0x1a>
void BarMeter_init(void){
    unsigned int code;
    unsigned int addr;
    
    // define User-characters
    for(code=0;code<6;code++){
     1ae:	0f 5f       	subi	r16, 0xFF	; 255
     1b0:	1f 4f       	sbci	r17, 0xFF	; 255
     1b2:	06 30       	cpi	r16, 0x06	; 6
     1b4:	11 05       	cpc	r17, r1
     1b6:	61 f0       	breq	.+24     	; 0x1d0 <BarMeter_init+0x72>
        for(addr=0;addr<8;addr++){
            lcd_set_CGRAMaddr(code,addr);
            if( (addr > 1) & (addr < 6) )
                lcd_set_char(~(0x1f>>code));
     1b8:	c7 01       	movw	r24, r14
     1ba:	00 2e       	mov	r0, r16
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <BarMeter_init+0x64>
     1be:	95 95       	asr	r25
     1c0:	87 95       	ror	r24
     1c2:	0a 94       	dec	r0
     1c4:	e2 f7       	brpl	.-8      	; 0x1be <BarMeter_init+0x60>
     1c6:	d8 2e       	mov	r13, r24
     1c8:	d0 94       	com	r13
     1ca:	c0 e0       	ldi	r28, 0x00	; 0
     1cc:	d0 e0       	ldi	r29, 0x00	; 0
     1ce:	d4 cf       	rjmp	.-88     	; 0x178 <BarMeter_init+0x1a>
            else if( (addr == 6) | (addr == 1) ) lcd_set_char(0x00);
            else                                 lcd_set_char(0x10);
        }
    }
}
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	1f 91       	pop	r17
     1d6:	0f 91       	pop	r16
     1d8:	ff 90       	pop	r15
     1da:	ef 90       	pop	r14
     1dc:	df 90       	pop	r13
     1de:	08 95       	ret

000001e0 <BarMeter_disp>:

void BarMeter_disp(unsigned int data){
     1e0:	9f 92       	push	r9
     1e2:	af 92       	push	r10
     1e4:	bf 92       	push	r11
     1e6:	cf 92       	push	r12
     1e8:	df 92       	push	r13
     1ea:	ef 92       	push	r14
     1ec:	ff 92       	push	r15
     1ee:	0f 93       	push	r16
     1f0:	1f 93       	push	r17
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
        data = BarMeter_MAX;
    }else if( data < BarMeter_MIN ){
        data = BarMeter_MIN;
    }
    
    conv_data = data - BarMeter_MIN;
     1f6:	bc 01       	movw	r22, r24
     1f8:	8f e1       	ldi	r24, 0x1F	; 31
     1fa:	61 34       	cpi	r22, 0x41	; 65
     1fc:	78 07       	cpc	r23, r24
     1fe:	10 f0       	brcs	.+4      	; 0x204 <BarMeter_disp+0x24>
     200:	60 e4       	ldi	r22, 0x40	; 64
     202:	7f e1       	ldi	r23, 0x1F	; 31
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__floatunsisf>
     20c:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <__fixunssfsi>
    INTG = (unsigned int)(conv_data/BarMeter_INTG);
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__floatunsisf>
     218:	6b 01       	movw	r12, r22
     21a:	7c 01       	movw	r14, r24
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	4a e7       	ldi	r20, 0x7A	; 122
     222:	54 e4       	ldi	r21, 0x44	; 68
     224:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__divsf3>
     228:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <__fixunssfsi>
     22c:	96 2e       	mov	r9, r22
    FRAC = (unsigned int)((conv_data - BarMeter_INTG*INTG)*1.0/BarMeter_INTG * 5);
     22e:	06 2f       	mov	r16, r22
     230:	10 e0       	ldi	r17, 0x00	; 0

    for(n=0;n<INTG;n++){
     232:	c0 e0       	ldi	r28, 0x00	; 0
     234:	d0 e0       	ldi	r29, 0x00	; 0
     236:	58 01       	movw	r10, r16
     238:	04 c0       	rjmp	.+8      	; 0x242 <BarMeter_disp+0x62>
        lcd_set_char(0x5);
     23a:	85 e0       	ldi	r24, 0x05	; 5
     23c:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    
    conv_data = data - BarMeter_MIN;
    INTG = (unsigned int)(conv_data/BarMeter_INTG);
    FRAC = (unsigned int)((conv_data - BarMeter_INTG*INTG)*1.0/BarMeter_INTG * 5);

    for(n=0;n<INTG;n++){
     240:	21 96       	adiw	r28, 0x01	; 1
     242:	ca 15       	cp	r28, r10
     244:	db 05       	cpc	r29, r11
     246:	c8 f3       	brcs	.-14     	; 0x23a <BarMeter_disp+0x5a>
        lcd_set_char(0x5);
    }
    if( INTG != BarMeter_N ) lcd_set_char(FRAC);
     248:	88 e0       	ldi	r24, 0x08	; 8
     24a:	98 16       	cp	r9, r24
     24c:	21 f1       	breq	.+72     	; 0x296 <BarMeter_disp+0xb6>
        data = BarMeter_MIN;
    }
    
    conv_data = data - BarMeter_MIN;
    INTG = (unsigned int)(conv_data/BarMeter_INTG);
    FRAC = (unsigned int)((conv_data - BarMeter_INTG*INTG)*1.0/BarMeter_INTG * 5);
     24e:	b8 01       	movw	r22, r16
     250:	88 27       	eor	r24, r24
     252:	77 fd       	sbrc	r23, 7
     254:	80 95       	com	r24
     256:	98 2f       	mov	r25, r24
     258:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__floatsisf>
     25c:	20 e0       	ldi	r18, 0x00	; 0
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	4a e7       	ldi	r20, 0x7A	; 122
     262:	54 e4       	ldi	r21, 0x44	; 68
     264:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
     268:	9b 01       	movw	r18, r22
     26a:	ac 01       	movw	r20, r24
     26c:	c7 01       	movw	r24, r14
     26e:	b6 01       	movw	r22, r12
     270:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__subsf3>
     274:	20 e0       	ldi	r18, 0x00	; 0
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	4a e7       	ldi	r20, 0x7A	; 122
     27a:	54 e4       	ldi	r21, 0x44	; 68
     27c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__divsf3>
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	40 ea       	ldi	r20, 0xA0	; 160
     286:	50 e4       	ldi	r21, 0x40	; 64
     288:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
     28c:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <__fixunssfsi>

    for(n=0;n<INTG;n++){
        lcd_set_char(0x5);
    }
    if( INTG != BarMeter_N ) lcd_set_char(FRAC);
     290:	86 2f       	mov	r24, r22
     292:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    for(n=INTG+1;n<BarMeter_N;n++){
     296:	c0 e0       	ldi	r28, 0x00	; 0
     298:	d0 e0       	ldi	r29, 0x00	; 0
     29a:	03 c0       	rjmp	.+6      	; 0x2a2 <BarMeter_disp+0xc2>
        lcd_set_char(0x0);
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
     2a2:	21 96       	adiw	r28, 0x01	; 1

    for(n=0;n<INTG;n++){
        lcd_set_char(0x5);
    }
    if( INTG != BarMeter_N ) lcd_set_char(FRAC);
    for(n=INTG+1;n<BarMeter_N;n++){
     2a4:	ce 01       	movw	r24, r28
     2a6:	8a 0d       	add	r24, r10
     2a8:	9b 1d       	adc	r25, r11
     2aa:	88 30       	cpi	r24, 0x08	; 8
     2ac:	91 05       	cpc	r25, r1
     2ae:	b0 f3       	brcs	.-20     	; 0x29c <BarMeter_disp+0xbc>
        lcd_set_char(0x0);
    }

}
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	1f 91       	pop	r17
     2b6:	0f 91       	pop	r16
     2b8:	ff 90       	pop	r15
     2ba:	ef 90       	pop	r14
     2bc:	df 90       	pop	r13
     2be:	cf 90       	pop	r12
     2c0:	bf 90       	pop	r11
     2c2:	af 90       	pop	r10
     2c4:	9f 90       	pop	r9
     2c6:	08 95       	ret

000002c8 <ExtInterrupt_init>:

void ExtInterrupt_init(void) {

   // INT0, INT1 Pin change interrupt enable
//    EIMSK = 0b00000001; // INT0 is disabled, because of there is no TIE-HIGH/LOW
    EIMSK = 0b00000011;
     2c8:	83 e0       	ldi	r24, 0x03	; 3
     2ca:	8d bb       	out	0x1d, r24	; 29
	// bit 7-2 : not valid ,  bit 1 : INT1 ,  bit 0 : INT0
	
    // Enable Pull-up
    PORTD = PORTD | 0b00001000; // INT1(PD3)
     2cc:	5b 9a       	sbi	0x0b, 3	; 11
    
   // INT0, INT1 Pin change interrupt mode setting
	EICRA = 0b00001111;
     2ce:	8f e0       	ldi	r24, 0x0F	; 15
     2d0:	80 93 69 00 	sts	0x0069, r24
	//		10 ... Negative edge
	//		11 ... Positive edge


	// Pin group mask
	PCICR = 0b00000000;
     2d4:	10 92 68 00 	sts	0x0068, r1
	// bit 2 : PCINT 16 - 23

	// Pin mask
	// PCMSK2 is valid, when bit 2 of PCICR is setted 
	// PCINT23, PCINT22, PCINT21, PCINT20, PCINT19, PCINT18, PCINT17, PCINT16
	PCMSK2 = 0b00000000;
     2d8:	10 92 6d 00 	sts	0x006D, r1
	// PCMSK1 is valid, when bit 1 of PCICR is setted 
	//  ----- , PCINT14, PCINT13, PCINT12, PCINT11, PCINT10,  PCINT9,  PCINT8
	PCMSK1 = 0b00000000;
     2dc:	10 92 6c 00 	sts	0x006C, r1
	// PCMSK0 is valid, when bit 0 of PCICR is setted 
	//  PCINT7,  PCINT6,  PCINT5,  PCINT4,  PCINT3,  PCINT2,  PCINT1,  PCINT0
	PCMSK0 = 0b00000000;
     2e0:	10 92 6b 00 	sts	0x006B, r1
     2e4:	08 95       	ret

000002e6 <FuelPumpDriver>:
unsigned int watch_dog_cnt = 0;
unsigned int watch_dog_thr = 8;

unsigned int adjust = 0;

unsigned int FuelPumpDriver(unsigned long int rpm, float fuel_press, float boost, unsigned int mode){
     2e6:	8f 92       	push	r8
     2e8:	9f 92       	push	r9
     2ea:	af 92       	push	r10
     2ec:	bf 92       	push	r11
     2ee:	cf 92       	push	r12
     2f0:	df 92       	push	r13
     2f2:	ef 92       	push	r14
     2f4:	ff 92       	push	r15
     2f6:	0f 93       	push	r16
     2f8:	1f 93       	push	r17
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	4b 01       	movw	r8, r22
     300:	5c 01       	movw	r10, r24
     302:	c8 01       	movw	r24, r16
     304:	b7 01       	movw	r22, r14
    unsigned long int   FPD_COMP;
    unsigned long int   rpm_diff;
    
    if( ( mode == 1 ) | ( boost > -0.1 )){
     306:	21 e0       	ldi	r18, 0x01	; 1
     308:	c2 16       	cp	r12, r18
     30a:	d1 04       	cpc	r13, r1
     30c:	09 f4       	brne	.+2      	; 0x310 <FuelPumpDriver+0x2a>
     30e:	48 c0       	rjmp	.+144    	; 0x3a0 <FuelPumpDriver+0xba>
     310:	2d ec       	ldi	r18, 0xCD	; 205
     312:	3c ec       	ldi	r19, 0xCC	; 204
     314:	4c ec       	ldi	r20, 0xCC	; 204
     316:	5d eb       	ldi	r21, 0xBD	; 189
     318:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <__gesf2>
     31c:	18 16       	cp	r1, r24
     31e:	0c f4       	brge	.+2      	; 0x322 <FuelPumpDriver+0x3c>
     320:	3f c0       	rjmp	.+126    	; 0x3a0 <FuelPumpDriver+0xba>
        FPD_COMP = 0xff;
    }else{
                
        if( rpm < RPM_MAX ){
     322:	82 eb       	ldi	r24, 0xB2	; 178
     324:	88 16       	cp	r8, r24
     326:	8c e0       	ldi	r24, 0x0C	; 12
     328:	98 06       	cpc	r9, r24
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	a8 06       	cpc	r10, r24
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	b8 06       	cpc	r11, r24
     332:	b0 f5       	brcc	.+108    	; 0x3a0 <FuelPumpDriver+0xba>
            if( rpm > RPM_IDLE ){
     334:	21 e2       	ldi	r18, 0x21	; 33
     336:	82 16       	cp	r8, r18
     338:	23 e0       	ldi	r18, 0x03	; 3
     33a:	92 06       	cpc	r9, r18
     33c:	20 e0       	ldi	r18, 0x00	; 0
     33e:	a2 06       	cpc	r10, r18
     340:	20 e0       	ldi	r18, 0x00	; 0
     342:	b2 06       	cpc	r11, r18
     344:	38 f0       	brcs	.+14     	; 0x354 <FuelPumpDriver+0x6e>
                rpm_diff = rpm - RPM_IDLE;
     346:	c5 01       	movw	r24, r10
     348:	b4 01       	movw	r22, r8
     34a:	60 52       	subi	r22, 0x20	; 32
     34c:	73 40       	sbci	r23, 0x03	; 3
     34e:	80 40       	sbci	r24, 0x00	; 0
     350:	90 40       	sbci	r25, 0x00	; 0
     352:	03 c0       	rjmp	.+6      	; 0x35a <FuelPumpDriver+0x74>
            }else{
                rpm_diff = 0;
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	cb 01       	movw	r24, r22
            }
            FPD_COMP = (unsigned int)((float)rpm_diff / (float)( RPM_MAX - RPM_IDLE ) * (float)(0xff-INIT) ) + INIT + adjust;
     35a:	c0 91 4c 01 	lds	r28, 0x014C
     35e:	d0 91 4d 01 	lds	r29, 0x014D
     362:	c6 56       	subi	r28, 0x66	; 102
     364:	df 4f       	sbci	r29, 0xFF	; 255
     366:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__floatunsisf>
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	30 e2       	ldi	r19, 0x20	; 32
     36e:	49 e1       	ldi	r20, 0x19	; 25
     370:	55 e4       	ldi	r21, 0x45	; 69
     372:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__divsf3>
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	4a ec       	ldi	r20, 0xCA	; 202
     37c:	52 e4       	ldi	r21, 0x42	; 66
     37e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
     382:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <__fixunssfsi>
     386:	ab 01       	movw	r20, r22
     388:	bc 01       	movw	r22, r24
     38a:	c4 0f       	add	r28, r20
     38c:	d5 1f       	adc	r29, r21
     38e:	ae 01       	movw	r20, r28
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	70 e0       	ldi	r23, 0x00	; 0
        }else{
            FPD_COMP = 0xff;
        }
        
        // truncate
        if( FPD_COMP > 0xff ){
     394:	4f 3f       	cpi	r20, 0xFF	; 255
     396:	51 05       	cpc	r21, r1
     398:	61 05       	cpc	r22, r1
     39a:	71 05       	cpc	r23, r1
     39c:	29 f0       	breq	.+10     	; 0x3a8 <FuelPumpDriver+0xc2>
     39e:	20 f0       	brcs	.+8      	; 0x3a8 <FuelPumpDriver+0xc2>
            FPD_COMP = 0xff;
     3a0:	4f ef       	ldi	r20, 0xFF	; 255
     3a2:	50 e0       	ldi	r21, 0x00	; 0
     3a4:	60 e0       	ldi	r22, 0x00	; 0
     3a6:	70 e0       	ldi	r23, 0x00	; 0
        }
    }
    
    return (unsigned int)FPD_COMP;
}
     3a8:	ca 01       	movw	r24, r20
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	ff 90       	pop	r15
     3b4:	ef 90       	pop	r14
     3b6:	df 90       	pop	r13
     3b8:	cf 90       	pop	r12
     3ba:	bf 90       	pop	r11
     3bc:	af 90       	pop	r10
     3be:	9f 90       	pop	r9
     3c0:	8f 90       	pop	r8
     3c2:	08 95       	ret

000003c4 <LEDarray_init>:

unsigned int            RPM_DIFF;

unsigned int LEDarray_init(){
//void  LEDarray_init(){
    RPM_DIFF = (float)( RPM_HIGH - RPM_LOW )/(float)(Narray/Nstep);
     3c4:	87 e7       	ldi	r24, 0x77	; 119
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	90 93 5e 01 	sts	0x015E, r25
     3cc:	80 93 5d 01 	sts	0x015D, r24
    return RPM_DIFF;
}
     3d0:	08 95       	ret

000003d2 <LEDarray>:

void  LEDarray(unsigned int rpm){
    
    if( ( rpm > rpm_disp + 250 ) || ( rpm < ( rpm_disp - 250 ) ) ){
     3d2:	20 91 52 01 	lds	r18, 0x0152
     3d6:	30 91 53 01 	lds	r19, 0x0153
     3da:	a9 01       	movw	r20, r18
     3dc:	46 50       	subi	r20, 0x06	; 6
     3de:	5f 4f       	sbci	r21, 0xFF	; 255
     3e0:	48 17       	cp	r20, r24
     3e2:	59 07       	cpc	r21, r25
     3e4:	28 f0       	brcs	.+10     	; 0x3f0 <LEDarray+0x1e>
     3e6:	2a 5f       	subi	r18, 0xFA	; 250
     3e8:	30 40       	sbci	r19, 0x00	; 0
     3ea:	82 17       	cp	r24, r18
     3ec:	93 07       	cpc	r25, r19
     3ee:	20 f4       	brcc	.+8      	; 0x3f8 <LEDarray+0x26>
        rpm_disp = rpm;
     3f0:	90 93 53 01 	sts	0x0153, r25
     3f4:	80 93 52 01 	sts	0x0152, r24
    }

    if( rpm >= RPM_FLASH ){     // Flash-sequence
     3f8:	2b e1       	ldi	r18, 0x1B	; 27
     3fa:	88 35       	cpi	r24, 0x58	; 88
     3fc:	92 07       	cpc	r25, r18
     3fe:	f8 f0       	brcs	.+62     	; 0x43e <LEDarray+0x6c>
        OCR2A   = LEDarrayDuty_H;   // Compare value for LED bar duty
     400:	80 e4       	ldi	r24, 0x40	; 64
     402:	80 93 b3 00 	sts	0x00B3, r24
        if( flash_cnt == FLASH_SPEED){
     406:	80 91 50 01 	lds	r24, 0x0150
     40a:	90 91 51 01 	lds	r25, 0x0151
     40e:	89 31       	cpi	r24, 0x19	; 25
     410:	91 05       	cpc	r25, r1
     412:	79 f4       	brne	.+30     	; 0x432 <LEDarray+0x60>
            flash_cnt = 0;
     414:	10 92 51 01 	sts	0x0151, r1
     418:	10 92 50 01 	sts	0x0150, r1
            flash = ~flash;
     41c:	80 91 02 01 	lds	r24, 0x0102
     420:	90 91 03 01 	lds	r25, 0x0103
     424:	80 95       	com	r24
     426:	90 95       	com	r25
     428:	90 93 03 01 	sts	0x0103, r25
     42c:	80 93 02 01 	sts	0x0102, r24
     430:	0f c0       	rjmp	.+30     	; 0x450 <LEDarray+0x7e>
        }else{
            flash_cnt++;
     432:	01 96       	adiw	r24, 0x01	; 1
     434:	90 93 51 01 	sts	0x0151, r25
     438:	80 93 50 01 	sts	0x0150, r24
     43c:	09 c0       	rjmp	.+18     	; 0x450 <LEDarray+0x7e>
        }
    }else{                      // Normal-sequence
        flash = 0xff;
     43e:	8f ef       	ldi	r24, 0xFF	; 255
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	90 93 03 01 	sts	0x0103, r25
     446:	80 93 02 01 	sts	0x0102, r24
        OCR2A   = LEDarrayDuty_L;   // Compare value for LED bar duty
     44a:	88 e0       	ldi	r24, 0x08	; 8
     44c:	80 93 b3 00 	sts	0x00B3, r24
    }

    
    if( rpm_disp < RPM_LOW ){
     450:	60 91 52 01 	lds	r22, 0x0152
     454:	70 91 53 01 	lds	r23, 0x0153
     458:	8f e0       	ldi	r24, 0x0F	; 15
     45a:	60 3a       	cpi	r22, 0xA0	; 160
     45c:	78 07       	cpc	r23, r24
     45e:	28 f4       	brcc	.+10     	; 0x46a <LEDarray+0x98>
        LED_scale = 0;
     460:	10 92 60 01 	sts	0x0160, r1
     464:	10 92 5f 01 	sts	0x015F, r1
     468:	28 c0       	rjmp	.+80     	; 0x4ba <LEDarray+0xe8>
    }else if( rpm_disp == RPM_LOW ){
     46a:	2f e0       	ldi	r18, 0x0F	; 15
     46c:	60 3a       	cpi	r22, 0xA0	; 160
     46e:	72 07       	cpc	r23, r18
     470:	19 f4       	brne	.+6      	; 0x478 <LEDarray+0xa6>
        LED_scale = Nstep;
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	1d c0       	rjmp	.+58     	; 0x4b2 <LEDarray+0xe0>
    }else if( rpm_disp > RPM_HIGH ){
     478:	8b e1       	ldi	r24, 0x1B	; 27
     47a:	69 35       	cpi	r22, 0x59	; 89
     47c:	78 07       	cpc	r23, r24
     47e:	18 f0       	brcs	.+6      	; 0x486 <LEDarray+0xb4>
        LED_scale = Narray;
     480:	88 e0       	ldi	r24, 0x08	; 8
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	16 c0       	rjmp	.+44     	; 0x4b2 <LEDarray+0xe0>
    }else{
        LED_scale = (unsigned int)((Narray)*(float)( rpm_disp - RPM_LOW )/(float)( RPM_HIGH - RPM_LOW ));
     486:	60 5a       	subi	r22, 0xA0	; 160
     488:	7f 40       	sbci	r23, 0x0F	; 15
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__floatunsisf>
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	40 e0       	ldi	r20, 0x00	; 0
     498:	51 e4       	ldi	r21, 0x41	; 65
     49a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	30 e8       	ldi	r19, 0x80	; 128
     4a2:	4b e3       	ldi	r20, 0x3B	; 59
     4a4:	55 e4       	ldi	r21, 0x45	; 69
     4a6:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__divsf3>
     4aa:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <__fixunssfsi>
     4ae:	dc 01       	movw	r26, r24
     4b0:	cb 01       	movw	r24, r22
     4b2:	90 93 60 01 	sts	0x0160, r25
     4b6:	80 93 5f 01 	sts	0x015F, r24
    }

    send_bits_595_LED( ( ~( 0xff << (int)LED_scale ) ) & flash );
     4ba:	8f ef       	ldi	r24, 0xFF	; 255
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	00 90 5f 01 	lds	r0, 0x015F
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <LEDarray+0xf6>
     4c4:	88 0f       	add	r24, r24
     4c6:	99 1f       	adc	r25, r25
     4c8:	0a 94       	dec	r0
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <LEDarray+0xf2>
     4cc:	80 95       	com	r24
     4ce:	90 91 02 01 	lds	r25, 0x0102
     4d2:	89 23       	and	r24, r25
     4d4:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <send_bits_595_LED>
        
    
     4d8:	08 95       	ret

000004da <__vector_1>:

// for debug
unsigned long int   cnt_min;
unsigned long int   cnt_max;

ISR(INT0_vect){
     4da:	1f 92       	push	r1
     4dc:	0f 92       	push	r0
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	0f 92       	push	r0
     4e2:	11 24       	eor	r1, r1
     4e4:	4f 93       	push	r20
     4e6:	5f 93       	push	r21
     4e8:	6f 93       	push	r22
     4ea:	7f 93       	push	r23
     4ec:	8f 93       	push	r24
     4ee:	9f 93       	push	r25
     4f0:	ef 93       	push	r30
     4f2:	ff 93       	push	r31
    if( TCNT1 > TCNT_LIM ){
     4f4:	80 91 84 00 	lds	r24, 0x0084
     4f8:	90 91 85 00 	lds	r25, 0x0085
     4fc:	85 36       	cpi	r24, 0x65	; 101
     4fe:	91 05       	cpc	r25, r1
     500:	28 f1       	brcs	.+74     	; 0x54c <__vector_1+0x72>
        meas_array[tacho_n] = TCNT1;
     502:	80 91 54 01 	lds	r24, 0x0154
     506:	90 91 55 01 	lds	r25, 0x0155
     50a:	40 91 84 00 	lds	r20, 0x0084
     50e:	50 91 85 00 	lds	r21, 0x0085
     512:	fc 01       	movw	r30, r24
     514:	ee 0f       	add	r30, r30
     516:	ff 1f       	adc	r31, r31
     518:	ee 0f       	add	r30, r30
     51a:	ff 1f       	adc	r31, r31
     51c:	eb 58       	subi	r30, 0x8B	; 139
     51e:	fe 4f       	sbci	r31, 0xFE	; 254
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	40 83       	st	Z, r20
     526:	51 83       	std	Z+1, r21	; 0x01
     528:	62 83       	std	Z+2, r22	; 0x02
     52a:	73 83       	std	Z+3, r23	; 0x03
        if( tacho_n == Nmed-1 ) tacho_n=0;
     52c:	00 97       	sbiw	r24, 0x00	; 0
     52e:	29 f4       	brne	.+10     	; 0x53a <__vector_1+0x60>
     530:	10 92 55 01 	sts	0x0155, r1
     534:	10 92 54 01 	sts	0x0154, r1
     538:	05 c0       	rjmp	.+10     	; 0x544 <__vector_1+0x6a>
        else                    tacho_n++;
     53a:	01 96       	adiw	r24, 0x01	; 1
     53c:	90 93 55 01 	sts	0x0155, r25
     540:	80 93 54 01 	sts	0x0154, r24
        TCNT1 = 0;
     544:	10 92 85 00 	sts	0x0085, r1
     548:	10 92 84 00 	sts	0x0084, r1
    }
}
     54c:	ff 91       	pop	r31
     54e:	ef 91       	pop	r30
     550:	9f 91       	pop	r25
     552:	8f 91       	pop	r24
     554:	7f 91       	pop	r23
     556:	6f 91       	pop	r22
     558:	5f 91       	pop	r21
     55a:	4f 91       	pop	r20
     55c:	0f 90       	pop	r0
     55e:	0f be       	out	0x3f, r0	; 63
     560:	0f 90       	pop	r0
     562:	1f 90       	pop	r1
     564:	18 95       	reti

00000566 <__vector_13>:

// 16-bit Timer overflow
ISR(TIMER1_OVF_vect){
     566:	1f 92       	push	r1
     568:	0f 92       	push	r0
     56a:	0f b6       	in	r0, 0x3f	; 63
     56c:	0f 92       	push	r0
     56e:	11 24       	eor	r1, r1
     570:	4f 93       	push	r20
     572:	5f 93       	push	r21
     574:	6f 93       	push	r22
     576:	7f 93       	push	r23
     578:	8f 93       	push	r24
     57a:	9f 93       	push	r25
     57c:	ef 93       	push	r30
     57e:	ff 93       	push	r31
    meas_array[tacho_n] = 0xffffffff;
     580:	80 91 54 01 	lds	r24, 0x0154
     584:	90 91 55 01 	lds	r25, 0x0155
     588:	fc 01       	movw	r30, r24
     58a:	ee 0f       	add	r30, r30
     58c:	ff 1f       	adc	r31, r31
     58e:	ee 0f       	add	r30, r30
     590:	ff 1f       	adc	r31, r31
     592:	eb 58       	subi	r30, 0x8B	; 139
     594:	fe 4f       	sbci	r31, 0xFE	; 254
     596:	4f ef       	ldi	r20, 0xFF	; 255
     598:	5f ef       	ldi	r21, 0xFF	; 255
     59a:	ba 01       	movw	r22, r20
     59c:	40 83       	st	Z, r20
     59e:	51 83       	std	Z+1, r21	; 0x01
     5a0:	62 83       	std	Z+2, r22	; 0x02
     5a2:	73 83       	std	Z+3, r23	; 0x03
    if( tacho_n == Nmed-1 ) tacho_n=0;
     5a4:	00 97       	sbiw	r24, 0x00	; 0
     5a6:	29 f4       	brne	.+10     	; 0x5b2 <__vector_13+0x4c>
     5a8:	10 92 55 01 	sts	0x0155, r1
     5ac:	10 92 54 01 	sts	0x0154, r1
     5b0:	05 c0       	rjmp	.+10     	; 0x5bc <__vector_13+0x56>
    else                    tacho_n++;
     5b2:	01 96       	adiw	r24, 0x01	; 1
     5b4:	90 93 55 01 	sts	0x0155, r25
     5b8:	80 93 54 01 	sts	0x0154, r24
    TCNT1 = 0;
     5bc:	10 92 85 00 	sts	0x0085, r1
     5c0:	10 92 84 00 	sts	0x0084, r1
}
     5c4:	ff 91       	pop	r31
     5c6:	ef 91       	pop	r30
     5c8:	9f 91       	pop	r25
     5ca:	8f 91       	pop	r24
     5cc:	7f 91       	pop	r23
     5ce:	6f 91       	pop	r22
     5d0:	5f 91       	pop	r21
     5d2:	4f 91       	pop	r20
     5d4:	0f 90       	pop	r0
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	0f 90       	pop	r0
     5da:	1f 90       	pop	r1
     5dc:	18 95       	reti

000005de <BubbleSort>:
                min_index = n;
            }
        }
        tmp                     = proc_array[m];
        proc_array[m]           = proc_array[min_index];
        proc_array[min_index]   = tmp;
     5de:	80 91 81 01 	lds	r24, 0x0181
     5e2:	90 91 82 01 	lds	r25, 0x0182
     5e6:	a0 e0       	ldi	r26, 0x00	; 0
     5e8:	b0 e0       	ldi	r27, 0x00	; 0
     5ea:	80 93 81 01 	sts	0x0181, r24
     5ee:	90 93 82 01 	sts	0x0182, r25
     5f2:	a0 93 83 01 	sts	0x0183, r26
     5f6:	b0 93 84 01 	sts	0x0184, r27
    }
}
     5fa:	08 95       	ret

000005fc <TachoMeter_init>:


void TachoMeter_init(unsigned long int FOSC_in,unsigned long int Ndiv_in){
     5fc:	dc 01       	movw	r26, r24
     5fe:	cb 01       	movw	r24, r22
    
    FOSC = FOSC_in;
     600:	80 93 71 01 	sts	0x0171, r24
     604:	90 93 72 01 	sts	0x0172, r25
     608:	a0 93 73 01 	sts	0x0173, r26
     60c:	b0 93 74 01 	sts	0x0174, r27
    Ndiv = Ndiv_in;
     610:	20 93 69 01 	sts	0x0169, r18
     614:	30 93 6a 01 	sts	0x016A, r19
     618:	40 93 6b 01 	sts	0x016B, r20
     61c:	50 93 6c 01 	sts	0x016C, r21
    
}
     620:	08 95       	ret

00000622 <TachoMeter>:


unsigned long int TachoMeter(void){
     622:	cf 92       	push	r12
     624:	df 92       	push	r13
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
    unsigned int n;
    
    // Tacho Meter
    //Median Filter
    for(n=0;n<Nmed;n++){
        proc_array[n] = meas_array[n];
     62a:	80 91 75 01 	lds	r24, 0x0175
     62e:	90 91 76 01 	lds	r25, 0x0176
     632:	a0 91 77 01 	lds	r26, 0x0177
     636:	b0 91 78 01 	lds	r27, 0x0178
     63a:	80 93 81 01 	sts	0x0181, r24
     63e:	90 93 82 01 	sts	0x0182, r25
     642:	a0 93 83 01 	sts	0x0183, r26
     646:	b0 93 84 01 	sts	0x0184, r27
    }
//    BubbleSort();
    
    // Calculate frequency
    if(meas_array[tacho_n] >= 0xffff){          // Too Long Gap Pulse
     64a:	e0 91 54 01 	lds	r30, 0x0154
     64e:	f0 91 55 01 	lds	r31, 0x0155
     652:	ee 0f       	add	r30, r30
     654:	ff 1f       	adc	r31, r31
     656:	ee 0f       	add	r30, r30
     658:	ff 1f       	adc	r31, r31
     65a:	eb 58       	subi	r30, 0x8B	; 139
     65c:	fe 4f       	sbci	r31, 0xFE	; 254
     65e:	c0 80       	ld	r12, Z
     660:	d1 80       	ldd	r13, Z+1	; 0x01
     662:	e2 80       	ldd	r14, Z+2	; 0x02
     664:	f3 80       	ldd	r15, Z+3	; 0x03
     666:	8f ef       	ldi	r24, 0xFF	; 255
     668:	c8 16       	cp	r12, r24
     66a:	8f ef       	ldi	r24, 0xFF	; 255
     66c:	d8 06       	cpc	r13, r24
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	e8 06       	cpc	r14, r24
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	f8 06       	cpc	r15, r24
     676:	20 f0       	brcs	.+8      	; 0x680 <TachoMeter+0x5e>
        freq = 0;
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	dc 01       	movw	r26, r24
     67e:	1e c0       	rjmp	.+60     	; 0x6bc <TachoMeter+0x9a>
    }else{                                      // Last Pulse
        freq = FOSC / Ndiv / meas_array[tacho_n];
     680:	60 91 71 01 	lds	r22, 0x0171
     684:	70 91 72 01 	lds	r23, 0x0172
     688:	80 91 73 01 	lds	r24, 0x0173
     68c:	90 91 74 01 	lds	r25, 0x0174
     690:	20 91 69 01 	lds	r18, 0x0169
     694:	30 91 6a 01 	lds	r19, 0x016A
     698:	40 91 6b 01 	lds	r20, 0x016B
     69c:	50 91 6c 01 	lds	r21, 0x016C
     6a0:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <__udivmodsi4>
     6a4:	ca 01       	movw	r24, r20
     6a6:	b9 01       	movw	r22, r18
     6a8:	a7 01       	movw	r20, r14
     6aa:	96 01       	movw	r18, r12
     6ac:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <__udivmodsi4>
     6b0:	ca 01       	movw	r24, r20
     6b2:	b9 01       	movw	r22, r18
     6b4:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__floatunsisf>
     6b8:	dc 01       	movw	r26, r24
     6ba:	cb 01       	movw	r24, r22
     6bc:	80 93 61 01 	sts	0x0161, r24
     6c0:	90 93 62 01 	sts	0x0162, r25
     6c4:	a0 93 63 01 	sts	0x0163, r26
     6c8:	b0 93 64 01 	sts	0x0164, r27
    }
    
    // Decide measured frequency is valid or invalid
    
    if( ( freq - freq_cur ) < RPM_DIFF/60.0 ){  // Tracking
     6cc:	c0 90 61 01 	lds	r12, 0x0161
     6d0:	d0 90 62 01 	lds	r13, 0x0162
     6d4:	e0 90 63 01 	lds	r14, 0x0163
     6d8:	f0 90 64 01 	lds	r15, 0x0164
     6dc:	c7 01       	movw	r24, r14
     6de:	b6 01       	movw	r22, r12
     6e0:	20 91 6d 01 	lds	r18, 0x016D
     6e4:	30 91 6e 01 	lds	r19, 0x016E
     6e8:	40 91 6f 01 	lds	r20, 0x016F
     6ec:	50 91 70 01 	lds	r21, 0x0170
     6f0:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__subsf3>
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	48 e4       	ldi	r20, 0x48	; 72
     6fa:	52 e4       	ldi	r21, 0x42	; 66
     6fc:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__cmpsf2>
     700:	87 ff       	sbrs	r24, 7
     702:	08 c0       	rjmp	.+16     	; 0x714 <TachoMeter+0xf2>
        freq_cur = freq;
     704:	c0 92 6d 01 	sts	0x016D, r12
     708:	d0 92 6e 01 	sts	0x016E, r13
     70c:	e0 92 6f 01 	sts	0x016F, r14
     710:	f0 92 70 01 	sts	0x0170, r15
        freq_cur = (float)(FOSC / Ndiv) / (float)cnt;
    }
    */
    
    // Calcurate RPM
    rpm = (unsigned long int)( 60.0 * freq_cur / (float)Npulse );
     714:	60 91 6d 01 	lds	r22, 0x016D
     718:	70 91 6e 01 	lds	r23, 0x016E
     71c:	80 91 6f 01 	lds	r24, 0x016F
     720:	90 91 70 01 	lds	r25, 0x0170
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	40 e7       	ldi	r20, 0x70	; 112
     72a:	52 e4       	ldi	r21, 0x42	; 66
     72c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	40 e0       	ldi	r20, 0x00	; 0
     736:	5f e3       	ldi	r21, 0x3F	; 63
     738:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
     73c:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <__fixunssfsi>
     740:	60 93 59 01 	sts	0x0159, r22
     744:	70 93 5a 01 	sts	0x015A, r23
     748:	80 93 5b 01 	sts	0x015B, r24
     74c:	90 93 5c 01 	sts	0x015C, r25
    
    return rpm;
    
}
     750:	ff 90       	pop	r15
     752:	ef 90       	pop	r14
     754:	df 90       	pop	r13
     756:	cf 90       	pop	r12
     758:	08 95       	ret

0000075a <FaceMark_init>:
    
    //code 0-5 is used in "BarMeter"
    // "ω"
    code = 6;
    addr = 0;
    lcd_set_CGRAMaddr(code,addr);
     75a:	86 e0       	ldi	r24, 0x06	; 6
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00000000);
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    addr = 1;
    lcd_set_CGRAMaddr(code,addr);
     768:	86 e0       	ldi	r24, 0x06	; 6
     76a:	61 e0       	ldi	r22, 0x01	; 1
     76c:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00000000);
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    addr = 2;
    lcd_set_CGRAMaddr(code,addr);
     776:	86 e0       	ldi	r24, 0x06	; 6
     778:	62 e0       	ldi	r22, 0x02	; 2
     77a:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00000000);
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    addr = 3;
    lcd_set_CGRAMaddr(code,addr);
     784:	86 e0       	ldi	r24, 0x06	; 6
     786:	63 e0       	ldi	r22, 0x03	; 3
     788:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00000000);
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    addr = 4;
    lcd_set_CGRAMaddr(code,addr);
     792:	86 e0       	ldi	r24, 0x06	; 6
     794:	64 e0       	ldi	r22, 0x04	; 4
     796:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010001);
     79a:	81 e1       	ldi	r24, 0x11	; 17
     79c:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    addr = 5;
    lcd_set_CGRAMaddr(code,addr);
     7a0:	86 e0       	ldi	r24, 0x06	; 6
     7a2:	65 e0       	ldi	r22, 0x05	; 5
     7a4:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010101);
     7a8:	85 e1       	ldi	r24, 0x15	; 21
     7aa:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    addr = 6;
    lcd_set_CGRAMaddr(code,addr);
     7ae:	86 e0       	ldi	r24, 0x06	; 6
     7b0:	66 e0       	ldi	r22, 0x06	; 6
     7b2:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010101);
     7b6:	85 e1       	ldi	r24, 0x15	; 21
     7b8:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    addr = 7;
    lcd_set_CGRAMaddr(code,addr);
     7bc:	86 e0       	ldi	r24, 0x06	; 6
     7be:	67 e0       	ldi	r22, 0x07	; 7
     7c0:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00001010);
     7c4:	8a e0       	ldi	r24, 0x0A	; 10
     7c6:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    
    // "Д"
    code = 7;
    addr = 0;
    lcd_set_CGRAMaddr(code,addr);
     7ca:	87 e0       	ldi	r24, 0x07	; 7
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_set_CGRAMaddr>
    lcd_set_char(0x00);
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    addr = 1;
    lcd_set_CGRAMaddr(code,addr);
     7d8:	87 e0       	ldi	r24, 0x07	; 7
     7da:	61 e0       	ldi	r22, 0x01	; 1
     7dc:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_set_CGRAMaddr>
    lcd_set_char(0x00);
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    addr = 2;
    lcd_set_CGRAMaddr(code,addr);
     7e6:	87 e0       	ldi	r24, 0x07	; 7
     7e8:	62 e0       	ldi	r22, 0x02	; 2
     7ea:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00011100);
     7ee:	8c e1       	ldi	r24, 0x1C	; 28
     7f0:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    addr = 3;
    lcd_set_CGRAMaddr(code,addr);
     7f4:	87 e0       	ldi	r24, 0x07	; 7
     7f6:	63 e0       	ldi	r22, 0x03	; 3
     7f8:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010100);
     7fc:	84 e1       	ldi	r24, 0x14	; 20
     7fe:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    addr = 4;
    lcd_set_CGRAMaddr(code,addr);
     802:	87 e0       	ldi	r24, 0x07	; 7
     804:	64 e0       	ldi	r22, 0x04	; 4
     806:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010100);
     80a:	84 e1       	ldi	r24, 0x14	; 20
     80c:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    addr = 5;
    lcd_set_CGRAMaddr(code,addr);
     810:	87 e0       	ldi	r24, 0x07	; 7
     812:	65 e0       	ldi	r22, 0x05	; 5
     814:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010010);
     818:	82 e1       	ldi	r24, 0x12	; 18
     81a:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    addr = 6;
    lcd_set_CGRAMaddr(code,addr);
     81e:	87 e0       	ldi	r24, 0x07	; 7
     820:	66 e0       	ldi	r22, 0x06	; 6
     822:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00011111);
     826:	8f e1       	ldi	r24, 0x1F	; 31
     828:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    addr = 7;
    lcd_set_CGRAMaddr(code,addr);
     82c:	87 e0       	ldi	r24, 0x07	; 7
     82e:	67 e0       	ldi	r22, 0x07	; 7
     830:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010001);
     834:	81 e1       	ldi	r24, 0x11	; 17
     836:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    
}
     83a:	08 95       	ret

0000083c <shobon>:

void shobon(void){
    lcd_set_char('(');
     83c:	88 e2       	ldi	r24, 0x28	; 40
     83e:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    lcd_set_char(0x27);
     842:	87 e2       	ldi	r24, 0x27	; 39
     844:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    lcd_set_char(0xa5);
     848:	85 ea       	ldi	r24, 0xA5	; 165
     84a:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    lcd_set_char(0x06); // "ω"
     84e:	86 e0       	ldi	r24, 0x06	; 6
     850:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    lcd_set_char(0xa5);
     854:	85 ea       	ldi	r24, 0xA5	; 165
     856:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    lcd_set_char(0x60);
     85a:	80 e6       	ldi	r24, 0x60	; 96
     85c:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    lcd_set_char(')');
     860:	89 e2       	ldi	r24, 0x29	; 41
     862:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
}
     866:	08 95       	ret

00000868 <shakin>:

void shakin(void){
    lcd_set_char('(');
     868:	88 e2       	ldi	r24, 0x28	; 40
     86a:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    lcd_set_char(0x60);
     86e:	80 e6       	ldi	r24, 0x60	; 96
     870:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    lcd_set_char(0xa5);
     874:	85 ea       	ldi	r24, 0xA5	; 165
     876:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    lcd_set_char(0x06); // "ω"
     87a:	86 e0       	ldi	r24, 0x06	; 6
     87c:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    lcd_set_char(0xa5);
     880:	85 ea       	ldi	r24, 0xA5	; 165
     882:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    lcd_set_char(0x27);
     886:	87 e2       	ldi	r24, 0x27	; 39
     888:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    lcd_set_char(')');
     88c:	89 e2       	ldi	r24, 0x29	; 41
     88e:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
}
     892:	08 95       	ret

00000894 <kuwa>:

void kuwa(void){
    lcd_set_char('(');
     894:	88 e2       	ldi	r24, 0x28	; 40
     896:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    lcd_set_char(0xdf);
     89a:	8f ed       	ldi	r24, 0xDF	; 223
     89c:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    lcd_set_char(0x07); // "Д"
     8a0:	87 e0       	ldi	r24, 0x07	; 7
     8a2:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    lcd_set_char(0xdf);
     8a6:	8f ed       	ldi	r24, 0xDF	; 223
     8a8:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    lcd_set_char(')');
     8ac:	89 e2       	ldi	r24, 0x29	; 41
     8ae:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
}
     8b2:	08 95       	ret

000008b4 <SoftSPI_Init>:
unsigned char RS;
unsigned char DATA;

void SoftSPI_Init(void){
    /*MOSI,SCK=出力、他は入力に設定 */
    DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RCK);
     8b4:	84 b1       	in	r24, 0x04	; 4
     8b6:	87 60       	ori	r24, 0x07	; 7
     8b8:	84 b9       	out	0x04, r24	; 4
}
     8ba:	08 95       	ret

000008bc <SoftSPI_TX>:

void SoftSPI_TX(unsigned char cData){
     8bc:	27 e0       	ldi	r18, 0x07	; 7
     8be:	30 e0       	ldi	r19, 0x00	; 0
    unsigned int n;
    for(n=0;n<8;n++){
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
     8c0:	90 e0       	ldi	r25, 0x00	; 0
}

void SoftSPI_TX(unsigned char cData){
    unsigned int n;
    for(n=0;n<8;n++){
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
     8c2:	29 98       	cbi	0x05, 1	; 5
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
     8c4:	28 98       	cbi	0x05, 0	; 5
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
     8c6:	65 b1       	in	r22, 0x05	; 5
     8c8:	ac 01       	movw	r20, r24
     8ca:	02 2e       	mov	r0, r18
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <SoftSPI_TX+0x16>
     8ce:	55 95       	asr	r21
     8d0:	47 95       	ror	r20
     8d2:	0a 94       	dec	r0
     8d4:	e2 f7       	brpl	.-8      	; 0x8ce <SoftSPI_TX+0x12>
     8d6:	41 70       	andi	r20, 0x01	; 1
     8d8:	46 2b       	or	r20, r22
     8da:	45 b9       	out	0x05, r20	; 5
        PORT_SPI |= (1<<DD_SCK);                // Set SCK "H"
     8dc:	29 9a       	sbi	0x05, 1	; 5
     8de:	21 50       	subi	r18, 0x01	; 1
     8e0:	30 40       	sbci	r19, 0x00	; 0
    DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RCK);
}

void SoftSPI_TX(unsigned char cData){
    unsigned int n;
    for(n=0;n<8;n++){
     8e2:	4f ef       	ldi	r20, 0xFF	; 255
     8e4:	2f 3f       	cpi	r18, 0xFF	; 255
     8e6:	34 07       	cpc	r19, r20
     8e8:	61 f7       	brne	.-40     	; 0x8c2 <SoftSPI_TX+0x6>
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
        PORT_SPI |= (1<<DD_SCK);                // Set SCK "H"
    }
}
     8ea:	08 95       	ret

000008ec <send_bits_595>:

void send_bits_595(unsigned char RS, unsigned char E, unsigned char DATA){
    unsigned char bits;
    bits = 0x3f & ( (RS<<5)|(E<<4)|DATA );
     8ec:	82 95       	swap	r24
     8ee:	88 0f       	add	r24, r24
     8f0:	80 7e       	andi	r24, 0xE0	; 224
     8f2:	84 2b       	or	r24, r20
     8f4:	62 95       	swap	r22
     8f6:	60 7f       	andi	r22, 0xF0	; 240
     8f8:	68 2b       	or	r22, r24
    SoftSPI_TX(bits);
     8fa:	86 2f       	mov	r24, r22
     8fc:	8f 73       	andi	r24, 0x3F	; 63
     8fe:	0e 94 5e 04 	call	0x8bc	; 0x8bc <SoftSPI_TX>
    PORT_SPI &= ~(1<<DD_RCK);   // Set RCK "L"
     902:	2a 98       	cbi	0x05, 2	; 5
    PORT_SPI |=  (1<<DD_RCK);   // Set RCK "H"
     904:	2a 9a       	sbi	0x05, 2	; 5
    PORT_SPI &= ~(1<<DD_RCK);   // Set RCK "L"
     906:	2a 98       	cbi	0x05, 2	; 5
}
     908:	08 95       	ret

0000090a <lcd_set_4bit>:

// fuction for sending control bitpattern
void lcd_set_4bit(unsigned char bitpattern){
	DATA    =   0x0f & bitpattern; // set sending data
     90a:	48 2f       	mov	r20, r24
     90c:	4f 70       	andi	r20, 0x0F	; 15
     90e:	40 93 85 01 	sts	0x0185, r20
	E       =   0;
     912:	10 92 86 01 	sts	0x0186, r1
    send_bits_595(RS,E,DATA);
     916:	80 91 87 01 	lds	r24, 0x0187
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	0e 94 76 04 	call	0x8ec	; 0x8ec <send_bits_595>
	E       =   1;
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	80 93 86 01 	sts	0x0186, r24
    send_bits_595(RS,E,DATA);
     926:	80 91 87 01 	lds	r24, 0x0187
     92a:	61 e0       	ldi	r22, 0x01	; 1
     92c:	40 91 85 01 	lds	r20, 0x0185
     930:	0e 94 76 04 	call	0x8ec	; 0x8ec <send_bits_595>
	E       =   0;
     934:	10 92 86 01 	sts	0x0186, r1
    send_bits_595(RS,E,DATA);
     938:	80 91 87 01 	lds	r24, 0x0187
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	40 91 85 01 	lds	r20, 0x0185
     942:	0e 94 76 04 	call	0x8ec	; 0x8ec <send_bits_595>
}
     946:	08 95       	ret

00000948 <lcd_init>:

// Initializing LCD
void lcd_init(void){

	// set enable "0"
    E       = 0;
     948:	10 92 86 01 	sts	0x0186, r1
    // set instruction input mode
	RS      = 0;
     94c:	10 92 87 01 	sts	0x0187, r1
	// initialize data port
	DATA	= 0x00;
     950:	10 92 85 01 	sts	0x0185, r1
    send_bits_595(RS,E,DATA);
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	0e 94 76 04 	call	0x8ec	; 0x8ec <send_bits_595>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     95e:	8f ef       	ldi	r24, 0xFF	; 255
     960:	99 ef       	ldi	r25, 0xF9	; 249
     962:	a0 e0       	ldi	r26, 0x00	; 0
     964:	81 50       	subi	r24, 0x01	; 1
     966:	90 40       	sbci	r25, 0x00	; 0
     968:	a0 40       	sbci	r26, 0x00	; 0
     96a:	e1 f7       	brne	.-8      	; 0x964 <lcd_init+0x1c>
     96c:	00 c0       	rjmp	.+0      	; 0x96e <lcd_init+0x26>
     96e:	00 00       	nop
    
	// wait more than 15ms
	_delay_ms(20);

	// set 8-bit mode
	lcd_set_4bit(0x03);
     970:	83 e0       	ldi	r24, 0x03	; 3
     972:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_set_4bit>
     976:	af e1       	ldi	r26, 0x1F	; 31
     978:	be e4       	ldi	r27, 0x4E	; 78
     97a:	11 97       	sbiw	r26, 0x01	; 1
     97c:	f1 f7       	brne	.-4      	; 0x97a <lcd_init+0x32>
     97e:	00 c0       	rjmp	.+0      	; 0x980 <lcd_init+0x38>
     980:	00 00       	nop
	_delay_ms(5);
	lcd_set_4bit(0x03);
     982:	83 e0       	ldi	r24, 0x03	; 3
     984:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_set_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     988:	87 eb       	ldi	r24, 0xB7	; 183
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	f1 f7       	brne	.-4      	; 0x98c <lcd_init+0x44>
     990:	00 c0       	rjmp	.+0      	; 0x992 <lcd_init+0x4a>
     992:	00 00       	nop
	_delay_us(110);
	lcd_set_4bit(0x03);
     994:	83 e0       	ldi	r24, 0x03	; 3
     996:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_set_4bit>
     99a:	a7 ec       	ldi	r26, 0xC7	; 199
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	11 97       	sbiw	r26, 0x01	; 1
     9a0:	f1 f7       	brne	.-4      	; 0x99e <lcd_init+0x56>
     9a2:	00 c0       	rjmp	.+0      	; 0x9a4 <lcd_init+0x5c>
     9a4:	00 00       	nop
	_delay_us(50);
	
	// set 4-bit mode
	lcd_set_4bit(0x02);
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_set_4bit>
     9ac:	87 ec       	ldi	r24, 0xC7	; 199
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	f1 f7       	brne	.-4      	; 0x9b0 <lcd_init+0x68>
     9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <lcd_init+0x6e>
     9b6:	00 00       	nop
	_delay_us(50);

	// function setting
	lcd_set_4bit(0x02);
     9b8:	82 e0       	ldi	r24, 0x02	; 2
     9ba:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_set_4bit>
	lcd_set_4bit(0x08);
     9be:	88 e0       	ldi	r24, 0x08	; 8
     9c0:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_set_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9c4:	af e9       	ldi	r26, 0x9F	; 159
     9c6:	bf e0       	ldi	r27, 0x0F	; 15
     9c8:	11 97       	sbiw	r26, 0x01	; 1
     9ca:	f1 f7       	brne	.-4      	; 0x9c8 <lcd_init+0x80>
     9cc:	00 c0       	rjmp	.+0      	; 0x9ce <lcd_init+0x86>
     9ce:	00 00       	nop
	_delay_ms(1);

	// set display on, cursol off and blink off
	lcd_set_4bit(0x00);
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_set_4bit>
	lcd_set_4bit(0x0c);
     9d6:	8c e0       	ldi	r24, 0x0C	; 12
     9d8:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_set_4bit>
     9dc:	8f e9       	ldi	r24, 0x9F	; 159
     9de:	9f e0       	ldi	r25, 0x0F	; 15
     9e0:	01 97       	sbiw	r24, 0x01	; 1
     9e2:	f1 f7       	brne	.-4      	; 0x9e0 <lcd_init+0x98>
     9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <lcd_init+0x9e>
     9e6:	00 00       	nop
	_delay_ms(1);

	// set entry mode (cursol direction : right, disable shift)
	lcd_set_4bit(0x00);
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_set_4bit>
	lcd_set_4bit(0x06);
     9ee:	86 e0       	ldi	r24, 0x06	; 6
     9f0:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_set_4bit>
     9f4:	af e9       	ldi	r26, 0x9F	; 159
     9f6:	bf e0       	ldi	r27, 0x0F	; 15
     9f8:	11 97       	sbiw	r26, 0x01	; 1
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <lcd_init+0xb0>
     9fc:	00 c0       	rjmp	.+0      	; 0x9fe <lcd_init+0xb6>
     9fe:	00 00       	nop
	_delay_ms(1);

	// clear display
	lcd_set_4bit(0x00);
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_set_4bit>
	lcd_set_4bit(0x01);
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_set_4bit>
     a0c:	8f e3       	ldi	r24, 0x3F	; 63
     a0e:	9f e1       	ldi	r25, 0x1F	; 31
     a10:	01 97       	sbiw	r24, 0x01	; 1
     a12:	f1 f7       	brne	.-4      	; 0xa10 <lcd_init+0xc8>
     a14:	00 c0       	rjmp	.+0      	; 0xa16 <lcd_init+0xce>
     a16:	00 00       	nop
	_delay_ms(2);

	// clear cursol position
	lcd_set_4bit(0x00);
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_set_4bit>
	lcd_set_4bit(0x02);
     a1e:	82 e0       	ldi	r24, 0x02	; 2
     a20:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_set_4bit>
     a24:	af e3       	ldi	r26, 0x3F	; 63
     a26:	bf e1       	ldi	r27, 0x1F	; 31
     a28:	11 97       	sbiw	r26, 0x01	; 1
     a2a:	f1 f7       	brne	.-4      	; 0xa28 <lcd_init+0xe0>
     a2c:	00 c0       	rjmp	.+0      	; 0xa2e <lcd_init+0xe6>
     a2e:	00 00       	nop
	_delay_ms(2);

	// set data input mode
    RS      =   1;
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	80 93 87 01 	sts	0x0187, r24
}
     a36:	08 95       	ret

00000a38 <lcd_set_char>:
    RS      =   1;
}

// LCD character (1 byte) sending
void lcd_set_char(unsigned char c)
{
     a38:	cf 93       	push	r28
     a3a:	c8 2f       	mov	r28, r24
	lcd_set_4bit(c >> 4); // Upper Bit
     a3c:	82 95       	swap	r24
     a3e:	8f 70       	andi	r24, 0x0F	; 15
     a40:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_set_4bit>
	lcd_set_4bit(0x0f & c); // Lower Bit
     a44:	8c 2f       	mov	r24, r28
     a46:	8f 70       	andi	r24, 0x0F	; 15
     a48:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_set_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a4c:	87 ec       	ldi	r24, 0xC7	; 199
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	01 97       	sbiw	r24, 0x01	; 1
     a52:	f1 f7       	brne	.-4      	; 0xa50 <lcd_set_char+0x18>
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <lcd_set_char+0x1e>
     a56:	00 00       	nop
	_delay_us(50);
}
     a58:	cf 91       	pop	r28
     a5a:	08 95       	ret

00000a5c <lcd_locate>:

// LCD character allocation
void lcd_locate(unsigned char row, unsigned char col)
{
	// set instruction input mode
    RS      =   0;
     a5c:	10 92 87 01 	sts	0x0187, r1
//	lcd_set_char(0x80 | col | (0x40 * row) );
	lcd_set_char(0x80 | ( col + 20*(unsigned int)(row/2) ) | ( 0x40 * (row%2) ) );
     a60:	98 2f       	mov	r25, r24
     a62:	91 70       	andi	r25, 0x01	; 1
     a64:	92 95       	swap	r25
     a66:	99 0f       	add	r25, r25
     a68:	99 0f       	add	r25, r25
     a6a:	90 7c       	andi	r25, 0xC0	; 192
     a6c:	90 68       	ori	r25, 0x80	; 128
     a6e:	86 95       	lsr	r24
     a70:	24 e1       	ldi	r18, 0x14	; 20
     a72:	82 9f       	mul	r24, r18
     a74:	80 2d       	mov	r24, r0
     a76:	11 24       	eor	r1, r1
     a78:	86 0f       	add	r24, r22
     a7a:	89 2b       	or	r24, r25
     a7c:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
	// set data input mode
    RS      =   1;
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	80 93 87 01 	sts	0x0187, r24
}
     a86:	08 95       	ret

00000a88 <lcd_set_str>:
	_delay_us(50);
}

// LCD String Sending
void lcd_set_str(unsigned char *s)
{
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	ec 01       	movw	r28, r24
	while (*s != 0) {
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <lcd_set_str+0xc>
		lcd_set_char(*s);
     a90:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
}

// LCD String Sending
void lcd_set_str(unsigned char *s)
{
	while (*s != 0) {
     a94:	89 91       	ld	r24, Y+
     a96:	88 23       	and	r24, r24
     a98:	d9 f7       	brne	.-10     	; 0xa90 <lcd_set_str+0x8>
		lcd_set_char(*s);
		s++;
	} 
}
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	08 95       	ret

00000aa0 <lcd_set_numeric>:

// Display numeric on LCD display
void lcd_set_numeric(float num, unsigned int Nint, unsigned int Nfrac, unsigned int sign){
     aa0:	2f 92       	push	r2
     aa2:	3f 92       	push	r3
     aa4:	4f 92       	push	r4
     aa6:	5f 92       	push	r5
     aa8:	6f 92       	push	r6
     aaa:	7f 92       	push	r7
     aac:	8f 92       	push	r8
     aae:	9f 92       	push	r9
     ab0:	af 92       	push	r10
     ab2:	bf 92       	push	r11
     ab4:	cf 92       	push	r12
     ab6:	df 92       	push	r13
     ab8:	ef 92       	push	r14
     aba:	ff 92       	push	r15
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
     ac8:	28 97       	sbiw	r28, 0x08	; 8
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	cd bf       	out	0x3d, r28	; 61
     ad4:	6b 01       	movw	r12, r22
     ad6:	7c 01       	movw	r14, r24
     ad8:	1a 01       	movw	r2, r20
     ada:	29 01       	movw	r4, r18
    unsigned long int DivFactor = 1;
	unsigned int n, m;
	unsigned int d[10];
    unsigned int valid = 0;
    
    for(n=0;n<Nfrac;n++){
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	4c 01       	movw	r8, r24
     ae2:	0f c0       	rjmp	.+30     	; 0xb02 <lcd_set_numeric+0x62>
        num = num * 10;
     ae4:	c7 01       	movw	r24, r14
     ae6:	b6 01       	movw	r22, r12
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	40 e2       	ldi	r20, 0x20	; 32
     aee:	51 e4       	ldi	r21, 0x41	; 65
     af0:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
     af4:	c6 2e       	mov	r12, r22
     af6:	d7 2e       	mov	r13, r23
     af8:	e8 2e       	mov	r14, r24
     afa:	f9 2e       	mov	r15, r25
    unsigned long int DivFactor = 1;
	unsigned int n, m;
	unsigned int d[10];
    unsigned int valid = 0;
    
    for(n=0;n<Nfrac;n++){
     afc:	08 94       	sec
     afe:	81 1c       	adc	r8, r1
     b00:	91 1c       	adc	r9, r1
     b02:	84 14       	cp	r8, r4
     b04:	95 04       	cpc	r9, r5
     b06:	71 f7       	brne	.-36     	; 0xae4 <lcd_set_numeric+0x44>
        num = num * 10;
    }
    
    // Detect sign
    if( sign == 1){
     b08:	01 30       	cpi	r16, 0x01	; 1
     b0a:	11 05       	cpc	r17, r1
     b0c:	81 f4       	brne	.+32     	; 0xb2e <lcd_set_numeric+0x8e>
        if( num < 0 ){
     b0e:	c7 01       	movw	r24, r14
     b10:	b6 01       	movw	r22, r12
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	a9 01       	movw	r20, r18
     b18:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__cmpsf2>
     b1c:	87 ff       	sbrs	r24, 7
     b1e:	1b c0       	rjmp	.+54     	; 0xb56 <lcd_set_numeric+0xb6>
            lcd_set_char('-');
     b20:	8d e2       	ldi	r24, 0x2D	; 45
     b22:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
            num = -num;
     b26:	f7 fa       	bst	r15, 7
     b28:	f0 94       	com	r15
     b2a:	f7 f8       	bld	r15, 7
     b2c:	f0 94       	com	r15
        for(m=n+1;m<Nint+Nfrac;m++){
            DivFactor = DivFactor * 10;
        }
        
        d[n] = (unsigned int)( num / DivFactor );
        if( (valid == 0) && ( d[n]!=0 || n==Nint-1) ) valid = 1;
     b2e:	00 e0       	ldi	r16, 0x00	; 0
     b30:	10 e0       	ldi	r17, 0x00	; 0
     b32:	66 24       	eor	r6, r6
     b34:	77 24       	eor	r7, r7
            lcd_set_char('+');
        }
    }
    // end of
				
    for(n=0;n<=Nint+Nfrac-1;n++){
     b36:	92 01       	movw	r18, r4
     b38:	22 0d       	add	r18, r2
     b3a:	33 1d       	adc	r19, r3
     b3c:	3a 83       	std	Y+2, r19	; 0x02
     b3e:	29 83       	std	Y+1, r18	; 0x01
     b40:	21 50       	subi	r18, 0x01	; 1
     b42:	30 40       	sbci	r19, 0x00	; 0
     b44:	3c 83       	std	Y+4, r19	; 0x04
     b46:	2b 83       	std	Y+3, r18	; 0x03
        for(m=n+1;m<Nint+Nfrac;m++){
            DivFactor = DivFactor * 10;
        }
        
        d[n] = (unsigned int)( num / DivFactor );
        if( (valid == 0) && ( d[n]!=0 || n==Nint-1) ) valid = 1;
     b48:	c1 01       	movw	r24, r2
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	9e 83       	std	Y+6, r25	; 0x06
     b4e:	8d 83       	std	Y+5, r24	; 0x05
     b50:	78 86       	std	Y+8, r7	; 0x08
     b52:	6f 82       	std	Y+7, r6	; 0x07
     b54:	6e c0       	rjmp	.+220    	; 0xc32 <lcd_set_numeric+0x192>
    if( sign == 1){
        if( num < 0 ){
            lcd_set_char('-');
            num = -num;
        }else{
            lcd_set_char('+');
     b56:	8b e2       	ldi	r24, 0x2B	; 43
     b58:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
     b5c:	e8 cf       	rjmp	.-48     	; 0xb2e <lcd_set_numeric+0x8e>
    }
    // end of
				
    for(n=0;n<=Nint+Nfrac-1;n++){
        
        if( ( n== Nint ) && ( Nfrac!=0 )){
     b5e:	02 15       	cp	r16, r2
     b60:	13 05       	cpc	r17, r3
     b62:	31 f4       	brne	.+12     	; 0xb70 <lcd_set_numeric+0xd0>
     b64:	41 14       	cp	r4, r1
     b66:	51 04       	cpc	r5, r1
     b68:	19 f0       	breq	.+6      	; 0xb70 <lcd_set_numeric+0xd0>
            lcd_set_char('.');
     b6a:	8e e2       	ldi	r24, 0x2E	; 46
     b6c:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
        }
        
        DivFactor = 1;
        for(m=n+1;m<Nint+Nfrac;m++){
     b70:	38 01       	movw	r6, r16
        
        if( ( n== Nint ) && ( Nfrac!=0 )){
            lcd_set_char('.');
        }
        
        DivFactor = 1;
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	88 2e       	mov	r8, r24
     b76:	91 2c       	mov	r9, r1
     b78:	a1 2c       	mov	r10, r1
     b7a:	b1 2c       	mov	r11, r1
     b7c:	c5 01       	movw	r24, r10
     b7e:	b4 01       	movw	r22, r8
        for(m=n+1;m<Nint+Nfrac;m++){
     b80:	06 c0       	rjmp	.+12     	; 0xb8e <lcd_set_numeric+0xee>
            DivFactor = DivFactor * 10;
     b82:	2a e0       	ldi	r18, 0x0A	; 10
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__mulsi3>
     b8e:	08 94       	sec
     b90:	61 1c       	adc	r6, r1
     b92:	71 1c       	adc	r7, r1
        if( ( n== Nint ) && ( Nfrac!=0 )){
            lcd_set_char('.');
        }
        
        DivFactor = 1;
        for(m=n+1;m<Nint+Nfrac;m++){
     b94:	e9 81       	ldd	r30, Y+1	; 0x01
     b96:	fa 81       	ldd	r31, Y+2	; 0x02
     b98:	6e 16       	cp	r6, r30
     b9a:	7f 06       	cpc	r7, r31
     b9c:	90 f3       	brcs	.-28     	; 0xb82 <lcd_set_numeric+0xe2>
     b9e:	4b 01       	movw	r8, r22
     ba0:	5c 01       	movw	r10, r24
            DivFactor = DivFactor * 10;
        }
        
        d[n] = (unsigned int)( num / DivFactor );
     ba2:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__floatunsisf>
     ba6:	9b 01       	movw	r18, r22
     ba8:	ac 01       	movw	r20, r24
     baa:	c7 01       	movw	r24, r14
     bac:	b6 01       	movw	r22, r12
     bae:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__divsf3>
     bb2:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <__fixunssfsi>
     bb6:	dc 01       	movw	r26, r24
     bb8:	cb 01       	movw	r24, r22
     bba:	3c 01       	movw	r6, r24
        if( (valid == 0) && ( d[n]!=0 || n==Nint-1) ) valid = 1;
     bbc:	2f 81       	ldd	r18, Y+7	; 0x07
     bbe:	38 85       	ldd	r19, Y+8	; 0x08
     bc0:	21 15       	cp	r18, r1
     bc2:	31 05       	cpc	r19, r1
     bc4:	79 f4       	brne	.+30     	; 0xbe4 <lcd_set_numeric+0x144>
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	98 87       	std	Y+8, r25	; 0x08
     bcc:	8f 83       	std	Y+7, r24	; 0x07
     bce:	61 14       	cp	r6, r1
     bd0:	71 04       	cpc	r7, r1
     bd2:	61 f4       	brne	.+24     	; 0xbec <lcd_set_numeric+0x14c>
     bd4:	ed 81       	ldd	r30, Y+5	; 0x05
     bd6:	fe 81       	ldd	r31, Y+6	; 0x06
     bd8:	0e 17       	cp	r16, r30
     bda:	1f 07       	cpc	r17, r31
     bdc:	39 f0       	breq	.+14     	; 0xbec <lcd_set_numeric+0x14c>
     bde:	18 86       	std	Y+8, r1	; 0x08
     be0:	1f 82       	std	Y+7, r1	; 0x07
     be2:	04 c0       	rjmp	.+8      	; 0xbec <lcd_set_numeric+0x14c>
     be4:	21 e0       	ldi	r18, 0x01	; 1
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	38 87       	std	Y+8, r19	; 0x08
     bea:	2f 83       	std	Y+7, r18	; 0x07
        num = num - d[n]*DivFactor;
     bec:	b3 01       	movw	r22, r6
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	a5 01       	movw	r20, r10
     bf4:	94 01       	movw	r18, r8
     bf6:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__mulsi3>
     bfa:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__floatunsisf>
     bfe:	9b 01       	movw	r18, r22
     c00:	ac 01       	movw	r20, r24
     c02:	c7 01       	movw	r24, r14
     c04:	b6 01       	movw	r22, r12
     c06:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__subsf3>
     c0a:	6b 01       	movw	r12, r22
     c0c:	e8 2e       	mov	r14, r24
     c0e:	f9 2e       	mov	r15, r25
        
        if( (valid == 1)|(n == (Nint+Nfrac-1)) ) lcd_set_char(0x30 + d[n]);
     c10:	ef 81       	ldd	r30, Y+7	; 0x07
     c12:	f8 85       	ldd	r31, Y+8	; 0x08
     c14:	30 97       	sbiw	r30, 0x00	; 0
     c16:	29 f4       	brne	.+10     	; 0xc22 <lcd_set_numeric+0x182>
     c18:	2b 81       	ldd	r18, Y+3	; 0x03
     c1a:	3c 81       	ldd	r19, Y+4	; 0x04
     c1c:	02 17       	cp	r16, r18
     c1e:	13 07       	cpc	r17, r19
     c20:	19 f4       	brne	.+6      	; 0xc28 <lcd_set_numeric+0x188>
     c22:	86 2d       	mov	r24, r6
     c24:	80 5d       	subi	r24, 0xD0	; 208
     c26:	01 c0       	rjmp	.+2      	; 0xc2a <lcd_set_numeric+0x18a>
        else if( valid == 0 )                   lcd_set_char(0x20);
     c28:	80 e2       	ldi	r24, 0x20	; 32
     c2a:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
     c2e:	0f 5f       	subi	r16, 0xFF	; 255
     c30:	1f 4f       	sbci	r17, 0xFF	; 255
            lcd_set_char('+');
        }
    }
    // end of
				
    for(n=0;n<=Nint+Nfrac-1;n++){
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	80 17       	cp	r24, r16
     c38:	91 07       	cpc	r25, r17
     c3a:	08 f0       	brcs	.+2      	; 0xc3e <lcd_set_numeric+0x19e>
     c3c:	90 cf       	rjmp	.-224    	; 0xb5e <lcd_set_numeric+0xbe>
        
        if( (valid == 1)|(n == (Nint+Nfrac-1)) ) lcd_set_char(0x30 + d[n]);
        else if( valid == 0 )                   lcd_set_char(0x20);
        else                                    lcd_set_char(0xff);
    }
}
     c3e:	28 96       	adiw	r28, 0x08	; 8
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	1f 91       	pop	r17
     c50:	0f 91       	pop	r16
     c52:	ff 90       	pop	r15
     c54:	ef 90       	pop	r14
     c56:	df 90       	pop	r13
     c58:	cf 90       	pop	r12
     c5a:	bf 90       	pop	r11
     c5c:	af 90       	pop	r10
     c5e:	9f 90       	pop	r9
     c60:	8f 90       	pop	r8
     c62:	7f 90       	pop	r7
     c64:	6f 90       	pop	r6
     c66:	5f 90       	pop	r5
     c68:	4f 90       	pop	r4
     c6a:	3f 90       	pop	r3
     c6c:	2f 90       	pop	r2
     c6e:	08 95       	ret

00000c70 <lcd_clear>:

// Clear LCD
void lcd_clear(void){
	// clear display
    RS      =   0;
     c70:	10 92 87 01 	sts	0x0187, r1
	lcd_set_4bit(0x00);
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_set_4bit>
	lcd_set_4bit(0x01);
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	0e 94 85 04 	call	0x90a	; 0x90a <lcd_set_4bit>
     c80:	85 e3       	ldi	r24, 0x35	; 53
     c82:	8a 95       	dec	r24
     c84:	f1 f7       	brne	.-4      	; 0xc82 <lcd_clear+0x12>
     c86:	00 00       	nop
    _delay_us(10);
//    _delay_ms(1);
    RS      =   1;
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	80 93 87 01 	sts	0x0187, r24
	lcd_locate(0,0);
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_locate>
}
     c96:	08 95       	ret

00000c98 <lcd_set_CGRAMaddr>:

// Set CGRAM address
void lcd_set_CGRAMaddr(unsigned char code,unsigned char addr)
{
	// set instruction input mode
    RS      =   0;
     c98:	10 92 87 01 	sts	0x0187, r1
    lcd_set_char(0x40 | code<<3 | addr );
     c9c:	60 64       	ori	r22, 0x40	; 64
     c9e:	88 0f       	add	r24, r24
     ca0:	88 0f       	add	r24, r24
     ca2:	88 0f       	add	r24, r24
     ca4:	86 2b       	or	r24, r22
     ca6:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
	// set data input mode
    RS      =   1;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	80 93 87 01 	sts	0x0187, r24
}
     cb0:	08 95       	ret

00000cb2 <SoftSPI_LED_Init>:
unsigned char RS;
unsigned char DATA;

void SoftSPI_LED_Init(void){
    /*MOSI,SCK=出力、他は入力に設定 */
    DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RCK);
     cb2:	84 b1       	in	r24, 0x04	; 4
     cb4:	88 63       	ori	r24, 0x38	; 56
     cb6:	84 b9       	out	0x04, r24	; 4
}
     cb8:	08 95       	ret

00000cba <SoftSPI_LED_TX>:

void SoftSPI_LED_TX(unsigned char cData){
     cba:	27 e0       	ldi	r18, 0x07	; 7
     cbc:	30 e0       	ldi	r19, 0x00	; 0
    unsigned int n;
    for(n=0;n<8;n++){
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
     cbe:	90 e0       	ldi	r25, 0x00	; 0
}

void SoftSPI_LED_TX(unsigned char cData){
    unsigned int n;
    for(n=0;n<8;n++){
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
     cc0:	2c 98       	cbi	0x05, 4	; 5
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
     cc2:	2b 98       	cbi	0x05, 3	; 5
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
     cc4:	65 b1       	in	r22, 0x05	; 5
     cc6:	ac 01       	movw	r20, r24
     cc8:	02 2e       	mov	r0, r18
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <SoftSPI_LED_TX+0x16>
     ccc:	55 95       	asr	r21
     cce:	47 95       	ror	r20
     cd0:	0a 94       	dec	r0
     cd2:	e2 f7       	brpl	.-8      	; 0xccc <SoftSPI_LED_TX+0x12>
     cd4:	41 70       	andi	r20, 0x01	; 1
     cd6:	50 70       	andi	r21, 0x00	; 0
     cd8:	73 e0       	ldi	r23, 0x03	; 3
     cda:	44 0f       	add	r20, r20
     cdc:	55 1f       	adc	r21, r21
     cde:	7a 95       	dec	r23
     ce0:	e1 f7       	brne	.-8      	; 0xcda <SoftSPI_LED_TX+0x20>
     ce2:	64 2b       	or	r22, r20
     ce4:	65 b9       	out	0x05, r22	; 5
        PORT_SPI |= (1<<DD_SCK);                // Set SCK "H"
     ce6:	2c 9a       	sbi	0x05, 4	; 5
     ce8:	21 50       	subi	r18, 0x01	; 1
     cea:	30 40       	sbci	r19, 0x00	; 0
    DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RCK);
}

void SoftSPI_LED_TX(unsigned char cData){
    unsigned int n;
    for(n=0;n<8;n++){
     cec:	4f ef       	ldi	r20, 0xFF	; 255
     cee:	2f 3f       	cpi	r18, 0xFF	; 255
     cf0:	34 07       	cpc	r19, r20
     cf2:	31 f7       	brne	.-52     	; 0xcc0 <SoftSPI_LED_TX+0x6>
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
        PORT_SPI |= (1<<DD_SCK);                // Set SCK "H"
    }
}
     cf4:	08 95       	ret

00000cf6 <send_bits_595_LED>:

void send_bits_595_LED(unsigned char DATA){
    unsigned char bits;
    bits = DATA;
    SoftSPI_LED_TX(bits);
     cf6:	0e 94 5d 06 	call	0xcba	; 0xcba <SoftSPI_LED_TX>
    PORT_SPI &= ~(1<<DD_RCK);   // Set RCK "L"
     cfa:	2d 98       	cbi	0x05, 5	; 5
    PORT_SPI |=  (1<<DD_RCK);   // Set RCK "H"
     cfc:	2d 9a       	sbi	0x05, 5	; 5
    PORT_SPI &= ~(1<<DD_RCK);   // Set RCK "L"
     cfe:	2d 98       	cbi	0x05, 5	; 5
}
     d00:	08 95       	ret

00000d02 <set_initial_t_id>:
};

// Measure Tarfet ID Declarations
uint8_t     t_id[Ndata];
void set_initial_t_id(void){
    t_id[0] = 6;
     d02:	86 e0       	ldi	r24, 0x06	; 6
     d04:	80 93 88 01 	sts	0x0188, r24
    t_id[1] = 5;
     d08:	85 e0       	ldi	r24, 0x05	; 5
     d0a:	80 93 89 01 	sts	0x0189, r24
    t_id[2] = 3;
     d0e:	83 e0       	ldi	r24, 0x03	; 3
     d10:	80 93 8a 01 	sts	0x018A, r24
    t_id[3] = 0;
     d14:	10 92 8b 01 	sts	0x018B, r1
}
     d18:	08 95       	ret

00000d1a <__vector_default>:
uint16_t   Ndiv2;
uint8_t    USART_index;
uint8_t    USART_data_index = 0xff; // do not initialize to "0"

// Bad ISR interrput detector for debugging
ISR(BADISR_vect){
     d1a:	1f 92       	push	r1
     d1c:	0f 92       	push	r0
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	0f 92       	push	r0
     d22:	11 24       	eor	r1, r1
    cli();    // disable interrupt
     d24:	f8 94       	cli
    lcd_locate(0,0);
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_locate>
    lcd_set_str("BADISR ERROR");
     d2e:	84 e0       	ldi	r24, 0x04	; 4
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	0e 94 44 05 	call	0xa88	; 0xa88 <lcd_set_str>
     d36:	ff cf       	rjmp	.-2      	; 0xd36 <__vector_default+0x1c>

00000d38 <timer0_init>:


// 8-bit timer intialazation for PWM FuelPump Driver
void timer0_init(void) {
    // Fast PWM operation
    TCCR0A  = 0b00100011;	// Timer/Counter0 Control Register A
     d38:	83 e2       	ldi	r24, 0x23	; 35
     d3a:	84 bd       	out	0x24, r24	; 36
    TCCR0B  = 0b00001010;	// Timer/Counter0 Control Register B
     d3c:	8a e0       	ldi	r24, 0x0A	; 10
     d3e:	85 bd       	out	0x25, r24	; 37
    TIMSK0  = 0b00000000;   // ovfl interrupt is enabled for delay timer
     d40:	10 92 6e 00 	sts	0x006E, r1
    TCNT0   = 0x00;         // Initialize 8-bit counter bit
     d44:	16 bc       	out	0x26, r1	; 38
    OCR0A   = 0xff;         // Top value for Fuel Pump driver PWM
     d46:	8f ef       	ldi	r24, 0xFF	; 255
     d48:	87 bd       	out	0x27, r24	; 39
    OCR0B   = 0xff;         // Compare value for Fuel Pump driver PWM
     d4a:	88 bd       	out	0x28, r24	; 40

    switch( TCCR0B & 0b00000111 ){
     d4c:	85 b5       	in	r24, 0x25	; 37
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	87 70       	andi	r24, 0x07	; 7
     d52:	90 70       	andi	r25, 0x00	; 0
     d54:	83 30       	cpi	r24, 0x03	; 3
     d56:	91 05       	cpc	r25, r1
     d58:	a1 f0       	breq	.+40     	; 0xd82 <timer0_init+0x4a>
     d5a:	84 30       	cpi	r24, 0x04	; 4
     d5c:	91 05       	cpc	r25, r1
     d5e:	3c f4       	brge	.+14     	; 0xd6e <timer0_init+0x36>
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	91 05       	cpc	r25, r1
     d64:	c9 f0       	breq	.+50     	; 0xd98 <timer0_init+0x60>
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	91 05       	cpc	r25, r1
     d6a:	a1 f4       	brne	.+40     	; 0xd94 <timer0_init+0x5c>
     d6c:	07 c0       	rjmp	.+14     	; 0xd7c <timer0_init+0x44>
     d6e:	84 30       	cpi	r24, 0x04	; 4
     d70:	91 05       	cpc	r25, r1
     d72:	51 f0       	breq	.+20     	; 0xd88 <timer0_init+0x50>
     d74:	85 30       	cpi	r24, 0x05	; 5
     d76:	91 05       	cpc	r25, r1
     d78:	69 f4       	brne	.+26     	; 0xd94 <timer0_init+0x5c>
     d7a:	09 c0       	rjmp	.+18     	; 0xd8e <timer0_init+0x56>
        case 0b001 :
            Ndiv0 = 1;
            break;
        case 0b010 :
            Ndiv0 = 8;
     d7c:	88 e0       	ldi	r24, 0x08	; 8
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	0b c0       	rjmp	.+22     	; 0xd98 <timer0_init+0x60>
            break;
        case 0b011 :
            Ndiv0 = 64;
     d82:	80 e4       	ldi	r24, 0x40	; 64
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	08 c0       	rjmp	.+16     	; 0xd98 <timer0_init+0x60>
            break;
        case 0b100 :
            Ndiv0 = 256;
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	05 c0       	rjmp	.+10     	; 0xd98 <timer0_init+0x60>
            break;
        case 0b101 :
            Ndiv0 = 1024;
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	94 e0       	ldi	r25, 0x04	; 4
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <timer0_init+0x60>
            break;
        default :
            Ndiv0 = 1;
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	90 93 8d 01 	sts	0x018D, r25
     d9c:	80 93 8c 01 	sts	0x018C, r24
     da0:	08 95       	ret

00000da2 <timer1_init>:
    
}

// 16-bit Counter intialazation for Tacho Meter
void timer1_init(void) {
	TCCR1A  = 0b00000000;	// Timer/Counter1 Control Register A
     da2:	10 92 80 00 	sts	0x0080, r1
	TCCR1B  = 0b00000011;	// Timer/Counter1 Control Register B
     da6:	83 e0       	ldi	r24, 0x03	; 3
     da8:	80 93 81 00 	sts	0x0081, r24
	TCCR1C  = 0b00000000;
     dac:	10 92 82 00 	sts	0x0082, r1
	TIMSK1  = 0b00000001;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	80 93 6f 00 	sts	0x006F, r24
	TCNT1   = 0x0000;         // Initialize 16-bit counter bit
     db6:	10 92 85 00 	sts	0x0085, r1
     dba:	10 92 84 00 	sts	0x0084, r1
	OCR1A   = 0xffff;         // 16-bit register for compare
     dbe:	8f ef       	ldi	r24, 0xFF	; 255
     dc0:	9f ef       	ldi	r25, 0xFF	; 255
     dc2:	90 93 89 00 	sts	0x0089, r25
     dc6:	80 93 88 00 	sts	0x0088, r24

    switch( TCCR1B & 0b00000111 ){
     dca:	80 91 81 00 	lds	r24, 0x0081
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	87 70       	andi	r24, 0x07	; 7
     dd2:	90 70       	andi	r25, 0x00	; 0
     dd4:	83 30       	cpi	r24, 0x03	; 3
     dd6:	91 05       	cpc	r25, r1
     dd8:	a1 f0       	breq	.+40     	; 0xe02 <timer1_init+0x60>
     dda:	84 30       	cpi	r24, 0x04	; 4
     ddc:	91 05       	cpc	r25, r1
     dde:	3c f4       	brge	.+14     	; 0xdee <timer1_init+0x4c>
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	91 05       	cpc	r25, r1
     de4:	c9 f0       	breq	.+50     	; 0xe18 <timer1_init+0x76>
     de6:	82 30       	cpi	r24, 0x02	; 2
     de8:	91 05       	cpc	r25, r1
     dea:	a1 f4       	brne	.+40     	; 0xe14 <timer1_init+0x72>
     dec:	07 c0       	rjmp	.+14     	; 0xdfc <timer1_init+0x5a>
     dee:	84 30       	cpi	r24, 0x04	; 4
     df0:	91 05       	cpc	r25, r1
     df2:	51 f0       	breq	.+20     	; 0xe08 <timer1_init+0x66>
     df4:	85 30       	cpi	r24, 0x05	; 5
     df6:	91 05       	cpc	r25, r1
     df8:	69 f4       	brne	.+26     	; 0xe14 <timer1_init+0x72>
     dfa:	09 c0       	rjmp	.+18     	; 0xe0e <timer1_init+0x6c>
        case 0b001 :
            Ndiv1 = 1;
            break;
        case 0b010 :
            Ndiv1 = 8;
     dfc:	88 e0       	ldi	r24, 0x08	; 8
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0b c0       	rjmp	.+22     	; 0xe18 <timer1_init+0x76>
            break;
        case 0b011 :
            Ndiv1 = 64;
     e02:	80 e4       	ldi	r24, 0x40	; 64
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	08 c0       	rjmp	.+16     	; 0xe18 <timer1_init+0x76>
            break;
        case 0b100 :
            Ndiv1 = 256;
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <timer1_init+0x76>
            break;
        case 0b101 :
            Ndiv1 = 1024;
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	94 e0       	ldi	r25, 0x04	; 4
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <timer1_init+0x76>
            break;
        default :
            Ndiv1 = 1;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	90 93 90 01 	sts	0x0190, r25
     e1c:	80 93 8f 01 	sts	0x018F, r24
     e20:	08 95       	ret

00000e22 <timer2_init>:
    
}

// 8-bit timer intialazation for Timing Control, LEDarray duty
void timer2_init(void) {
    TCCR2A  = 0b00000000;	// Timer/Counter2 Control Register A
     e22:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B  = 0b00000111;	// Timer/Counter2 Control Register B
     e26:	87 e0       	ldi	r24, 0x07	; 7
     e28:	80 93 b1 00 	sts	0x00B1, r24
    TIMSK2  = 0b00000011;   // ovfl interrupt is enabled for delay timer
     e2c:	83 e0       	ldi	r24, 0x03	; 3
     e2e:	80 93 70 00 	sts	0x0070, r24
    TCNT2   = 0x00;         // Initialize 8-bit counter bit
     e32:	10 92 b2 00 	sts	0x00B2, r1
    OCR2A   = 8;
     e36:	88 e0       	ldi	r24, 0x08	; 8
     e38:	80 93 b3 00 	sts	0x00B3, r24
    
    switch( TCCR2B & 0b00000111 ){
     e3c:	80 91 b1 00 	lds	r24, 0x00B1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	87 70       	andi	r24, 0x07	; 7
     e44:	90 70       	andi	r25, 0x00	; 0
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	91 05       	cpc	r25, r1
     e4a:	e9 f0       	breq	.+58     	; 0xe86 <timer2_init+0x64>
     e4c:	85 30       	cpi	r24, 0x05	; 5
     e4e:	91 05       	cpc	r25, r1
     e50:	54 f4       	brge	.+20     	; 0xe66 <timer2_init+0x44>
     e52:	82 30       	cpi	r24, 0x02	; 2
     e54:	91 05       	cpc	r25, r1
     e56:	89 f0       	breq	.+34     	; 0xe7a <timer2_init+0x58>
     e58:	83 30       	cpi	r24, 0x03	; 3
     e5a:	91 05       	cpc	r25, r1
     e5c:	8c f4       	brge	.+34     	; 0xe80 <timer2_init+0x5e>
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	91 05       	cpc	r25, r1
     e62:	e9 f4       	brne	.+58     	; 0xe9e <timer2_init+0x7c>
     e64:	1e c0       	rjmp	.+60     	; 0xea2 <timer2_init+0x80>
     e66:	86 30       	cpi	r24, 0x06	; 6
     e68:	91 05       	cpc	r25, r1
     e6a:	99 f0       	breq	.+38     	; 0xe92 <timer2_init+0x70>
     e6c:	86 30       	cpi	r24, 0x06	; 6
     e6e:	91 05       	cpc	r25, r1
     e70:	6c f0       	brlt	.+26     	; 0xe8c <timer2_init+0x6a>
     e72:	87 30       	cpi	r24, 0x07	; 7
     e74:	91 05       	cpc	r25, r1
     e76:	99 f4       	brne	.+38     	; 0xe9e <timer2_init+0x7c>
     e78:	0f c0       	rjmp	.+30     	; 0xe98 <timer2_init+0x76>
        case 0b001 :
            Ndiv2 = 1;
            break;
        case 0b010 :
            Ndiv2 = 8;
     e7a:	88 e0       	ldi	r24, 0x08	; 8
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	11 c0       	rjmp	.+34     	; 0xea2 <timer2_init+0x80>
            break;
        case 0b011 :
            Ndiv2 = 32;
     e80:	80 e2       	ldi	r24, 0x20	; 32
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e c0       	rjmp	.+28     	; 0xea2 <timer2_init+0x80>
            break;
        case 0b100 :
            Ndiv2 = 64;
     e86:	80 e4       	ldi	r24, 0x40	; 64
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0b c0       	rjmp	.+22     	; 0xea2 <timer2_init+0x80>
            break;
        case 0b101 :
            Ndiv2 = 128;
     e8c:	80 e8       	ldi	r24, 0x80	; 128
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	08 c0       	rjmp	.+16     	; 0xea2 <timer2_init+0x80>
            break;
        case 0b110 :
            Ndiv2 = 256;
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	05 c0       	rjmp	.+10     	; 0xea2 <timer2_init+0x80>
            break;
        case 0b111 :
            Ndiv2 = 1024;
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	94 e0       	ldi	r25, 0x04	; 4
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <timer2_init+0x80>
            break;
        default :
            Ndiv2 = 1;
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	90 93 a4 01 	sts	0x01A4, r25
     ea6:	80 93 a3 01 	sts	0x01A3, r24
     eaa:	08 95       	ret

00000eac <__vector_18>:
            break;
    }
    
}

ISR(USART_RX_vect){
     eac:	1f 92       	push	r1
     eae:	0f 92       	push	r0
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	0f 92       	push	r0
     eb4:	11 24       	eor	r1, r1
     eb6:	2f 93       	push	r18
     eb8:	3f 93       	push	r19
     eba:	4f 93       	push	r20
     ebc:	5f 93       	push	r21
     ebe:	6f 93       	push	r22
     ec0:	7f 93       	push	r23
     ec2:	8f 93       	push	r24
     ec4:	9f 93       	push	r25
     ec6:	af 93       	push	r26
     ec8:	bf 93       	push	r27
     eca:	ef 93       	push	r30
     ecc:	ff 93       	push	r31
    uint8_t    usart_data;
    uint8_t    index;
    
    usart_data = USART_receive(); // Synchronize & Detect receiver ID
     ece:	0e 94 e6 09 	call	0x13cc	; 0x13cc <USART_receive>
    
    if( (usart_data & 0xf0) == 0x00){ // received data is ID ?
     ed2:	98 2f       	mov	r25, r24
     ed4:	90 7f       	andi	r25, 0xF0	; 240
     ed6:	91 f4       	brne	.+36     	; 0xefc <__vector_18+0x50>
     ed8:	a8 e8       	ldi	r26, 0x88	; 136
     eda:	b1 e0       	ldi	r27, 0x01	; 1
        // Is it display target ID ?
        for(index=0;index<Ndata;index++){
            if ( usart_data == RxID[t_id[index]] ){
     edc:	ed 91       	ld	r30, X+
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	e3 5d       	subi	r30, 0xD3	; 211
     ee2:	fe 4f       	sbci	r31, 0xFE	; 254
     ee4:	20 81       	ld	r18, Z
     ee6:	82 17       	cp	r24, r18
     ee8:	29 f4       	brne	.+10     	; 0xef4 <__vector_18+0x48>
                USART_index = index;
     eea:	90 93 8e 01 	sts	0x018E, r25
                USART_data_index = 0;
     eee:	10 92 2b 01 	sts	0x012B, r1
                break;
     ef2:	23 c0       	rjmp	.+70     	; 0xf3a <__vector_18+0x8e>
    
    usart_data = USART_receive(); // Synchronize & Detect receiver ID
    
    if( (usart_data & 0xf0) == 0x00){ // received data is ID ?
        // Is it display target ID ?
        for(index=0;index<Ndata;index++){
     ef4:	9f 5f       	subi	r25, 0xFF	; 255
     ef6:	94 30       	cpi	r25, 0x04	; 4
     ef8:	89 f7       	brne	.-30     	; 0xedc <__vector_18+0x30>
     efa:	1f c0       	rjmp	.+62     	; 0xf3a <__vector_18+0x8e>
                USART_data_index = 0;
                break;
            }
        }
        
    }else if( USART_data_index < 4 ){ // capture meter data
     efc:	90 91 2b 01 	lds	r25, 0x012B
     f00:	94 30       	cpi	r25, 0x04	; 4
     f02:	d8 f4       	brcc	.+54     	; 0xf3a <__vector_18+0x8e>
        data[USART_index][USART_data_index] = usart_data;
     f04:	20 91 8e 01 	lds	r18, 0x018E
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	f9 01       	movw	r30, r18
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	ee 0f       	add	r30, r30
     f12:	ff 1f       	adc	r31, r31
     f14:	e9 0f       	add	r30, r25
     f16:	f1 1d       	adc	r31, r1
     f18:	ed 56       	subi	r30, 0x6D	; 109
     f1a:	fe 4f       	sbci	r31, 0xFE	; 254
     f1c:	80 83       	st	Z, r24
        if( USART_data_index == 3 ){
     f1e:	93 30       	cpi	r25, 0x03	; 3
     f20:	49 f4       	brne	.+18     	; 0xf34 <__vector_18+0x88>
            data_updated[USART_index] = 1;
     f22:	24 55       	subi	r18, 0x54	; 84
     f24:	3e 4f       	sbci	r19, 0xFE	; 254
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	f9 01       	movw	r30, r18
     f2a:	80 83       	st	Z, r24
            USART_data_index = 0xff;
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
     f2e:	80 93 2b 01 	sts	0x012B, r24
     f32:	03 c0       	rjmp	.+6      	; 0xf3a <__vector_18+0x8e>
        }else{
            USART_data_index++;
     f34:	9f 5f       	subi	r25, 0xFF	; 255
     f36:	90 93 2b 01 	sts	0x012B, r25
        }
        
    }
    
}
     f3a:	ff 91       	pop	r31
     f3c:	ef 91       	pop	r30
     f3e:	bf 91       	pop	r27
     f40:	af 91       	pop	r26
     f42:	9f 91       	pop	r25
     f44:	8f 91       	pop	r24
     f46:	7f 91       	pop	r23
     f48:	6f 91       	pop	r22
     f4a:	5f 91       	pop	r21
     f4c:	4f 91       	pop	r20
     f4e:	3f 91       	pop	r19
     f50:	2f 91       	pop	r18
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f 90       	pop	r0
     f58:	1f 90       	pop	r1
     f5a:	18 95       	reti

00000f5c <__vector_9>:


// 8-bit Timer2 overflow
ISR(TIMER2_OVF_vect){
     f5c:	1f 92       	push	r1
     f5e:	0f 92       	push	r0
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	0f 92       	push	r0
     f64:	11 24       	eor	r1, r1
     f66:	2f 93       	push	r18
     f68:	3f 93       	push	r19
     f6a:	4f 93       	push	r20
     f6c:	5f 93       	push	r21
     f6e:	6f 93       	push	r22
     f70:	7f 93       	push	r23
     f72:	8f 93       	push	r24
     f74:	9f 93       	push	r25
     f76:	af 93       	push	r26
     f78:	bf 93       	push	r27
     f7a:	ef 93       	push	r30
     f7c:	ff 93       	push	r31
    // increment counter for display update
    timer2_cnt++;
     f7e:	80 91 b0 01 	lds	r24, 0x01B0
     f82:	90 91 b1 01 	lds	r25, 0x01B1
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	90 93 b1 01 	sts	0x01B1, r25
     f8c:	80 93 b0 01 	sts	0x01B0, r24
    
    // ADC
    ADCSRA |= _BV(ADSC);
     f90:	ea e7       	ldi	r30, 0x7A	; 122
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	80 64       	ori	r24, 0x40	; 64
     f98:	80 83       	st	Z, r24
    
    // LED array : display
    LEDarray((unsigned int)rpm);
     f9a:	80 91 59 01 	lds	r24, 0x0159
     f9e:	90 91 5a 01 	lds	r25, 0x015A
     fa2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LEDarray>
}
     fa6:	ff 91       	pop	r31
     fa8:	ef 91       	pop	r30
     faa:	bf 91       	pop	r27
     fac:	af 91       	pop	r26
     fae:	9f 91       	pop	r25
     fb0:	8f 91       	pop	r24
     fb2:	7f 91       	pop	r23
     fb4:	6f 91       	pop	r22
     fb6:	5f 91       	pop	r21
     fb8:	4f 91       	pop	r20
     fba:	3f 91       	pop	r19
     fbc:	2f 91       	pop	r18
     fbe:	0f 90       	pop	r0
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	0f 90       	pop	r0
     fc4:	1f 90       	pop	r1
     fc6:	18 95       	reti

00000fc8 <__vector_7>:

// 8-bit Timer2 overflow
ISR(TIMER2_COMPA_vect){
     fc8:	1f 92       	push	r1
     fca:	0f 92       	push	r0
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	0f 92       	push	r0
     fd0:	11 24       	eor	r1, r1
     fd2:	2f 93       	push	r18
     fd4:	3f 93       	push	r19
     fd6:	4f 93       	push	r20
     fd8:	5f 93       	push	r21
     fda:	6f 93       	push	r22
     fdc:	7f 93       	push	r23
     fde:	8f 93       	push	r24
     fe0:	9f 93       	push	r25
     fe2:	af 93       	push	r26
     fe4:	bf 93       	push	r27
     fe6:	ef 93       	push	r30
     fe8:	ff 93       	push	r31
    // LED array : off
    send_bits_595_LED(0x00);
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <send_bits_595_LED>
}
     ff0:	ff 91       	pop	r31
     ff2:	ef 91       	pop	r30
     ff4:	bf 91       	pop	r27
     ff6:	af 91       	pop	r26
     ff8:	9f 91       	pop	r25
     ffa:	8f 91       	pop	r24
     ffc:	7f 91       	pop	r23
     ffe:	6f 91       	pop	r22
    1000:	5f 91       	pop	r21
    1002:	4f 91       	pop	r20
    1004:	3f 91       	pop	r19
    1006:	2f 91       	pop	r18
    1008:	0f 90       	pop	r0
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	0f 90       	pop	r0
    100e:	1f 90       	pop	r1
    1010:	18 95       	reti

00001012 <StrLength>:

// Count character length
int StrLength(const char *s){
    uint8_t n = 0;
    while (*s++ != '\0')
    1012:	fc 01       	movw	r30, r24
    // LED array : off
    send_bits_595_LED(0x00);
}

// Count character length
int StrLength(const char *s){
    1014:	9e 2f       	mov	r25, r30
    1016:	98 1b       	sub	r25, r24
    uint8_t n = 0;
    while (*s++ != '\0')
    1018:	21 91       	ld	r18, Z+
    101a:	22 23       	and	r18, r18
    101c:	d9 f7       	brne	.-10     	; 0x1014 <StrLength+0x2>
        n++;
    return (n);
}
    101e:	89 2f       	mov	r24, r25
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	08 95       	ret

00001024 <__vector_2>:

// FP Maximum Drive Mode
uint8_t         FP_maxmode = 0;         // Fuel Pump Maximum Drive Mode Flag
ISR(INT1_vect){
    1024:	1f 92       	push	r1
    1026:	0f 92       	push	r0
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	0f 92       	push	r0
    102c:	11 24       	eor	r1, r1
    102e:	8f 93       	push	r24
    1030:	9f 93       	push	r25
    1032:	af 93       	push	r26
    1034:	bf 93       	push	r27
    if( FP_maxmode == 0){
    1036:	80 91 56 01 	lds	r24, 0x0156
    103a:	88 23       	and	r24, r24
    103c:	21 f4       	brne	.+8      	; 0x1046 <__vector_2+0x22>
        FP_maxmode = 1;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	80 93 56 01 	sts	0x0156, r24
    1044:	02 c0       	rjmp	.+4      	; 0x104a <__vector_2+0x26>
    }else{
        FP_maxmode = 0;
    1046:	10 92 56 01 	sts	0x0156, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    104a:	8f ef       	ldi	r24, 0xFF	; 255
    104c:	90 e7       	ldi	r25, 0x70	; 112
    104e:	a2 e0       	ldi	r26, 0x02	; 2
    1050:	81 50       	subi	r24, 0x01	; 1
    1052:	90 40       	sbci	r25, 0x00	; 0
    1054:	a0 40       	sbci	r26, 0x00	; 0
    1056:	e1 f7       	brne	.-8      	; 0x1050 <__vector_2+0x2c>
    1058:	00 c0       	rjmp	.+0      	; 0x105a <__vector_2+0x36>
    105a:	00 00       	nop
    }
    _delay_ms(50);
}
    105c:	bf 91       	pop	r27
    105e:	af 91       	pop	r26
    1060:	9f 91       	pop	r25
    1062:	8f 91       	pop	r24
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0
    106a:	1f 90       	pop	r1
    106c:	18 95       	reti

0000106e <DisplayItemInfo>:
// Display
void DisplayItemInfo(void){
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	a1 97       	sbiw	r28, 0x21	; 33
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	08 e8       	ldi	r16, 0x88	; 136
    1088:	11 e0       	ldi	r17, 0x01	; 1
    108a:	20 e0       	ldi	r18, 0x00	; 0
    int k=0;
    char char_buffer[32];
    for(k=0;k<Ndata;k++){
        lcd_locate(k,0);
    108c:	82 2f       	mov	r24, r18
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	29 a3       	lds	r18, 0x59
    1092:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_locate>
        strcpy_P( char_buffer, (char *)pgm_read_byte(&(RxName[t_id[k]])) );
    1096:	d8 01       	movw	r26, r16
    1098:	ed 91       	ld	r30, X+
    109a:	8d 01       	movw	r16, r26
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	ee 0f       	add	r30, r30
    10a0:	ff 1f       	adc	r31, r31
    10a2:	e3 55       	subi	r30, 0x53	; 83
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	64 91       	lpm	r22, Z
    10a8:	ce 01       	movw	r24, r28
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <strcpy_P>
        lcd_set_str((char *)char_buffer);    }
    10b2:	ce 01       	movw	r24, r28
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	0e 94 44 05 	call	0xa88	; 0xa88 <lcd_set_str>
    10ba:	29 a1       	lds	r18, 0x49
    10bc:	2f 5f       	subi	r18, 0xFF	; 255
}
// Display
void DisplayItemInfo(void){
    int k=0;
    char char_buffer[32];
    for(k=0;k<Ndata;k++){
    10be:	24 30       	cpi	r18, 0x04	; 4
    10c0:	29 f7       	brne	.-54     	; 0x108c <DisplayItemInfo+0x1e>
        lcd_locate(k,0);
        strcpy_P( char_buffer, (char *)pgm_read_byte(&(RxName[t_id[k]])) );
        lcd_set_str((char *)char_buffer);    }
    
}
    10c2:	a1 96       	adiw	r28, 0x21	; 33
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	08 95       	ret

000010d8 <tictoc_init>:

double              unit_time_us;
unsigned long int   start_cnt;
unsigned long int   end_cnt;

void tictoc_init(unsigned int fosc_MHz, unsigned int Ndiv){
    10d8:	cf 92       	push	r12
    10da:	df 92       	push	r13
    10dc:	ef 92       	push	r14
    10de:	ff 92       	push	r15
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	ec 01       	movw	r28, r24
    
    unit_time_us = Ndiv / ( 1.0*fosc_MHz );
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__floatunsisf>
    10ee:	6b 01       	movw	r12, r22
    10f0:	7c 01       	movw	r14, r24
    10f2:	be 01       	movw	r22, r28
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__floatunsisf>
    10fc:	9b 01       	movw	r18, r22
    10fe:	ac 01       	movw	r20, r24
    1100:	c7 01       	movw	r24, r14
    1102:	b6 01       	movw	r22, r12
    1104:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__divsf3>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	80 93 ba 01 	sts	0x01BA, r24
    1110:	90 93 bb 01 	sts	0x01BB, r25
    1114:	a0 93 bc 01 	sts	0x01BC, r26
    1118:	b0 93 bd 01 	sts	0x01BD, r27
    
}
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	df 90       	pop	r13
    1126:	cf 90       	pop	r12
    1128:	08 95       	ret

0000112a <tic>:

void tic(){
    
    start_cnt = TCNT1;
    112a:	80 91 84 00 	lds	r24, 0x0084
    112e:	90 91 85 00 	lds	r25, 0x0085
    1132:	a0 e0       	ldi	r26, 0x00	; 0
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	80 93 b2 01 	sts	0x01B2, r24
    113a:	90 93 b3 01 	sts	0x01B3, r25
    113e:	a0 93 b4 01 	sts	0x01B4, r26
    1142:	b0 93 b5 01 	sts	0x01B5, r27
    
}
    1146:	08 95       	ret

00001148 <toc>:

unsigned long int toc(){
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    
    unsigned long int time_us;
    
    end_cnt = TCNT1;
    114c:	80 91 84 00 	lds	r24, 0x0084
    1150:	90 91 85 00 	lds	r25, 0x0085
    1154:	a0 e0       	ldi	r26, 0x00	; 0
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	80 93 b6 01 	sts	0x01B6, r24
    115c:	90 93 b7 01 	sts	0x01B7, r25
    1160:	a0 93 b8 01 	sts	0x01B8, r26
    1164:	b0 93 b9 01 	sts	0x01B9, r27
    if( start_cnt < end_cnt ){
    1168:	00 91 b2 01 	lds	r16, 0x01B2
    116c:	10 91 b3 01 	lds	r17, 0x01B3
    1170:	20 91 b4 01 	lds	r18, 0x01B4
    1174:	30 91 b5 01 	lds	r19, 0x01B5
    1178:	ac 01       	movw	r20, r24
    117a:	bd 01       	movw	r22, r26
    117c:	40 1b       	sub	r20, r16
    117e:	51 0b       	sbc	r21, r17
    1180:	62 0b       	sbc	r22, r18
    1182:	73 0b       	sbc	r23, r19
    1184:	08 17       	cp	r16, r24
    1186:	19 07       	cpc	r17, r25
    1188:	2a 07       	cpc	r18, r26
    118a:	3b 07       	cpc	r19, r27
    118c:	20 f4       	brcc	.+8      	; 0x1196 <toc+0x4e>
        time_us = ( ( 0x10000 + end_cnt ) - start_cnt ) * unit_time_us;
    118e:	40 50       	subi	r20, 0x00	; 0
    1190:	50 40       	sbci	r21, 0x00	; 0
    1192:	6f 4f       	sbci	r22, 0xFF	; 255
    1194:	7f 4f       	sbci	r23, 0xFF	; 255
    }else{
        time_us = ( end_cnt - start_cnt ) * unit_time_us;
    1196:	cb 01       	movw	r24, r22
    1198:	ba 01       	movw	r22, r20
    119a:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__floatunsisf>
    119e:	20 91 ba 01 	lds	r18, 0x01BA
    11a2:	30 91 bb 01 	lds	r19, 0x01BB
    11a6:	40 91 bc 01 	lds	r20, 0x01BC
    11aa:	50 91 bd 01 	lds	r21, 0x01BD
    11ae:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
    11b2:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <__fixunssfsi>
    }
    return time_us;
    
}
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	08 95       	ret

000011bc <USARTinit>:
#define UBRR FOSC/16/BAUD-1 
*/

// USART initialize
void USARTinit(unsigned int ubrr){
	UBRR0H = (unsigned char)(ubrr>>8);
    11bc:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
    11c0:	80 93 c4 00 	sts	0x00C4, r24
								//   '000' : 5bit
								//   '001' : 6bit
								//   '010' : 7bit
								//   '011' : 8bit
	unsigned int U2X = 0;		// Over clocking operation
	UCSR0B = (RCIE<<7)|(TCIE<<6)|(TRIE<<5)|(RE<<4)|(TE<<3)|((Nb>>2)<<2);
    11c4:	88 e9       	ldi	r24, 0x98	; 152
    11c6:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (Mode<<6)|(Pari<<4)|(STPB<<3)|(Nb<<1)|(CLKE);
    11ca:	86 e2       	ldi	r24, 0x26	; 38
    11cc:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0A = U2X<<1;
    11d0:	10 92 c0 00 	sts	0x00C0, r1
}
    11d4:	08 95       	ret

000011d6 <USART_transmit>:

// USART transmit
void USART_transmit(unsigned char data){
	while(!(USART_STATUS & (1<<UDRE0)));	// Wait until tx buffer is empty
    11d6:	90 91 c0 00 	lds	r25, 0x00C0
    11da:	95 ff       	sbrs	r25, 5
    11dc:	fc cf       	rjmp	.-8      	; 0x11d6 <USART_transmit>
	UDR0 = data;
    11de:	80 93 c6 00 	sts	0x00C6, r24
}
    11e2:	08 95       	ret

000011e4 <USART_transmit_str>:

void USART_transmit_str(unsigned char *s){
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	ec 01       	movw	r28, r24
    while (*s != 0) {
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <USART_transmit_str+0xc>
        USART_transmit(*s);
    11ec:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <USART_transmit>
	while(!(USART_STATUS & (1<<UDRE0)));	// Wait until tx buffer is empty
	UDR0 = data;
}

void USART_transmit_str(unsigned char *s){
    while (*s != 0) {
    11f0:	89 91       	ld	r24, Y+
    11f2:	88 23       	and	r24, r24
    11f4:	d9 f7       	brne	.-10     	; 0x11ec <USART_transmit_str+0x8>
        USART_transmit(*s);
        s++;
    } 
}
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	08 95       	ret

000011fc <USART_transmit_numeric>:

void USART_transmit_numeric(float num, unsigned int Nint, unsigned int Nfrac, unsigned int sign){
    11fc:	2f 92       	push	r2
    11fe:	3f 92       	push	r3
    1200:	4f 92       	push	r4
    1202:	5f 92       	push	r5
    1204:	6f 92       	push	r6
    1206:	7f 92       	push	r7
    1208:	8f 92       	push	r8
    120a:	9f 92       	push	r9
    120c:	af 92       	push	r10
    120e:	bf 92       	push	r11
    1210:	cf 92       	push	r12
    1212:	df 92       	push	r13
    1214:	ef 92       	push	r14
    1216:	ff 92       	push	r15
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	28 97       	sbiw	r28, 0x08	; 8
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	6b 01       	movw	r12, r22
    1232:	7c 01       	movw	r14, r24
    1234:	1a 01       	movw	r2, r20
    1236:	29 01       	movw	r4, r18
    unsigned long int DivFactor = 1;
    unsigned int n, m;
    unsigned int d[10];
    unsigned int valid = 0;
    
    for(n=0;n<Nfrac;n++){
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	4c 01       	movw	r8, r24
    123e:	0f c0       	rjmp	.+30     	; 0x125e <USART_transmit_numeric+0x62>
        num = num * 10;
    1240:	c7 01       	movw	r24, r14
    1242:	b6 01       	movw	r22, r12
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e2       	ldi	r20, 0x20	; 32
    124a:	51 e4       	ldi	r21, 0x41	; 65
    124c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
    1250:	c6 2e       	mov	r12, r22
    1252:	d7 2e       	mov	r13, r23
    1254:	e8 2e       	mov	r14, r24
    1256:	f9 2e       	mov	r15, r25
    unsigned long int DivFactor = 1;
    unsigned int n, m;
    unsigned int d[10];
    unsigned int valid = 0;
    
    for(n=0;n<Nfrac;n++){
    1258:	08 94       	sec
    125a:	81 1c       	adc	r8, r1
    125c:	91 1c       	adc	r9, r1
    125e:	84 14       	cp	r8, r4
    1260:	95 04       	cpc	r9, r5
    1262:	71 f7       	brne	.-36     	; 0x1240 <USART_transmit_numeric+0x44>
        num = num * 10;
    }
    
    // Detect sign
    if( sign == 1){
    1264:	01 30       	cpi	r16, 0x01	; 1
    1266:	11 05       	cpc	r17, r1
    1268:	81 f4       	brne	.+32     	; 0x128a <USART_transmit_numeric+0x8e>
        if( num < 0 ){
    126a:	c7 01       	movw	r24, r14
    126c:	b6 01       	movw	r22, r12
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	a9 01       	movw	r20, r18
    1274:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__cmpsf2>
    1278:	87 ff       	sbrs	r24, 7
    127a:	1b c0       	rjmp	.+54     	; 0x12b2 <USART_transmit_numeric+0xb6>
            USART_transmit('-');
    127c:	8d e2       	ldi	r24, 0x2D	; 45
    127e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <USART_transmit>
            num = -num;
    1282:	f7 fa       	bst	r15, 7
    1284:	f0 94       	com	r15
    1286:	f7 f8       	bld	r15, 7
    1288:	f0 94       	com	r15
        for(m=n+1;m<Nint+Nfrac;m++){
            DivFactor = DivFactor * 10;
        }
        
        d[n] = (unsigned int)( num / DivFactor );
        if( (valid == 0) && ( d[n]!=0 || n==Nint-1) ) valid = 1;
    128a:	00 e0       	ldi	r16, 0x00	; 0
    128c:	10 e0       	ldi	r17, 0x00	; 0
    128e:	66 24       	eor	r6, r6
    1290:	77 24       	eor	r7, r7
            USART_transmit('+');
        }
    }
    // end of
				
    for(n=0;n<=Nint+Nfrac-1;n++){
    1292:	92 01       	movw	r18, r4
    1294:	22 0d       	add	r18, r2
    1296:	33 1d       	adc	r19, r3
    1298:	3a 83       	std	Y+2, r19	; 0x02
    129a:	29 83       	std	Y+1, r18	; 0x01
    129c:	21 50       	subi	r18, 0x01	; 1
    129e:	30 40       	sbci	r19, 0x00	; 0
    12a0:	3c 83       	std	Y+4, r19	; 0x04
    12a2:	2b 83       	std	Y+3, r18	; 0x03
        for(m=n+1;m<Nint+Nfrac;m++){
            DivFactor = DivFactor * 10;
        }
        
        d[n] = (unsigned int)( num / DivFactor );
        if( (valid == 0) && ( d[n]!=0 || n==Nint-1) ) valid = 1;
    12a4:	c1 01       	movw	r24, r2
    12a6:	01 97       	sbiw	r24, 0x01	; 1
    12a8:	9e 83       	std	Y+6, r25	; 0x06
    12aa:	8d 83       	std	Y+5, r24	; 0x05
    12ac:	78 86       	std	Y+8, r7	; 0x08
    12ae:	6f 82       	std	Y+7, r6	; 0x07
    12b0:	6e c0       	rjmp	.+220    	; 0x138e <USART_transmit_numeric+0x192>
    if( sign == 1){
        if( num < 0 ){
            USART_transmit('-');
            num = -num;
        }else{
            USART_transmit('+');
    12b2:	8b e2       	ldi	r24, 0x2B	; 43
    12b4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <USART_transmit>
    12b8:	e8 cf       	rjmp	.-48     	; 0x128a <USART_transmit_numeric+0x8e>
    }
    // end of
				
    for(n=0;n<=Nint+Nfrac-1;n++){
        
        if( ( n== Nint ) && ( Nfrac!=0 )){
    12ba:	02 15       	cp	r16, r2
    12bc:	13 05       	cpc	r17, r3
    12be:	31 f4       	brne	.+12     	; 0x12cc <USART_transmit_numeric+0xd0>
    12c0:	41 14       	cp	r4, r1
    12c2:	51 04       	cpc	r5, r1
    12c4:	19 f0       	breq	.+6      	; 0x12cc <USART_transmit_numeric+0xd0>
            USART_transmit('.');
    12c6:	8e e2       	ldi	r24, 0x2E	; 46
    12c8:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <USART_transmit>
        }
        
        DivFactor = 1;
        for(m=n+1;m<Nint+Nfrac;m++){
    12cc:	38 01       	movw	r6, r16
        
        if( ( n== Nint ) && ( Nfrac!=0 )){
            USART_transmit('.');
        }
        
        DivFactor = 1;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	88 2e       	mov	r8, r24
    12d2:	91 2c       	mov	r9, r1
    12d4:	a1 2c       	mov	r10, r1
    12d6:	b1 2c       	mov	r11, r1
    12d8:	c5 01       	movw	r24, r10
    12da:	b4 01       	movw	r22, r8
        for(m=n+1;m<Nint+Nfrac;m++){
    12dc:	06 c0       	rjmp	.+12     	; 0x12ea <USART_transmit_numeric+0xee>
            DivFactor = DivFactor * 10;
    12de:	2a e0       	ldi	r18, 0x0A	; 10
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__mulsi3>
    12ea:	08 94       	sec
    12ec:	61 1c       	adc	r6, r1
    12ee:	71 1c       	adc	r7, r1
        if( ( n== Nint ) && ( Nfrac!=0 )){
            USART_transmit('.');
        }
        
        DivFactor = 1;
        for(m=n+1;m<Nint+Nfrac;m++){
    12f0:	e9 81       	ldd	r30, Y+1	; 0x01
    12f2:	fa 81       	ldd	r31, Y+2	; 0x02
    12f4:	6e 16       	cp	r6, r30
    12f6:	7f 06       	cpc	r7, r31
    12f8:	90 f3       	brcs	.-28     	; 0x12de <USART_transmit_numeric+0xe2>
    12fa:	4b 01       	movw	r8, r22
    12fc:	5c 01       	movw	r10, r24
            DivFactor = DivFactor * 10;
        }
        
        d[n] = (unsigned int)( num / DivFactor );
    12fe:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__floatunsisf>
    1302:	9b 01       	movw	r18, r22
    1304:	ac 01       	movw	r20, r24
    1306:	c7 01       	movw	r24, r14
    1308:	b6 01       	movw	r22, r12
    130a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__divsf3>
    130e:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <__fixunssfsi>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	3c 01       	movw	r6, r24
        if( (valid == 0) && ( d[n]!=0 || n==Nint-1) ) valid = 1;
    1318:	2f 81       	ldd	r18, Y+7	; 0x07
    131a:	38 85       	ldd	r19, Y+8	; 0x08
    131c:	21 15       	cp	r18, r1
    131e:	31 05       	cpc	r19, r1
    1320:	79 f4       	brne	.+30     	; 0x1340 <USART_transmit_numeric+0x144>
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	98 87       	std	Y+8, r25	; 0x08
    1328:	8f 83       	std	Y+7, r24	; 0x07
    132a:	61 14       	cp	r6, r1
    132c:	71 04       	cpc	r7, r1
    132e:	61 f4       	brne	.+24     	; 0x1348 <USART_transmit_numeric+0x14c>
    1330:	ed 81       	ldd	r30, Y+5	; 0x05
    1332:	fe 81       	ldd	r31, Y+6	; 0x06
    1334:	0e 17       	cp	r16, r30
    1336:	1f 07       	cpc	r17, r31
    1338:	39 f0       	breq	.+14     	; 0x1348 <USART_transmit_numeric+0x14c>
    133a:	18 86       	std	Y+8, r1	; 0x08
    133c:	1f 82       	std	Y+7, r1	; 0x07
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <USART_transmit_numeric+0x14c>
    1340:	21 e0       	ldi	r18, 0x01	; 1
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	38 87       	std	Y+8, r19	; 0x08
    1346:	2f 83       	std	Y+7, r18	; 0x07
        num = num - d[n]*DivFactor;
    1348:	b3 01       	movw	r22, r6
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	a5 01       	movw	r20, r10
    1350:	94 01       	movw	r18, r8
    1352:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__mulsi3>
    1356:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__floatunsisf>
    135a:	9b 01       	movw	r18, r22
    135c:	ac 01       	movw	r20, r24
    135e:	c7 01       	movw	r24, r14
    1360:	b6 01       	movw	r22, r12
    1362:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__subsf3>
    1366:	6b 01       	movw	r12, r22
    1368:	e8 2e       	mov	r14, r24
    136a:	f9 2e       	mov	r15, r25
        
        if( (valid == 1)|(n == (Nint+Nfrac-1)) ) USART_transmit(0x30 + d[n]);
    136c:	ef 81       	ldd	r30, Y+7	; 0x07
    136e:	f8 85       	ldd	r31, Y+8	; 0x08
    1370:	30 97       	sbiw	r30, 0x00	; 0
    1372:	29 f4       	brne	.+10     	; 0x137e <USART_transmit_numeric+0x182>
    1374:	2b 81       	ldd	r18, Y+3	; 0x03
    1376:	3c 81       	ldd	r19, Y+4	; 0x04
    1378:	02 17       	cp	r16, r18
    137a:	13 07       	cpc	r17, r19
    137c:	19 f4       	brne	.+6      	; 0x1384 <USART_transmit_numeric+0x188>
    137e:	86 2d       	mov	r24, r6
    1380:	80 5d       	subi	r24, 0xD0	; 208
    1382:	01 c0       	rjmp	.+2      	; 0x1386 <USART_transmit_numeric+0x18a>
        else if( valid == 0 )                   USART_transmit(0x20);
    1384:	80 e2       	ldi	r24, 0x20	; 32
    1386:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <USART_transmit>
    138a:	0f 5f       	subi	r16, 0xFF	; 255
    138c:	1f 4f       	sbci	r17, 0xFF	; 255
            USART_transmit('+');
        }
    }
    // end of
				
    for(n=0;n<=Nint+Nfrac-1;n++){
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	80 17       	cp	r24, r16
    1394:	91 07       	cpc	r25, r17
    1396:	08 f0       	brcs	.+2      	; 0x139a <USART_transmit_numeric+0x19e>
    1398:	90 cf       	rjmp	.-224    	; 0x12ba <USART_transmit_numeric+0xbe>
        
        if( (valid == 1)|(n == (Nint+Nfrac-1)) ) USART_transmit(0x30 + d[n]);
        else if( valid == 0 )                   USART_transmit(0x20);
        else                                    USART_transmit(0xff);
    }
}
    139a:	28 96       	adiw	r28, 0x08	; 8
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	ff 90       	pop	r15
    13b0:	ef 90       	pop	r14
    13b2:	df 90       	pop	r13
    13b4:	cf 90       	pop	r12
    13b6:	bf 90       	pop	r11
    13b8:	af 90       	pop	r10
    13ba:	9f 90       	pop	r9
    13bc:	8f 90       	pop	r8
    13be:	7f 90       	pop	r7
    13c0:	6f 90       	pop	r6
    13c2:	5f 90       	pop	r5
    13c4:	4f 90       	pop	r4
    13c6:	3f 90       	pop	r3
    13c8:	2f 90       	pop	r2
    13ca:	08 95       	ret

000013cc <USART_receive>:
    13cc:	80 91 c0 00 	lds	r24, 0x00C0
    13d0:	87 ff       	sbrs	r24, 7
    13d2:	fc cf       	rjmp	.-8      	; 0x13cc <USART_receive>
    13d4:	80 91 c0 00 	lds	r24, 0x00C0
    13d8:	80 91 c0 00 	lds	r24, 0x00C0
    13dc:	80 91 c6 00 	lds	r24, 0x00C6
    13e0:	08 95       	ret

000013e2 <main>:
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	c7 55       	subi	r28, 0x57	; 87
    13ec:	d0 40       	sbci	r29, 0x00	; 0
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <SoftSPI_Init>
    13fc:	0e 94 59 06 	call	0xcb2	; 0xcb2 <SoftSPI_LED_Init>
    1400:	0e 94 a4 04 	call	0x948	; 0x948 <lcd_init>
    1404:	0e 94 9c 06 	call	0xd38	; 0xd38 <timer0_init>
    1408:	0e 94 d1 06 	call	0xda2	; 0xda2 <timer1_init>
    140c:	0e 94 11 07 	call	0xe22	; 0xe22 <timer2_init>
    1410:	55 9a       	sbi	0x0a, 5	; 10
    1412:	83 e3       	ldi	r24, 0x33	; 51
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 de 08 	call	0x11bc	; 0x11bc <USARTinit>
    141a:	0e 94 a6 00 	call	0x14c	; 0x14c <ADC_init>
    141e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <ExtInterrupt_init>
    1422:	20 91 8f 01 	lds	r18, 0x018F
    1426:	30 91 90 01 	lds	r19, 0x0190
    142a:	40 e0       	ldi	r20, 0x00	; 0
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	74 e2       	ldi	r23, 0x24	; 36
    1432:	84 ef       	ldi	r24, 0xF4	; 244
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 fe 02 	call	0x5fc	; 0x5fc <TachoMeter_init>
    143a:	0e 94 af 00 	call	0x15e	; 0x15e <BarMeter_init>
    143e:	0e 94 81 06 	call	0xd02	; 0xd02 <set_initial_t_id>
    1442:	b7 e3       	ldi	r27, 0x37	; 55
    1444:	ab 2e       	mov	r10, r27
    1446:	b1 e0       	ldi	r27, 0x01	; 1
    1448:	bb 2e       	mov	r11, r27
    144a:	1e e3       	ldi	r17, 0x3E	; 62
    144c:	81 2e       	mov	r8, r17
    144e:	11 e0       	ldi	r17, 0x01	; 1
    1450:	91 2e       	mov	r9, r17
    1452:	00 e0       	ldi	r16, 0x00	; 0
    1454:	10 e0       	ldi	r17, 0x00	; 0
    1456:	8b e0       	ldi	r24, 0x0B	; 11
    1458:	f8 2e       	mov	r15, r24
    145a:	32 c0       	rjmp	.+100    	; 0x14c0 <main+0xde>
    145c:	4f 5f       	subi	r20, 0xFF	; 255
    145e:	24 2f       	mov	r18, r20
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	28 17       	cp	r18, r24
    1464:	39 07       	cpc	r19, r25
    1466:	d4 f3       	brlt	.-12     	; 0x145c <main+0x7a>
    1468:	f8 01       	movw	r30, r16
    146a:	ee 0f       	add	r30, r30
    146c:	ff 1f       	adc	r31, r31
    146e:	e3 55       	subi	r30, 0x53	; 83
    1470:	ff 4f       	sbci	r31, 0xFF	; 255
    1472:	64 91       	lpm	r22, Z
    1474:	ce 01       	movw	r24, r28
    1476:	8e 96       	adiw	r24, 0x2e	; 46
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <strcpy_P>
    147e:	ce 01       	movw	r24, r28
    1480:	8e 96       	adiw	r24, 0x2e	; 46
    1482:	0e 94 09 08 	call	0x1012	; 0x1012 <StrLength>
    1486:	f8 01       	movw	r30, r16
    1488:	eb 55       	subi	r30, 0x5B	; 91
    148a:	fe 4f       	sbci	r31, 0xFE	; 254
    148c:	80 83       	st	Z, r24
    148e:	af e0       	ldi	r26, 0x0F	; 15
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	ac 0f       	add	r26, r28
    1494:	bd 1f       	adc	r27, r29
    1496:	a0 0f       	add	r26, r16
    1498:	b1 1f       	adc	r27, r17
    149a:	9f 2d       	mov	r25, r15
    149c:	9e 19       	sub	r25, r14
    149e:	98 1b       	sub	r25, r24
    14a0:	f8 01       	movw	r30, r16
    14a2:	eb 5b       	subi	r30, 0xBB	; 187
    14a4:	fe 4f       	sbci	r31, 0xFE	; 254
    14a6:	80 81       	ld	r24, Z
    14a8:	98 1b       	sub	r25, r24
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	ec 14       	cp	r14, r12
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <main+0xd0>
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	98 1b       	sub	r25, r24
    14b4:	9c 93       	st	X, r25
    14b6:	0f 5f       	subi	r16, 0xFF	; 255
    14b8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ba:	07 30       	cpi	r16, 0x07	; 7
    14bc:	11 05       	cpc	r17, r1
    14be:	61 f0       	breq	.+24     	; 0x14d8 <main+0xf6>
    14c0:	d5 01       	movw	r26, r10
    14c2:	ed 90       	ld	r14, X+
    14c4:	5d 01       	movw	r10, r26
    14c6:	f4 01       	movw	r30, r8
    14c8:	c1 90       	ld	r12, Z+
    14ca:	4f 01       	movw	r8, r30
    14cc:	8e 2d       	mov	r24, r14
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	8c 19       	sub	r24, r12
    14d2:	91 09       	sbc	r25, r1
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	c3 cf       	rjmp	.-122    	; 0x145e <main+0x7c>
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	9a 87       	std	Y+10, r25	; 0x0a
    14de:	89 87       	std	Y+9, r24	; 0x09
    14e0:	80 e1       	ldi	r24, 0x10	; 16
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	9c 87       	std	Y+12, r25	; 0x0c
    14e6:	8b 87       	std	Y+11, r24	; 0x0b
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	91 e0       	ldi	r25, 0x01	; 1
    14ec:	9e 87       	std	Y+14, r25	; 0x0e
    14ee:	8d 87       	std	Y+13, r24	; 0x0d
    14f0:	60 91 a3 01 	lds	r22, 0x01A3
    14f4:	70 91 a4 01 	lds	r23, 0x01A4
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__floatunsisf>
    1500:	9b 01       	movw	r18, r22
    1502:	ac 01       	movw	r20, r24
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	74 e2       	ldi	r23, 0x24	; 36
    1508:	84 e7       	ldi	r24, 0x74	; 116
    150a:	9b e4       	ldi	r25, 0x4B	; 75
    150c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__divsf3>
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	4a e7       	ldi	r20, 0x7A	; 122
    1516:	53 e4       	ldi	r21, 0x43	; 67
    1518:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e8       	ldi	r20, 0x80	; 128
    1522:	5b e3       	ldi	r21, 0x3B	; 59
    1524:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	4a e7       	ldi	r20, 0x7A	; 122
    152e:	54 e4       	ldi	r21, 0x44	; 68
    1530:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__divsf3>
    1534:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <__fixunssfsi>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	90 93 92 01 	sts	0x0192, r25
    1540:	80 93 91 01 	sts	0x0191, r24
    1544:	00 e0       	ldi	r16, 0x00	; 0
    1546:	10 e0       	ldi	r17, 0x00	; 0
    1548:	e1 e0       	ldi	r30, 0x01	; 1
    154a:	ee 2e       	mov	r14, r30
    154c:	f1 2c       	mov	r15, r1
    154e:	c7 01       	movw	r24, r14
    1550:	00 2e       	mov	r0, r16
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <main+0x176>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <main+0x172>
    155c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <send_bits_595_LED>
    1560:	8f ef       	ldi	r24, 0xFF	; 255
    1562:	9d ee       	ldi	r25, 0xED	; 237
    1564:	a2 e0       	ldi	r26, 0x02	; 2
    1566:	81 50       	subi	r24, 0x01	; 1
    1568:	90 40       	sbci	r25, 0x00	; 0
    156a:	a0 40       	sbci	r26, 0x00	; 0
    156c:	e1 f7       	brne	.-8      	; 0x1566 <main+0x184>
    156e:	00 c0       	rjmp	.+0      	; 0x1570 <main+0x18e>
    1570:	00 00       	nop
    1572:	0f 5f       	subi	r16, 0xFF	; 255
    1574:	1f 4f       	sbci	r17, 0xFF	; 255
    1576:	09 30       	cpi	r16, 0x09	; 9
    1578:	11 05       	cpc	r17, r1
    157a:	49 f7       	brne	.-46     	; 0x154e <main+0x16c>
    157c:	8f ef       	ldi	r24, 0xFF	; 255
    157e:	90 e7       	ldi	r25, 0x70	; 112
    1580:	a2 e0       	ldi	r26, 0x02	; 2
    1582:	81 50       	subi	r24, 0x01	; 1
    1584:	90 40       	sbci	r25, 0x00	; 0
    1586:	a0 40       	sbci	r26, 0x00	; 0
    1588:	e1 f7       	brne	.-8      	; 0x1582 <main+0x1a0>
    158a:	00 c0       	rjmp	.+0      	; 0x158c <main+0x1aa>
    158c:	00 00       	nop
    158e:	00 e0       	ldi	r16, 0x00	; 0
    1590:	10 e0       	ldi	r17, 0x00	; 0
    1592:	80 2f       	mov	r24, r16
    1594:	8f 5f       	subi	r24, 0xFF	; 255
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_locate>
    159c:	f8 01       	movw	r30, r16
    159e:	ee 0f       	add	r30, r30
    15a0:	ff 1f       	adc	r31, r31
    15a2:	e8 59       	subi	r30, 0x98	; 152
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	64 91       	lpm	r22, Z
    15a8:	ce 01       	movw	r24, r28
    15aa:	8e 96       	adiw	r24, 0x2e	; 46
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <strcpy_P>
    15b2:	9e e2       	ldi	r25, 0x2E	; 46
    15b4:	e9 2e       	mov	r14, r25
    15b6:	f1 2c       	mov	r15, r1
    15b8:	ec 0e       	add	r14, r28
    15ba:	fd 1e       	adc	r15, r29
    15bc:	24 e1       	ldi	r18, 0x14	; 20
    15be:	c2 2e       	mov	r12, r18
    15c0:	d7 01       	movw	r26, r14
    15c2:	8d 91       	ld	r24, X+
    15c4:	7d 01       	movw	r14, r26
    15c6:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    15ca:	8f ef       	ldi	r24, 0xFF	; 255
    15cc:	99 ef       	ldi	r25, 0xF9	; 249
    15ce:	a0 e0       	ldi	r26, 0x00	; 0
    15d0:	81 50       	subi	r24, 0x01	; 1
    15d2:	90 40       	sbci	r25, 0x00	; 0
    15d4:	a0 40       	sbci	r26, 0x00	; 0
    15d6:	e1 f7       	brne	.-8      	; 0x15d0 <main+0x1ee>
    15d8:	00 c0       	rjmp	.+0      	; 0x15da <main+0x1f8>
    15da:	00 00       	nop
    15dc:	ca 94       	dec	r12
    15de:	81 f7       	brne	.-32     	; 0x15c0 <main+0x1de>
    15e0:	0f 5f       	subi	r16, 0xFF	; 255
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
    15e4:	03 30       	cpi	r16, 0x03	; 3
    15e6:	11 05       	cpc	r17, r1
    15e8:	a1 f6       	brne	.-88     	; 0x1592 <main+0x1b0>
    15ea:	00 e0       	ldi	r16, 0x00	; 0
    15ec:	80 2f       	mov	r24, r16
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_locate>
    15f4:	14 e1       	ldi	r17, 0x14	; 20
    15f6:	80 e2       	ldi	r24, 0x20	; 32
    15f8:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    15fc:	af e3       	ldi	r26, 0x3F	; 63
    15fe:	bc e9       	ldi	r27, 0x9C	; 156
    1600:	11 97       	sbiw	r26, 0x01	; 1
    1602:	f1 f7       	brne	.-4      	; 0x1600 <main+0x21e>
    1604:	00 c0       	rjmp	.+0      	; 0x1606 <main+0x224>
    1606:	00 00       	nop
    1608:	11 50       	subi	r17, 0x01	; 1
    160a:	a9 f7       	brne	.-22     	; 0x15f6 <main+0x214>
    160c:	0f 5f       	subi	r16, 0xFF	; 255
    160e:	04 30       	cpi	r16, 0x04	; 4
    1610:	69 f7       	brne	.-38     	; 0x15ec <main+0x20a>
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	80 93 ac 01 	sts	0x01AC, r24
    1618:	1f 8a       	std	Y+23, r1	; 0x17
    161a:	1e 8a       	std	Y+22, r1	; 0x16
    161c:	80 93 ad 01 	sts	0x01AD, r24
    1620:	19 8e       	std	Y+25, r1	; 0x19
    1622:	18 8e       	std	Y+24, r1	; 0x18
    1624:	80 93 ae 01 	sts	0x01AE, r24
    1628:	1b 8e       	std	Y+27, r1	; 0x1b
    162a:	1a 8e       	std	Y+26, r1	; 0x1a
    162c:	80 93 af 01 	sts	0x01AF, r24
    1630:	1d 8e       	std	Y+29, r1	; 0x1d
    1632:	1c 8e       	std	Y+28, r1	; 0x1c
    1634:	78 94       	sei
    1636:	10 92 56 01 	sts	0x0156, r1
    163a:	fe 01       	movw	r30, r28
    163c:	39 96       	adiw	r30, 0x09	; 9
    163e:	60 96       	adiw	r28, 0x10	; 16
    1640:	ff af       	sts	0x7f, r31
    1642:	ee af       	sts	0x7e, r30
    1644:	60 97       	sbiw	r28, 0x10	; 16
    1646:	80 91 2c 01 	lds	r24, 0x012C
    164a:	88 23       	and	r24, r24
    164c:	99 f0       	breq	.+38     	; 0x1674 <main+0x292>
    164e:	0e 94 37 08 	call	0x106e	; 0x106e <DisplayItemInfo>
    1652:	20 91 36 01 	lds	r18, 0x0136
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	c9 01       	movw	r24, r18
    165a:	83 70       	andi	r24, 0x03	; 3
    165c:	90 70       	andi	r25, 0x00	; 0
    165e:	95 95       	asr	r25
    1660:	87 95       	ror	r24
    1662:	20 ff       	sbrs	r18, 0
    1664:	02 c0       	rjmp	.+4      	; 0x166a <main+0x288>
    1666:	68 e0       	ldi	r22, 0x08	; 8
    1668:	01 c0       	rjmp	.+2      	; 0x166c <main+0x28a>
    166a:	67 e0       	ldi	r22, 0x07	; 7
    166c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_locate>
    1670:	10 92 2c 01 	sts	0x012C, r1
    1674:	9e 01       	movw	r18, r28
    1676:	22 5e       	subi	r18, 0xE2	; 226
    1678:	3f 4f       	sbci	r19, 0xFF	; 255
    167a:	64 96       	adiw	r28, 0x14	; 20
    167c:	3f af       	sts	0x7f, r19
    167e:	2e af       	sts	0x7e, r18
    1680:	64 97       	sbiw	r28, 0x14	; 20
    1682:	ce 01       	movw	r24, r28
    1684:	05 96       	adiw	r24, 0x05	; 5
    1686:	66 96       	adiw	r28, 0x16	; 22
    1688:	9f af       	sts	0x7f, r25
    168a:	8e af       	sts	0x7e, r24
    168c:	66 97       	sbiw	r28, 0x16	; 22
    168e:	a6 e1       	ldi	r26, 0x16	; 22
    1690:	6a 2e       	mov	r6, r26
    1692:	71 2c       	mov	r7, r1
    1694:	6c 0e       	add	r6, r28
    1696:	7d 1e       	adc	r7, r29
    1698:	b3 e9       	ldi	r27, 0x93	; 147
    169a:	2b 2e       	mov	r2, r27
    169c:	b1 e0       	ldi	r27, 0x01	; 1
    169e:	3b 2e       	mov	r3, r27
    16a0:	5c 01       	movw	r10, r24
    16a2:	62 96       	adiw	r28, 0x12	; 18
    16a4:	3f af       	sts	0x7f, r19
    16a6:	2e af       	sts	0x7e, r18
    16a8:	62 97       	sbiw	r28, 0x12	; 18
    16aa:	88 24       	eor	r8, r8
    16ac:	99 24       	eor	r9, r9
    16ae:	f4 01       	movw	r30, r8
    16b0:	e4 55       	subi	r30, 0x54	; 84
    16b2:	fe 4f       	sbci	r31, 0xFE	; 254
    16b4:	80 81       	ld	r24, Z
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	09 f0       	breq	.+2      	; 0x16bc <main+0x2da>
    16ba:	a4 c0       	rjmp	.+328    	; 0x1804 <main+0x422>
    16bc:	10 82       	st	Z, r1
    16be:	f3 01       	movw	r30, r6
    16c0:	11 82       	std	Z+1, r1	; 0x01
    16c2:	10 82       	st	Z, r1
    16c4:	f4 01       	movw	r30, r8
    16c6:	e8 57       	subi	r30, 0x78	; 120
    16c8:	fe 4f       	sbci	r31, 0xFE	; 254
    16ca:	f0 80       	ld	r15, Z
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	f1 01       	movw	r30, r2
    16d2:	e8 0f       	add	r30, r24
    16d4:	f9 1f       	adc	r31, r25
    16d6:	21 81       	ldd	r18, Z+1	; 0x01
    16d8:	32 2f       	mov	r19, r18
    16da:	31 54       	subi	r19, 0x41	; 65
    16dc:	36 30       	cpi	r19, 0x06	; 6
    16de:	18 f0       	brcs	.+6      	; 0x16e6 <main+0x304>
    16e0:	20 53       	subi	r18, 0x30	; 48
    16e2:	2a 30       	cpi	r18, 0x0A	; 10
    16e4:	40 f4       	brcc	.+16     	; 0x16f6 <main+0x314>
    16e6:	e1 e0       	ldi	r30, 0x01	; 1
    16e8:	d5 01       	movw	r26, r10
    16ea:	ec 93       	st	X, r30
    16ec:	01 96       	adiw	r24, 0x01	; 1
    16ee:	83 30       	cpi	r24, 0x03	; 3
    16f0:	91 05       	cpc	r25, r1
    16f2:	71 f7       	brne	.-36     	; 0x16d0 <main+0x2ee>
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <main+0x318>
    16f6:	d5 01       	movw	r26, r10
    16f8:	1c 92       	st	X, r1
    16fa:	f5 01       	movw	r30, r10
    16fc:	80 81       	ld	r24, Z
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	09 f0       	breq	.+2      	; 0x1704 <main+0x322>
    1702:	a4 c0       	rjmp	.+328    	; 0x184c <main+0x46a>
    1704:	64 01       	movw	r12, r8
    1706:	cc 0c       	add	r12, r12
    1708:	dd 1c       	adc	r13, r13
    170a:	cc 0c       	add	r12, r12
    170c:	dd 1c       	adc	r13, r13
    170e:	24 e9       	ldi	r18, 0x94	; 148
    1710:	31 e0       	ldi	r19, 0x01	; 1
    1712:	c2 0e       	add	r12, r18
    1714:	d3 1e       	adc	r13, r19
    1716:	de 01       	movw	r26, r28
    1718:	12 96       	adiw	r26, 0x02	; 2
    171a:	be 01       	movw	r22, r28
    171c:	61 5f       	subi	r22, 0xF1	; 241
    171e:	7f 4f       	sbci	r23, 0xFF	; 255
    1720:	00 e0       	ldi	r16, 0x00	; 0
    1722:	10 e0       	ldi	r17, 0x00	; 0
    1724:	f6 01       	movw	r30, r12
    1726:	81 91       	ld	r24, Z+
    1728:	6f 01       	movw	r12, r30
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	20 7f       	andi	r18, 0xF0	; 240
    1730:	30 70       	andi	r19, 0x00	; 0
    1732:	20 33       	cpi	r18, 0x30	; 48
    1734:	31 05       	cpc	r19, r1
    1736:	11 f4       	brne	.+4      	; 0x173c <main+0x35a>
    1738:	8f 70       	andi	r24, 0x0F	; 15
    173a:	05 c0       	rjmp	.+10     	; 0x1746 <main+0x364>
    173c:	20 34       	cpi	r18, 0x40	; 64
    173e:	31 05       	cpc	r19, r1
    1740:	c9 f4       	brne	.+50     	; 0x1774 <main+0x392>
    1742:	8f 70       	andi	r24, 0x0F	; 15
    1744:	87 5f       	subi	r24, 0xF7	; 247
    1746:	8c 93       	st	X, r24
    1748:	8d 91       	ld	r24, X+
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	fb 01       	movw	r30, r22
    174e:	32 91       	ld	r19, -Z
    1750:	22 91       	ld	r18, -Z
    1752:	bf 01       	movw	r22, r30
    1754:	82 9f       	mul	r24, r18
    1756:	a0 01       	movw	r20, r0
    1758:	83 9f       	mul	r24, r19
    175a:	50 0d       	add	r21, r0
    175c:	92 9f       	mul	r25, r18
    175e:	50 0d       	add	r21, r0
    1760:	11 24       	eor	r1, r1
    1762:	04 0f       	add	r16, r20
    1764:	15 1f       	adc	r17, r21
    1766:	60 96       	adiw	r28, 0x10	; 16
    1768:	2e ad       	sts	0x6e, r18
    176a:	3f ad       	sts	0x6f, r19
    176c:	60 97       	sbiw	r28, 0x10	; 16
    176e:	e2 17       	cp	r30, r18
    1770:	f3 07       	cpc	r31, r19
    1772:	c1 f6       	brne	.-80     	; 0x1724 <main+0x342>
    1774:	8f 2d       	mov	r24, r15
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	fc 01       	movw	r30, r24
    177e:	e8 51       	subi	r30, 0x18	; 24
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	45 90       	lpm	r4, Z+
    1784:	54 90       	lpm	r5, Z
    1786:	fc 01       	movw	r30, r24
    1788:	ea 50       	subi	r30, 0x0A	; 10
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	85 91       	lpm	r24, Z+
    178e:	94 91       	lpm	r25, Z
    1790:	68 96       	adiw	r28, 0x18	; 24
    1792:	9f af       	sts	0x7f, r25
    1794:	8e af       	sts	0x7e, r24
    1796:	68 97       	sbiw	r28, 0x18	; 24
    1798:	b8 01       	movw	r22, r16
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__floatunsisf>
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	43 e1       	ldi	r20, 0x13	; 19
    17a8:	55 e4       	ldi	r21, 0x45	; 69
    17aa:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__divsf3>
    17ae:	6b 01       	movw	r12, r22
    17b0:	7c 01       	movw	r14, r24
    17b2:	b2 01       	movw	r22, r4
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__floatunsisf>
    17bc:	9b 01       	movw	r18, r22
    17be:	ac 01       	movw	r20, r24
    17c0:	c7 01       	movw	r24, r14
    17c2:	b6 01       	movw	r22, r12
    17c4:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
    17c8:	6b 01       	movw	r12, r22
    17ca:	7c 01       	movw	r14, r24
    17cc:	68 96       	adiw	r28, 0x18	; 24
    17ce:	ae ad       	sts	0x6e, r26
    17d0:	bf ad       	sts	0x6f, r27
    17d2:	68 97       	sbiw	r28, 0x18	; 24
    17d4:	bd 01       	movw	r22, r26
    17d6:	88 27       	eor	r24, r24
    17d8:	77 fd       	sbrc	r23, 7
    17da:	80 95       	com	r24
    17dc:	98 2f       	mov	r25, r24
    17de:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__floatsisf>
    17e2:	9b 01       	movw	r18, r22
    17e4:	ac 01       	movw	r20, r24
    17e6:	c7 01       	movw	r24, r14
    17e8:	b6 01       	movw	r22, r12
    17ea:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__addsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	62 96       	adiw	r28, 0x12	; 18
    17f4:	ee ad       	sts	0x6e, r30
    17f6:	ff ad       	sts	0x6f, r31
    17f8:	62 97       	sbiw	r28, 0x12	; 18
    17fa:	80 83       	st	Z, r24
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	a2 83       	std	Z+2, r26	; 0x02
    1800:	b3 83       	std	Z+3, r27	; 0x03
    1802:	24 c0       	rjmp	.+72     	; 0x184c <main+0x46a>
    1804:	d3 01       	movw	r26, r6
    1806:	8d 91       	ld	r24, X+
    1808:	9c 91       	ld	r25, X
    180a:	11 97       	sbiw	r26, 0x01	; 1
    180c:	b1 e0       	ldi	r27, 0x01	; 1
    180e:	8c 32       	cpi	r24, 0x2C	; 44
    1810:	9b 07       	cpc	r25, r27
    1812:	b9 f4       	brne	.+46     	; 0x1842 <main+0x460>
    1814:	f5 01       	movw	r30, r10
    1816:	10 82       	st	Z, r1
    1818:	83 e0       	ldi	r24, 0x03	; 3
    181a:	6c e0       	ldi	r22, 0x0C	; 12
    181c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_locate>
    1820:	ce 01       	movw	r24, r28
    1822:	8e 96       	adiw	r24, 0x2e	; 46
    1824:	64 e0       	ldi	r22, 0x04	; 4
    1826:	71 e0       	ldi	r23, 0x01	; 1
    1828:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <strcpy_P>
    182c:	ce 01       	movw	r24, r28
    182e:	8e 96       	adiw	r24, 0x2e	; 46
    1830:	0e 94 44 05 	call	0xa88	; 0xa88 <lcd_set_str>
    1834:	87 ec       	ldi	r24, 0xC7	; 199
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	f1 f7       	brne	.-4      	; 0x1838 <main+0x456>
    183c:	00 c0       	rjmp	.+0      	; 0x183e <main+0x45c>
    183e:	00 00       	nop
    1840:	05 c0       	rjmp	.+10     	; 0x184c <main+0x46a>
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	d3 01       	movw	r26, r6
    1846:	11 96       	adiw	r26, 0x01	; 1
    1848:	9c 93       	st	X, r25
    184a:	8e 93       	st	-X, r24
    184c:	08 94       	sec
    184e:	81 1c       	adc	r8, r1
    1850:	91 1c       	adc	r9, r1
    1852:	62 96       	adiw	r28, 0x12	; 18
    1854:	ee ad       	sts	0x6e, r30
    1856:	ff ad       	sts	0x6f, r31
    1858:	62 97       	sbiw	r28, 0x12	; 18
    185a:	34 96       	adiw	r30, 0x04	; 4
    185c:	62 96       	adiw	r28, 0x12	; 18
    185e:	ff af       	sts	0x7f, r31
    1860:	ee af       	sts	0x7e, r30
    1862:	62 97       	sbiw	r28, 0x12	; 18
    1864:	08 94       	sec
    1866:	a1 1c       	adc	r10, r1
    1868:	b1 1c       	adc	r11, r1
    186a:	22 e0       	ldi	r18, 0x02	; 2
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	62 0e       	add	r6, r18
    1870:	73 1e       	adc	r7, r19
    1872:	84 e0       	ldi	r24, 0x04	; 4
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	28 0e       	add	r2, r24
    1878:	39 1e       	adc	r3, r25
    187a:	94 e0       	ldi	r25, 0x04	; 4
    187c:	89 16       	cp	r8, r25
    187e:	91 04       	cpc	r9, r1
    1880:	09 f0       	breq	.+2      	; 0x1884 <main+0x4a2>
    1882:	15 cf       	rjmp	.-470    	; 0x16ae <main+0x2cc>
    1884:	0e 94 11 03 	call	0x622	; 0x622 <TachoMeter>
    1888:	60 93 59 01 	sts	0x0159, r22
    188c:	70 93 5a 01 	sts	0x015A, r23
    1890:	80 93 5b 01 	sts	0x015B, r24
    1894:	90 93 5c 01 	sts	0x015C, r25
    1898:	40 90 79 00 	lds	r4, 0x0079
    189c:	2e a1       	lds	r18, 0x4e
    189e:	3f a1       	lds	r19, 0x4f
    18a0:	48 a5       	lds	r20, 0x68
    18a2:	59 a5       	lds	r21, 0x69
    18a4:	ea a4       	lds	r30, 0xaa
    18a6:	fb a4       	lds	r31, 0xab
    18a8:	0c a5       	lds	r16, 0x6c
    18aa:	1d a5       	lds	r17, 0x6d
    18ac:	c0 90 56 01 	lds	r12, 0x0156
    18b0:	dd 24       	eor	r13, r13
    18b2:	0e 94 73 01 	call	0x2e6	; 0x2e6 <FuelPumpDriver>
    18b6:	88 bd       	out	0x28, r24	; 40
    18b8:	80 91 b0 01 	lds	r24, 0x01B0
    18bc:	90 91 b1 01 	lds	r25, 0x01B1
    18c0:	20 91 91 01 	lds	r18, 0x0191
    18c4:	30 91 92 01 	lds	r19, 0x0192
    18c8:	28 17       	cp	r18, r24
    18ca:	39 07       	cpc	r19, r25
    18cc:	08 f0       	brcs	.+2      	; 0x18d0 <main+0x4ee>
    18ce:	bc c0       	rjmp	.+376    	; 0x1a48 <main+0x666>
    18d0:	10 92 b1 01 	sts	0x01B1, r1
    18d4:	10 92 b0 01 	sts	0x01B0, r1
    18d8:	68 e8       	ldi	r22, 0x88	; 136
    18da:	86 2e       	mov	r8, r22
    18dc:	61 e0       	ldi	r22, 0x01	; 1
    18de:	96 2e       	mov	r9, r22
    18e0:	ff 24       	eor	r15, r15
    18e2:	7a e0       	ldi	r23, 0x0A	; 10
    18e4:	67 2e       	mov	r6, r23
    18e6:	71 2c       	mov	r7, r1
    18e8:	d4 01       	movw	r26, r8
    18ea:	cd 90       	ld	r12, X+
    18ec:	4d 01       	movw	r8, r26
    18ee:	dd 24       	eor	r13, r13
    18f0:	86 01       	movw	r16, r12
    18f2:	0b 55       	subi	r16, 0x5B	; 91
    18f4:	1e 4f       	sbci	r17, 0xFE	; 254
    18f6:	8f 2d       	mov	r24, r15
    18f8:	f8 01       	movw	r30, r16
    18fa:	60 81       	ld	r22, Z
    18fc:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_locate>
    1900:	ee 24       	eor	r14, r14
    1902:	04 c0       	rjmp	.+8      	; 0x190c <main+0x52a>
    1904:	80 e2       	ldi	r24, 0x20	; 32
    1906:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    190a:	e3 94       	inc	r14
    190c:	d8 01       	movw	r26, r16
    190e:	6c 91       	ld	r22, X
    1910:	8e 2d       	mov	r24, r14
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	93 01       	movw	r18, r6
    1916:	26 1b       	sub	r18, r22
    1918:	31 09       	sbc	r19, r1
    191a:	28 17       	cp	r18, r24
    191c:	39 07       	cpc	r19, r25
    191e:	94 f7       	brge	.-28     	; 0x1904 <main+0x522>
    1920:	8f 2d       	mov	r24, r15
    1922:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_locate>
    1926:	ee 24       	eor	r14, r14
    1928:	0f e0       	ldi	r16, 0x0F	; 15
    192a:	10 e0       	ldi	r17, 0x00	; 0
    192c:	0c 0f       	add	r16, r28
    192e:	1d 1f       	adc	r17, r29
    1930:	0c 0d       	add	r16, r12
    1932:	1d 1d       	adc	r17, r13
    1934:	04 c0       	rjmp	.+8      	; 0x193e <main+0x55c>
    1936:	80 e2       	ldi	r24, 0x20	; 32
    1938:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    193c:	e3 94       	inc	r14
    193e:	f8 01       	movw	r30, r16
    1940:	80 81       	ld	r24, Z
    1942:	e8 16       	cp	r14, r24
    1944:	c0 f3       	brcs	.-16     	; 0x1936 <main+0x554>
    1946:	66 96       	adiw	r28, 0x16	; 22
    1948:	ae ad       	sts	0x6e, r26
    194a:	bf ad       	sts	0x6f, r27
    194c:	66 97       	sbiw	r28, 0x16	; 22
    194e:	8d 91       	ld	r24, X+
    1950:	66 96       	adiw	r28, 0x16	; 22
    1952:	bf af       	sts	0x7f, r27
    1954:	ae af       	sts	0x7e, r26
    1956:	66 97       	sbiw	r28, 0x16	; 22
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	e1 f4       	brne	.+56     	; 0x1994 <main+0x5b2>
    195c:	f6 01       	movw	r30, r12
    195e:	e2 5c       	subi	r30, 0xC2	; 194
    1960:	fe 4f       	sbci	r31, 0xFE	; 254
    1962:	40 81       	ld	r20, Z
    1964:	64 96       	adiw	r28, 0x14	; 20
    1966:	ee ad       	sts	0x6e, r30
    1968:	ff ad       	sts	0x6f, r31
    196a:	64 97       	sbiw	r28, 0x14	; 20
    196c:	60 81       	ld	r22, Z
    196e:	71 81       	ldd	r23, Z+1	; 0x01
    1970:	82 81       	ldd	r24, Z+2	; 0x02
    1972:	93 81       	ldd	r25, Z+3	; 0x03
    1974:	f6 01       	movw	r30, r12
    1976:	e9 5c       	subi	r30, 0xC9	; 201
    1978:	fe 4f       	sbci	r31, 0xFE	; 254
    197a:	20 81       	ld	r18, Z
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	24 1b       	sub	r18, r20
    1980:	31 09       	sbc	r19, r1
    1982:	f6 01       	movw	r30, r12
    1984:	eb 5b       	subi	r30, 0xBB	; 187
    1986:	fe 4f       	sbci	r31, 0xFE	; 254
    1988:	00 81       	ld	r16, Z
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	10 e0       	ldi	r17, 0x00	; 0
    198e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <lcd_set_numeric>
    1992:	2b c0       	rjmp	.+86     	; 0x19ea <main+0x608>
    1994:	88 23       	and	r24, r24
    1996:	31 f0       	breq	.+12     	; 0x19a4 <main+0x5c2>
    1998:	28 c0       	rjmp	.+80     	; 0x19ea <main+0x608>
    199a:	80 e2       	ldi	r24, 0x20	; 32
    199c:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    19a0:	0f 5f       	subi	r16, 0xFF	; 255
    19a2:	0e c0       	rjmp	.+28     	; 0x19c0 <main+0x5de>
    19a4:	00 e0       	ldi	r16, 0x00	; 0
    19a6:	f6 01       	movw	r30, r12
    19a8:	e9 5c       	subi	r30, 0xC9	; 201
    19aa:	fe 4f       	sbci	r31, 0xFE	; 254
    19ac:	e0 80       	ld	r14, Z
    19ae:	f6 01       	movw	r30, r12
    19b0:	e2 5c       	subi	r30, 0xC2	; 194
    19b2:	fe 4f       	sbci	r31, 0xFE	; 254
    19b4:	a0 80       	ld	r10, Z
    19b6:	f6 01       	movw	r30, r12
    19b8:	eb 5b       	subi	r30, 0xBB	; 187
    19ba:	fe 4f       	sbci	r31, 0xFE	; 254
    19bc:	c0 80       	ld	r12, Z
    19be:	dd 24       	eor	r13, r13
    19c0:	20 2f       	mov	r18, r16
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	ea 14       	cp	r14, r10
    19ca:	11 f4       	brne	.+4      	; 0x19d0 <main+0x5ee>
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	8c 0d       	add	r24, r12
    19d2:	9d 1d       	adc	r25, r13
    19d4:	28 17       	cp	r18, r24
    19d6:	39 07       	cpc	r19, r25
    19d8:	04 f3       	brlt	.-64     	; 0x199a <main+0x5b8>
    19da:	00 e0       	ldi	r16, 0x00	; 0
    19dc:	04 c0       	rjmp	.+8      	; 0x19e6 <main+0x604>
    19de:	8a e2       	ldi	r24, 0x2A	; 42
    19e0:	0e 94 1c 05 	call	0xa38	; 0xa38 <lcd_set_char>
    19e4:	0f 5f       	subi	r16, 0xFF	; 255
    19e6:	0e 15       	cp	r16, r14
    19e8:	d1 f7       	brne	.-12     	; 0x19de <main+0x5fc>
    19ea:	f3 94       	inc	r15
    19ec:	64 96       	adiw	r28, 0x14	; 20
    19ee:	2e ad       	sts	0x6e, r18
    19f0:	3f ad       	sts	0x6f, r19
    19f2:	64 97       	sbiw	r28, 0x14	; 20
    19f4:	2c 5f       	subi	r18, 0xFC	; 252
    19f6:	3f 4f       	sbci	r19, 0xFF	; 255
    19f8:	64 96       	adiw	r28, 0x14	; 20
    19fa:	3f af       	sts	0x7f, r19
    19fc:	2e af       	sts	0x7e, r18
    19fe:	64 97       	sbiw	r28, 0x14	; 20
    1a00:	34 e0       	ldi	r19, 0x04	; 4
    1a02:	f3 16       	cp	r15, r19
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <main+0x626>
    1a06:	70 cf       	rjmp	.-288    	; 0x18e8 <main+0x506>
    1a08:	82 e0       	ldi	r24, 0x02	; 2
    1a0a:	6c e0       	ldi	r22, 0x0C	; 12
    1a0c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_locate>
    1a10:	81 e1       	ldi	r24, 0x11	; 17
    1a12:	91 e0       	ldi	r25, 0x01	; 1
    1a14:	0e 94 44 05 	call	0xa88	; 0xa88 <lcd_set_str>
    1a18:	64 2d       	mov	r22, r4
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__floatunsisf>
    1a24:	21 ef       	ldi	r18, 0xF1	; 241
    1a26:	30 ef       	ldi	r19, 0xF0	; 240
    1a28:	40 e7       	ldi	r20, 0x70	; 112
    1a2a:	5d e3       	ldi	r21, 0x3D	; 61
    1a2c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
    1a30:	42 e0       	ldi	r20, 0x02	; 2
    1a32:	50 e0       	ldi	r21, 0x00	; 0
    1a34:	21 e0       	ldi	r18, 0x01	; 1
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	00 e0       	ldi	r16, 0x00	; 0
    1a3a:	10 e0       	ldi	r17, 0x00	; 0
    1a3c:	0e 94 50 05 	call	0xaa0	; 0xaa0 <lcd_set_numeric>
    1a40:	85 e1       	ldi	r24, 0x15	; 21
    1a42:	91 e0       	ldi	r25, 0x01	; 1
    1a44:	0e 94 44 05 	call	0xa88	; 0xa88 <lcd_set_str>
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	6c e0       	ldi	r22, 0x0C	; 12
    1a4c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_locate>
    1a50:	60 91 59 01 	lds	r22, 0x0159
    1a54:	70 91 5a 01 	lds	r23, 0x015A
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__floatunsisf>
    1a60:	45 e0       	ldi	r20, 0x05	; 5
    1a62:	50 e0       	ldi	r21, 0x00	; 0
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	00 e0       	ldi	r16, 0x00	; 0
    1a6a:	10 e0       	ldi	r17, 0x00	; 0
    1a6c:	0e 94 50 05 	call	0xaa0	; 0xaa0 <lcd_set_numeric>
    1a70:	87 e1       	ldi	r24, 0x17	; 23
    1a72:	91 e0       	ldi	r25, 0x01	; 1
    1a74:	0e 94 44 05 	call	0xa88	; 0xa88 <lcd_set_str>
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	6c e0       	ldi	r22, 0x0C	; 12
    1a7c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_locate>
    1a80:	80 91 56 01 	lds	r24, 0x0156
    1a84:	88 23       	and	r24, r24
    1a86:	f9 f4       	brne	.+62     	; 0x1ac6 <main+0x6e4>
    1a88:	8b e1       	ldi	r24, 0x1B	; 27
    1a8a:	91 e0       	ldi	r25, 0x01	; 1
    1a8c:	0e 94 44 05 	call	0xa88	; 0xa88 <lcd_set_str>
    1a90:	68 b5       	in	r22, 0x28	; 40
    1a92:	70 e0       	ldi	r23, 0x00	; 0
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__floatsisf>
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	4f e7       	ldi	r20, 0x7F	; 127
    1aa2:	53 e4       	ldi	r21, 0x43	; 67
    1aa4:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__divsf3>
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	48 ec       	ldi	r20, 0xC8	; 200
    1aae:	52 e4       	ldi	r21, 0x42	; 66
    1ab0:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
    1ab4:	43 e0       	ldi	r20, 0x03	; 3
    1ab6:	50 e0       	ldi	r21, 0x00	; 0
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	0e 94 50 05 	call	0xaa0	; 0xaa0 <lcd_set_numeric>
    1ac0:	80 e2       	ldi	r24, 0x20	; 32
    1ac2:	91 e0       	ldi	r25, 0x01	; 1
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <main+0x6e8>
    1ac6:	82 e2       	ldi	r24, 0x22	; 34
    1ac8:	91 e0       	ldi	r25, 0x01	; 1
    1aca:	0e 94 44 05 	call	0xa88	; 0xa88 <lcd_set_str>
    1ace:	bb cd       	rjmp	.-1162   	; 0x1646 <main+0x264>

00001ad0 <__subsf3>:
    1ad0:	50 58       	subi	r21, 0x80	; 128

00001ad2 <__addsf3>:
    1ad2:	bb 27       	eor	r27, r27
    1ad4:	aa 27       	eor	r26, r26
    1ad6:	0e d0       	rcall	.+28     	; 0x1af4 <__addsf3x>
    1ad8:	70 c1       	rjmp	.+736    	; 0x1dba <__fp_round>
    1ada:	61 d1       	rcall	.+706    	; 0x1d9e <__fp_pscA>
    1adc:	30 f0       	brcs	.+12     	; 0x1aea <__addsf3+0x18>
    1ade:	66 d1       	rcall	.+716    	; 0x1dac <__fp_pscB>
    1ae0:	20 f0       	brcs	.+8      	; 0x1aea <__addsf3+0x18>
    1ae2:	31 f4       	brne	.+12     	; 0x1af0 <__addsf3+0x1e>
    1ae4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ae6:	11 f4       	brne	.+4      	; 0x1aec <__addsf3+0x1a>
    1ae8:	1e f4       	brtc	.+6      	; 0x1af0 <__addsf3+0x1e>
    1aea:	56 c1       	rjmp	.+684    	; 0x1d98 <__fp_nan>
    1aec:	0e f4       	brtc	.+2      	; 0x1af0 <__addsf3+0x1e>
    1aee:	e0 95       	com	r30
    1af0:	e7 fb       	bst	r30, 7
    1af2:	4c c1       	rjmp	.+664    	; 0x1d8c <__fp_inf>

00001af4 <__addsf3x>:
    1af4:	e9 2f       	mov	r30, r25
    1af6:	72 d1       	rcall	.+740    	; 0x1ddc <__fp_split3>
    1af8:	80 f3       	brcs	.-32     	; 0x1ada <__addsf3+0x8>
    1afa:	ba 17       	cp	r27, r26
    1afc:	62 07       	cpc	r22, r18
    1afe:	73 07       	cpc	r23, r19
    1b00:	84 07       	cpc	r24, r20
    1b02:	95 07       	cpc	r25, r21
    1b04:	18 f0       	brcs	.+6      	; 0x1b0c <__addsf3x+0x18>
    1b06:	71 f4       	brne	.+28     	; 0x1b24 <__addsf3x+0x30>
    1b08:	9e f5       	brtc	.+102    	; 0x1b70 <__addsf3x+0x7c>
    1b0a:	8a c1       	rjmp	.+788    	; 0x1e20 <__fp_zero>
    1b0c:	0e f4       	brtc	.+2      	; 0x1b10 <__addsf3x+0x1c>
    1b0e:	e0 95       	com	r30
    1b10:	0b 2e       	mov	r0, r27
    1b12:	ba 2f       	mov	r27, r26
    1b14:	a0 2d       	mov	r26, r0
    1b16:	0b 01       	movw	r0, r22
    1b18:	b9 01       	movw	r22, r18
    1b1a:	90 01       	movw	r18, r0
    1b1c:	0c 01       	movw	r0, r24
    1b1e:	ca 01       	movw	r24, r20
    1b20:	a0 01       	movw	r20, r0
    1b22:	11 24       	eor	r1, r1
    1b24:	ff 27       	eor	r31, r31
    1b26:	59 1b       	sub	r21, r25
    1b28:	99 f0       	breq	.+38     	; 0x1b50 <__addsf3x+0x5c>
    1b2a:	59 3f       	cpi	r21, 0xF9	; 249
    1b2c:	50 f4       	brcc	.+20     	; 0x1b42 <__addsf3x+0x4e>
    1b2e:	50 3e       	cpi	r21, 0xE0	; 224
    1b30:	68 f1       	brcs	.+90     	; 0x1b8c <__addsf3x+0x98>
    1b32:	1a 16       	cp	r1, r26
    1b34:	f0 40       	sbci	r31, 0x00	; 0
    1b36:	a2 2f       	mov	r26, r18
    1b38:	23 2f       	mov	r18, r19
    1b3a:	34 2f       	mov	r19, r20
    1b3c:	44 27       	eor	r20, r20
    1b3e:	58 5f       	subi	r21, 0xF8	; 248
    1b40:	f3 cf       	rjmp	.-26     	; 0x1b28 <__addsf3x+0x34>
    1b42:	46 95       	lsr	r20
    1b44:	37 95       	ror	r19
    1b46:	27 95       	ror	r18
    1b48:	a7 95       	ror	r26
    1b4a:	f0 40       	sbci	r31, 0x00	; 0
    1b4c:	53 95       	inc	r21
    1b4e:	c9 f7       	brne	.-14     	; 0x1b42 <__addsf3x+0x4e>
    1b50:	7e f4       	brtc	.+30     	; 0x1b70 <__addsf3x+0x7c>
    1b52:	1f 16       	cp	r1, r31
    1b54:	ba 0b       	sbc	r27, r26
    1b56:	62 0b       	sbc	r22, r18
    1b58:	73 0b       	sbc	r23, r19
    1b5a:	84 0b       	sbc	r24, r20
    1b5c:	ba f0       	brmi	.+46     	; 0x1b8c <__addsf3x+0x98>
    1b5e:	91 50       	subi	r25, 0x01	; 1
    1b60:	a1 f0       	breq	.+40     	; 0x1b8a <__addsf3x+0x96>
    1b62:	ff 0f       	add	r31, r31
    1b64:	bb 1f       	adc	r27, r27
    1b66:	66 1f       	adc	r22, r22
    1b68:	77 1f       	adc	r23, r23
    1b6a:	88 1f       	adc	r24, r24
    1b6c:	c2 f7       	brpl	.-16     	; 0x1b5e <__addsf3x+0x6a>
    1b6e:	0e c0       	rjmp	.+28     	; 0x1b8c <__addsf3x+0x98>
    1b70:	ba 0f       	add	r27, r26
    1b72:	62 1f       	adc	r22, r18
    1b74:	73 1f       	adc	r23, r19
    1b76:	84 1f       	adc	r24, r20
    1b78:	48 f4       	brcc	.+18     	; 0x1b8c <__addsf3x+0x98>
    1b7a:	87 95       	ror	r24
    1b7c:	77 95       	ror	r23
    1b7e:	67 95       	ror	r22
    1b80:	b7 95       	ror	r27
    1b82:	f7 95       	ror	r31
    1b84:	9e 3f       	cpi	r25, 0xFE	; 254
    1b86:	08 f0       	brcs	.+2      	; 0x1b8a <__addsf3x+0x96>
    1b88:	b3 cf       	rjmp	.-154    	; 0x1af0 <__addsf3+0x1e>
    1b8a:	93 95       	inc	r25
    1b8c:	88 0f       	add	r24, r24
    1b8e:	08 f0       	brcs	.+2      	; 0x1b92 <__addsf3x+0x9e>
    1b90:	99 27       	eor	r25, r25
    1b92:	ee 0f       	add	r30, r30
    1b94:	97 95       	ror	r25
    1b96:	87 95       	ror	r24
    1b98:	08 95       	ret

00001b9a <__cmpsf2>:
    1b9a:	d4 d0       	rcall	.+424    	; 0x1d44 <__fp_cmp>
    1b9c:	08 f4       	brcc	.+2      	; 0x1ba0 <__cmpsf2+0x6>
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	08 95       	ret

00001ba2 <__divsf3>:
    1ba2:	0c d0       	rcall	.+24     	; 0x1bbc <__divsf3x>
    1ba4:	0a c1       	rjmp	.+532    	; 0x1dba <__fp_round>
    1ba6:	02 d1       	rcall	.+516    	; 0x1dac <__fp_pscB>
    1ba8:	40 f0       	brcs	.+16     	; 0x1bba <__divsf3+0x18>
    1baa:	f9 d0       	rcall	.+498    	; 0x1d9e <__fp_pscA>
    1bac:	30 f0       	brcs	.+12     	; 0x1bba <__divsf3+0x18>
    1bae:	21 f4       	brne	.+8      	; 0x1bb8 <__divsf3+0x16>
    1bb0:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb2:	19 f0       	breq	.+6      	; 0x1bba <__divsf3+0x18>
    1bb4:	eb c0       	rjmp	.+470    	; 0x1d8c <__fp_inf>
    1bb6:	51 11       	cpse	r21, r1
    1bb8:	34 c1       	rjmp	.+616    	; 0x1e22 <__fp_szero>
    1bba:	ee c0       	rjmp	.+476    	; 0x1d98 <__fp_nan>

00001bbc <__divsf3x>:
    1bbc:	0f d1       	rcall	.+542    	; 0x1ddc <__fp_split3>
    1bbe:	98 f3       	brcs	.-26     	; 0x1ba6 <__divsf3+0x4>

00001bc0 <__divsf3_pse>:
    1bc0:	99 23       	and	r25, r25
    1bc2:	c9 f3       	breq	.-14     	; 0x1bb6 <__divsf3+0x14>
    1bc4:	55 23       	and	r21, r21
    1bc6:	b1 f3       	breq	.-20     	; 0x1bb4 <__divsf3+0x12>
    1bc8:	95 1b       	sub	r25, r21
    1bca:	55 0b       	sbc	r21, r21
    1bcc:	bb 27       	eor	r27, r27
    1bce:	aa 27       	eor	r26, r26
    1bd0:	62 17       	cp	r22, r18
    1bd2:	73 07       	cpc	r23, r19
    1bd4:	84 07       	cpc	r24, r20
    1bd6:	38 f0       	brcs	.+14     	; 0x1be6 <__divsf3_pse+0x26>
    1bd8:	9f 5f       	subi	r25, 0xFF	; 255
    1bda:	5f 4f       	sbci	r21, 0xFF	; 255
    1bdc:	22 0f       	add	r18, r18
    1bde:	33 1f       	adc	r19, r19
    1be0:	44 1f       	adc	r20, r20
    1be2:	aa 1f       	adc	r26, r26
    1be4:	a9 f3       	breq	.-22     	; 0x1bd0 <__divsf3_pse+0x10>
    1be6:	33 d0       	rcall	.+102    	; 0x1c4e <__divsf3_pse+0x8e>
    1be8:	0e 2e       	mov	r0, r30
    1bea:	3a f0       	brmi	.+14     	; 0x1bfa <__divsf3_pse+0x3a>
    1bec:	e0 e8       	ldi	r30, 0x80	; 128
    1bee:	30 d0       	rcall	.+96     	; 0x1c50 <__divsf3_pse+0x90>
    1bf0:	91 50       	subi	r25, 0x01	; 1
    1bf2:	50 40       	sbci	r21, 0x00	; 0
    1bf4:	e6 95       	lsr	r30
    1bf6:	00 1c       	adc	r0, r0
    1bf8:	ca f7       	brpl	.-14     	; 0x1bec <__divsf3_pse+0x2c>
    1bfa:	29 d0       	rcall	.+82     	; 0x1c4e <__divsf3_pse+0x8e>
    1bfc:	fe 2f       	mov	r31, r30
    1bfe:	27 d0       	rcall	.+78     	; 0x1c4e <__divsf3_pse+0x8e>
    1c00:	66 0f       	add	r22, r22
    1c02:	77 1f       	adc	r23, r23
    1c04:	88 1f       	adc	r24, r24
    1c06:	bb 1f       	adc	r27, r27
    1c08:	26 17       	cp	r18, r22
    1c0a:	37 07       	cpc	r19, r23
    1c0c:	48 07       	cpc	r20, r24
    1c0e:	ab 07       	cpc	r26, r27
    1c10:	b0 e8       	ldi	r27, 0x80	; 128
    1c12:	09 f0       	breq	.+2      	; 0x1c16 <__divsf3_pse+0x56>
    1c14:	bb 0b       	sbc	r27, r27
    1c16:	80 2d       	mov	r24, r0
    1c18:	bf 01       	movw	r22, r30
    1c1a:	ff 27       	eor	r31, r31
    1c1c:	93 58       	subi	r25, 0x83	; 131
    1c1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c20:	2a f0       	brmi	.+10     	; 0x1c2c <__divsf3_pse+0x6c>
    1c22:	9e 3f       	cpi	r25, 0xFE	; 254
    1c24:	51 05       	cpc	r21, r1
    1c26:	68 f0       	brcs	.+26     	; 0x1c42 <__divsf3_pse+0x82>
    1c28:	b1 c0       	rjmp	.+354    	; 0x1d8c <__fp_inf>
    1c2a:	fb c0       	rjmp	.+502    	; 0x1e22 <__fp_szero>
    1c2c:	5f 3f       	cpi	r21, 0xFF	; 255
    1c2e:	ec f3       	brlt	.-6      	; 0x1c2a <__divsf3_pse+0x6a>
    1c30:	98 3e       	cpi	r25, 0xE8	; 232
    1c32:	dc f3       	brlt	.-10     	; 0x1c2a <__divsf3_pse+0x6a>
    1c34:	86 95       	lsr	r24
    1c36:	77 95       	ror	r23
    1c38:	67 95       	ror	r22
    1c3a:	b7 95       	ror	r27
    1c3c:	f7 95       	ror	r31
    1c3e:	9f 5f       	subi	r25, 0xFF	; 255
    1c40:	c9 f7       	brne	.-14     	; 0x1c34 <__divsf3_pse+0x74>
    1c42:	88 0f       	add	r24, r24
    1c44:	91 1d       	adc	r25, r1
    1c46:	96 95       	lsr	r25
    1c48:	87 95       	ror	r24
    1c4a:	97 f9       	bld	r25, 7
    1c4c:	08 95       	ret
    1c4e:	e1 e0       	ldi	r30, 0x01	; 1
    1c50:	66 0f       	add	r22, r22
    1c52:	77 1f       	adc	r23, r23
    1c54:	88 1f       	adc	r24, r24
    1c56:	bb 1f       	adc	r27, r27
    1c58:	62 17       	cp	r22, r18
    1c5a:	73 07       	cpc	r23, r19
    1c5c:	84 07       	cpc	r24, r20
    1c5e:	ba 07       	cpc	r27, r26
    1c60:	20 f0       	brcs	.+8      	; 0x1c6a <__divsf3_pse+0xaa>
    1c62:	62 1b       	sub	r22, r18
    1c64:	73 0b       	sbc	r23, r19
    1c66:	84 0b       	sbc	r24, r20
    1c68:	ba 0b       	sbc	r27, r26
    1c6a:	ee 1f       	adc	r30, r30
    1c6c:	88 f7       	brcc	.-30     	; 0x1c50 <__divsf3_pse+0x90>
    1c6e:	e0 95       	com	r30
    1c70:	08 95       	ret

00001c72 <__fixunssfsi>:
    1c72:	bc d0       	rcall	.+376    	; 0x1dec <__fp_splitA>
    1c74:	88 f0       	brcs	.+34     	; 0x1c98 <__fixunssfsi+0x26>
    1c76:	9f 57       	subi	r25, 0x7F	; 127
    1c78:	90 f0       	brcs	.+36     	; 0x1c9e <__fixunssfsi+0x2c>
    1c7a:	b9 2f       	mov	r27, r25
    1c7c:	99 27       	eor	r25, r25
    1c7e:	b7 51       	subi	r27, 0x17	; 23
    1c80:	a0 f0       	brcs	.+40     	; 0x1caa <__fixunssfsi+0x38>
    1c82:	d1 f0       	breq	.+52     	; 0x1cb8 <__fixunssfsi+0x46>
    1c84:	66 0f       	add	r22, r22
    1c86:	77 1f       	adc	r23, r23
    1c88:	88 1f       	adc	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	1a f0       	brmi	.+6      	; 0x1c94 <__fixunssfsi+0x22>
    1c8e:	ba 95       	dec	r27
    1c90:	c9 f7       	brne	.-14     	; 0x1c84 <__fixunssfsi+0x12>
    1c92:	12 c0       	rjmp	.+36     	; 0x1cb8 <__fixunssfsi+0x46>
    1c94:	b1 30       	cpi	r27, 0x01	; 1
    1c96:	81 f0       	breq	.+32     	; 0x1cb8 <__fixunssfsi+0x46>
    1c98:	c3 d0       	rcall	.+390    	; 0x1e20 <__fp_zero>
    1c9a:	b1 e0       	ldi	r27, 0x01	; 1
    1c9c:	08 95       	ret
    1c9e:	c0 c0       	rjmp	.+384    	; 0x1e20 <__fp_zero>
    1ca0:	67 2f       	mov	r22, r23
    1ca2:	78 2f       	mov	r23, r24
    1ca4:	88 27       	eor	r24, r24
    1ca6:	b8 5f       	subi	r27, 0xF8	; 248
    1ca8:	39 f0       	breq	.+14     	; 0x1cb8 <__fixunssfsi+0x46>
    1caa:	b9 3f       	cpi	r27, 0xF9	; 249
    1cac:	cc f3       	brlt	.-14     	; 0x1ca0 <__fixunssfsi+0x2e>
    1cae:	86 95       	lsr	r24
    1cb0:	77 95       	ror	r23
    1cb2:	67 95       	ror	r22
    1cb4:	b3 95       	inc	r27
    1cb6:	d9 f7       	brne	.-10     	; 0x1cae <__fixunssfsi+0x3c>
    1cb8:	3e f4       	brtc	.+14     	; 0x1cc8 <__fixunssfsi+0x56>
    1cba:	90 95       	com	r25
    1cbc:	80 95       	com	r24
    1cbe:	70 95       	com	r23
    1cc0:	61 95       	neg	r22
    1cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc8:	08 95       	ret

00001cca <__floatunsisf>:
    1cca:	e8 94       	clt
    1ccc:	09 c0       	rjmp	.+18     	; 0x1ce0 <__floatsisf+0x12>

00001cce <__floatsisf>:
    1cce:	97 fb       	bst	r25, 7
    1cd0:	3e f4       	brtc	.+14     	; 0x1ce0 <__floatsisf+0x12>
    1cd2:	90 95       	com	r25
    1cd4:	80 95       	com	r24
    1cd6:	70 95       	com	r23
    1cd8:	61 95       	neg	r22
    1cda:	7f 4f       	sbci	r23, 0xFF	; 255
    1cdc:	8f 4f       	sbci	r24, 0xFF	; 255
    1cde:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce0:	99 23       	and	r25, r25
    1ce2:	a9 f0       	breq	.+42     	; 0x1d0e <__floatsisf+0x40>
    1ce4:	f9 2f       	mov	r31, r25
    1ce6:	96 e9       	ldi	r25, 0x96	; 150
    1ce8:	bb 27       	eor	r27, r27
    1cea:	93 95       	inc	r25
    1cec:	f6 95       	lsr	r31
    1cee:	87 95       	ror	r24
    1cf0:	77 95       	ror	r23
    1cf2:	67 95       	ror	r22
    1cf4:	b7 95       	ror	r27
    1cf6:	f1 11       	cpse	r31, r1
    1cf8:	f8 cf       	rjmp	.-16     	; 0x1cea <__floatsisf+0x1c>
    1cfa:	fa f4       	brpl	.+62     	; 0x1d3a <__floatsisf+0x6c>
    1cfc:	bb 0f       	add	r27, r27
    1cfe:	11 f4       	brne	.+4      	; 0x1d04 <__floatsisf+0x36>
    1d00:	60 ff       	sbrs	r22, 0
    1d02:	1b c0       	rjmp	.+54     	; 0x1d3a <__floatsisf+0x6c>
    1d04:	6f 5f       	subi	r22, 0xFF	; 255
    1d06:	7f 4f       	sbci	r23, 0xFF	; 255
    1d08:	8f 4f       	sbci	r24, 0xFF	; 255
    1d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0c:	16 c0       	rjmp	.+44     	; 0x1d3a <__floatsisf+0x6c>
    1d0e:	88 23       	and	r24, r24
    1d10:	11 f0       	breq	.+4      	; 0x1d16 <__floatsisf+0x48>
    1d12:	96 e9       	ldi	r25, 0x96	; 150
    1d14:	11 c0       	rjmp	.+34     	; 0x1d38 <__floatsisf+0x6a>
    1d16:	77 23       	and	r23, r23
    1d18:	21 f0       	breq	.+8      	; 0x1d22 <__floatsisf+0x54>
    1d1a:	9e e8       	ldi	r25, 0x8E	; 142
    1d1c:	87 2f       	mov	r24, r23
    1d1e:	76 2f       	mov	r23, r22
    1d20:	05 c0       	rjmp	.+10     	; 0x1d2c <__floatsisf+0x5e>
    1d22:	66 23       	and	r22, r22
    1d24:	71 f0       	breq	.+28     	; 0x1d42 <__floatsisf+0x74>
    1d26:	96 e8       	ldi	r25, 0x86	; 134
    1d28:	86 2f       	mov	r24, r22
    1d2a:	70 e0       	ldi	r23, 0x00	; 0
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	2a f0       	brmi	.+10     	; 0x1d3a <__floatsisf+0x6c>
    1d30:	9a 95       	dec	r25
    1d32:	66 0f       	add	r22, r22
    1d34:	77 1f       	adc	r23, r23
    1d36:	88 1f       	adc	r24, r24
    1d38:	da f7       	brpl	.-10     	; 0x1d30 <__floatsisf+0x62>
    1d3a:	88 0f       	add	r24, r24
    1d3c:	96 95       	lsr	r25
    1d3e:	87 95       	ror	r24
    1d40:	97 f9       	bld	r25, 7
    1d42:	08 95       	ret

00001d44 <__fp_cmp>:
    1d44:	99 0f       	add	r25, r25
    1d46:	00 08       	sbc	r0, r0
    1d48:	55 0f       	add	r21, r21
    1d4a:	aa 0b       	sbc	r26, r26
    1d4c:	e0 e8       	ldi	r30, 0x80	; 128
    1d4e:	fe ef       	ldi	r31, 0xFE	; 254
    1d50:	16 16       	cp	r1, r22
    1d52:	17 06       	cpc	r1, r23
    1d54:	e8 07       	cpc	r30, r24
    1d56:	f9 07       	cpc	r31, r25
    1d58:	c0 f0       	brcs	.+48     	; 0x1d8a <__fp_cmp+0x46>
    1d5a:	12 16       	cp	r1, r18
    1d5c:	13 06       	cpc	r1, r19
    1d5e:	e4 07       	cpc	r30, r20
    1d60:	f5 07       	cpc	r31, r21
    1d62:	98 f0       	brcs	.+38     	; 0x1d8a <__fp_cmp+0x46>
    1d64:	62 1b       	sub	r22, r18
    1d66:	73 0b       	sbc	r23, r19
    1d68:	84 0b       	sbc	r24, r20
    1d6a:	95 0b       	sbc	r25, r21
    1d6c:	39 f4       	brne	.+14     	; 0x1d7c <__fp_cmp+0x38>
    1d6e:	0a 26       	eor	r0, r26
    1d70:	61 f0       	breq	.+24     	; 0x1d8a <__fp_cmp+0x46>
    1d72:	23 2b       	or	r18, r19
    1d74:	24 2b       	or	r18, r20
    1d76:	25 2b       	or	r18, r21
    1d78:	21 f4       	brne	.+8      	; 0x1d82 <__fp_cmp+0x3e>
    1d7a:	08 95       	ret
    1d7c:	0a 26       	eor	r0, r26
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <__fp_cmp+0x3e>
    1d80:	a1 40       	sbci	r26, 0x01	; 1
    1d82:	a6 95       	lsr	r26
    1d84:	8f ef       	ldi	r24, 0xFF	; 255
    1d86:	81 1d       	adc	r24, r1
    1d88:	81 1d       	adc	r24, r1
    1d8a:	08 95       	ret

00001d8c <__fp_inf>:
    1d8c:	97 f9       	bld	r25, 7
    1d8e:	9f 67       	ori	r25, 0x7F	; 127
    1d90:	80 e8       	ldi	r24, 0x80	; 128
    1d92:	70 e0       	ldi	r23, 0x00	; 0
    1d94:	60 e0       	ldi	r22, 0x00	; 0
    1d96:	08 95       	ret

00001d98 <__fp_nan>:
    1d98:	9f ef       	ldi	r25, 0xFF	; 255
    1d9a:	80 ec       	ldi	r24, 0xC0	; 192
    1d9c:	08 95       	ret

00001d9e <__fp_pscA>:
    1d9e:	00 24       	eor	r0, r0
    1da0:	0a 94       	dec	r0
    1da2:	16 16       	cp	r1, r22
    1da4:	17 06       	cpc	r1, r23
    1da6:	18 06       	cpc	r1, r24
    1da8:	09 06       	cpc	r0, r25
    1daa:	08 95       	ret

00001dac <__fp_pscB>:
    1dac:	00 24       	eor	r0, r0
    1dae:	0a 94       	dec	r0
    1db0:	12 16       	cp	r1, r18
    1db2:	13 06       	cpc	r1, r19
    1db4:	14 06       	cpc	r1, r20
    1db6:	05 06       	cpc	r0, r21
    1db8:	08 95       	ret

00001dba <__fp_round>:
    1dba:	09 2e       	mov	r0, r25
    1dbc:	03 94       	inc	r0
    1dbe:	00 0c       	add	r0, r0
    1dc0:	11 f4       	brne	.+4      	; 0x1dc6 <__fp_round+0xc>
    1dc2:	88 23       	and	r24, r24
    1dc4:	52 f0       	brmi	.+20     	; 0x1dda <__fp_round+0x20>
    1dc6:	bb 0f       	add	r27, r27
    1dc8:	40 f4       	brcc	.+16     	; 0x1dda <__fp_round+0x20>
    1dca:	bf 2b       	or	r27, r31
    1dcc:	11 f4       	brne	.+4      	; 0x1dd2 <__fp_round+0x18>
    1dce:	60 ff       	sbrs	r22, 0
    1dd0:	04 c0       	rjmp	.+8      	; 0x1dda <__fp_round+0x20>
    1dd2:	6f 5f       	subi	r22, 0xFF	; 255
    1dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dda:	08 95       	ret

00001ddc <__fp_split3>:
    1ddc:	57 fd       	sbrc	r21, 7
    1dde:	90 58       	subi	r25, 0x80	; 128
    1de0:	44 0f       	add	r20, r20
    1de2:	55 1f       	adc	r21, r21
    1de4:	59 f0       	breq	.+22     	; 0x1dfc <__fp_splitA+0x10>
    1de6:	5f 3f       	cpi	r21, 0xFF	; 255
    1de8:	71 f0       	breq	.+28     	; 0x1e06 <__fp_splitA+0x1a>
    1dea:	47 95       	ror	r20

00001dec <__fp_splitA>:
    1dec:	88 0f       	add	r24, r24
    1dee:	97 fb       	bst	r25, 7
    1df0:	99 1f       	adc	r25, r25
    1df2:	61 f0       	breq	.+24     	; 0x1e0c <__fp_splitA+0x20>
    1df4:	9f 3f       	cpi	r25, 0xFF	; 255
    1df6:	79 f0       	breq	.+30     	; 0x1e16 <__fp_splitA+0x2a>
    1df8:	87 95       	ror	r24
    1dfa:	08 95       	ret
    1dfc:	12 16       	cp	r1, r18
    1dfe:	13 06       	cpc	r1, r19
    1e00:	14 06       	cpc	r1, r20
    1e02:	55 1f       	adc	r21, r21
    1e04:	f2 cf       	rjmp	.-28     	; 0x1dea <__fp_split3+0xe>
    1e06:	46 95       	lsr	r20
    1e08:	f1 df       	rcall	.-30     	; 0x1dec <__fp_splitA>
    1e0a:	08 c0       	rjmp	.+16     	; 0x1e1c <__fp_splitA+0x30>
    1e0c:	16 16       	cp	r1, r22
    1e0e:	17 06       	cpc	r1, r23
    1e10:	18 06       	cpc	r1, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	f1 cf       	rjmp	.-30     	; 0x1df8 <__fp_splitA+0xc>
    1e16:	86 95       	lsr	r24
    1e18:	71 05       	cpc	r23, r1
    1e1a:	61 05       	cpc	r22, r1
    1e1c:	08 94       	sec
    1e1e:	08 95       	ret

00001e20 <__fp_zero>:
    1e20:	e8 94       	clt

00001e22 <__fp_szero>:
    1e22:	bb 27       	eor	r27, r27
    1e24:	66 27       	eor	r22, r22
    1e26:	77 27       	eor	r23, r23
    1e28:	cb 01       	movw	r24, r22
    1e2a:	97 f9       	bld	r25, 7
    1e2c:	08 95       	ret

00001e2e <__gesf2>:
    1e2e:	8a df       	rcall	.-236    	; 0x1d44 <__fp_cmp>
    1e30:	08 f4       	brcc	.+2      	; 0x1e34 <__gesf2+0x6>
    1e32:	8f ef       	ldi	r24, 0xFF	; 255
    1e34:	08 95       	ret

00001e36 <__mulsf3>:
    1e36:	0b d0       	rcall	.+22     	; 0x1e4e <__mulsf3x>
    1e38:	c0 cf       	rjmp	.-128    	; 0x1dba <__fp_round>
    1e3a:	b1 df       	rcall	.-158    	; 0x1d9e <__fp_pscA>
    1e3c:	28 f0       	brcs	.+10     	; 0x1e48 <__mulsf3+0x12>
    1e3e:	b6 df       	rcall	.-148    	; 0x1dac <__fp_pscB>
    1e40:	18 f0       	brcs	.+6      	; 0x1e48 <__mulsf3+0x12>
    1e42:	95 23       	and	r25, r21
    1e44:	09 f0       	breq	.+2      	; 0x1e48 <__mulsf3+0x12>
    1e46:	a2 cf       	rjmp	.-188    	; 0x1d8c <__fp_inf>
    1e48:	a7 cf       	rjmp	.-178    	; 0x1d98 <__fp_nan>
    1e4a:	11 24       	eor	r1, r1
    1e4c:	ea cf       	rjmp	.-44     	; 0x1e22 <__fp_szero>

00001e4e <__mulsf3x>:
    1e4e:	c6 df       	rcall	.-116    	; 0x1ddc <__fp_split3>
    1e50:	a0 f3       	brcs	.-24     	; 0x1e3a <__mulsf3+0x4>

00001e52 <__mulsf3_pse>:
    1e52:	95 9f       	mul	r25, r21
    1e54:	d1 f3       	breq	.-12     	; 0x1e4a <__mulsf3+0x14>
    1e56:	95 0f       	add	r25, r21
    1e58:	50 e0       	ldi	r21, 0x00	; 0
    1e5a:	55 1f       	adc	r21, r21
    1e5c:	62 9f       	mul	r22, r18
    1e5e:	f0 01       	movw	r30, r0
    1e60:	72 9f       	mul	r23, r18
    1e62:	bb 27       	eor	r27, r27
    1e64:	f0 0d       	add	r31, r0
    1e66:	b1 1d       	adc	r27, r1
    1e68:	63 9f       	mul	r22, r19
    1e6a:	aa 27       	eor	r26, r26
    1e6c:	f0 0d       	add	r31, r0
    1e6e:	b1 1d       	adc	r27, r1
    1e70:	aa 1f       	adc	r26, r26
    1e72:	64 9f       	mul	r22, r20
    1e74:	66 27       	eor	r22, r22
    1e76:	b0 0d       	add	r27, r0
    1e78:	a1 1d       	adc	r26, r1
    1e7a:	66 1f       	adc	r22, r22
    1e7c:	82 9f       	mul	r24, r18
    1e7e:	22 27       	eor	r18, r18
    1e80:	b0 0d       	add	r27, r0
    1e82:	a1 1d       	adc	r26, r1
    1e84:	62 1f       	adc	r22, r18
    1e86:	73 9f       	mul	r23, r19
    1e88:	b0 0d       	add	r27, r0
    1e8a:	a1 1d       	adc	r26, r1
    1e8c:	62 1f       	adc	r22, r18
    1e8e:	83 9f       	mul	r24, r19
    1e90:	a0 0d       	add	r26, r0
    1e92:	61 1d       	adc	r22, r1
    1e94:	22 1f       	adc	r18, r18
    1e96:	74 9f       	mul	r23, r20
    1e98:	33 27       	eor	r19, r19
    1e9a:	a0 0d       	add	r26, r0
    1e9c:	61 1d       	adc	r22, r1
    1e9e:	23 1f       	adc	r18, r19
    1ea0:	84 9f       	mul	r24, r20
    1ea2:	60 0d       	add	r22, r0
    1ea4:	21 1d       	adc	r18, r1
    1ea6:	82 2f       	mov	r24, r18
    1ea8:	76 2f       	mov	r23, r22
    1eaa:	6a 2f       	mov	r22, r26
    1eac:	11 24       	eor	r1, r1
    1eae:	9f 57       	subi	r25, 0x7F	; 127
    1eb0:	50 40       	sbci	r21, 0x00	; 0
    1eb2:	8a f0       	brmi	.+34     	; 0x1ed6 <__mulsf3_pse+0x84>
    1eb4:	e1 f0       	breq	.+56     	; 0x1eee <__mulsf3_pse+0x9c>
    1eb6:	88 23       	and	r24, r24
    1eb8:	4a f0       	brmi	.+18     	; 0x1ecc <__mulsf3_pse+0x7a>
    1eba:	ee 0f       	add	r30, r30
    1ebc:	ff 1f       	adc	r31, r31
    1ebe:	bb 1f       	adc	r27, r27
    1ec0:	66 1f       	adc	r22, r22
    1ec2:	77 1f       	adc	r23, r23
    1ec4:	88 1f       	adc	r24, r24
    1ec6:	91 50       	subi	r25, 0x01	; 1
    1ec8:	50 40       	sbci	r21, 0x00	; 0
    1eca:	a9 f7       	brne	.-22     	; 0x1eb6 <__mulsf3_pse+0x64>
    1ecc:	9e 3f       	cpi	r25, 0xFE	; 254
    1ece:	51 05       	cpc	r21, r1
    1ed0:	70 f0       	brcs	.+28     	; 0x1eee <__mulsf3_pse+0x9c>
    1ed2:	5c cf       	rjmp	.-328    	; 0x1d8c <__fp_inf>
    1ed4:	a6 cf       	rjmp	.-180    	; 0x1e22 <__fp_szero>
    1ed6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ed8:	ec f3       	brlt	.-6      	; 0x1ed4 <__mulsf3_pse+0x82>
    1eda:	98 3e       	cpi	r25, 0xE8	; 232
    1edc:	dc f3       	brlt	.-10     	; 0x1ed4 <__mulsf3_pse+0x82>
    1ede:	86 95       	lsr	r24
    1ee0:	77 95       	ror	r23
    1ee2:	67 95       	ror	r22
    1ee4:	b7 95       	ror	r27
    1ee6:	f7 95       	ror	r31
    1ee8:	e7 95       	ror	r30
    1eea:	9f 5f       	subi	r25, 0xFF	; 255
    1eec:	c1 f7       	brne	.-16     	; 0x1ede <__mulsf3_pse+0x8c>
    1eee:	fe 2b       	or	r31, r30
    1ef0:	88 0f       	add	r24, r24
    1ef2:	91 1d       	adc	r25, r1
    1ef4:	96 95       	lsr	r25
    1ef6:	87 95       	ror	r24
    1ef8:	97 f9       	bld	r25, 7
    1efa:	08 95       	ret

00001efc <__mulsi3>:
    1efc:	62 9f       	mul	r22, r18
    1efe:	d0 01       	movw	r26, r0
    1f00:	73 9f       	mul	r23, r19
    1f02:	f0 01       	movw	r30, r0
    1f04:	82 9f       	mul	r24, r18
    1f06:	e0 0d       	add	r30, r0
    1f08:	f1 1d       	adc	r31, r1
    1f0a:	64 9f       	mul	r22, r20
    1f0c:	e0 0d       	add	r30, r0
    1f0e:	f1 1d       	adc	r31, r1
    1f10:	92 9f       	mul	r25, r18
    1f12:	f0 0d       	add	r31, r0
    1f14:	83 9f       	mul	r24, r19
    1f16:	f0 0d       	add	r31, r0
    1f18:	74 9f       	mul	r23, r20
    1f1a:	f0 0d       	add	r31, r0
    1f1c:	65 9f       	mul	r22, r21
    1f1e:	f0 0d       	add	r31, r0
    1f20:	99 27       	eor	r25, r25
    1f22:	72 9f       	mul	r23, r18
    1f24:	b0 0d       	add	r27, r0
    1f26:	e1 1d       	adc	r30, r1
    1f28:	f9 1f       	adc	r31, r25
    1f2a:	63 9f       	mul	r22, r19
    1f2c:	b0 0d       	add	r27, r0
    1f2e:	e1 1d       	adc	r30, r1
    1f30:	f9 1f       	adc	r31, r25
    1f32:	bd 01       	movw	r22, r26
    1f34:	cf 01       	movw	r24, r30
    1f36:	11 24       	eor	r1, r1
    1f38:	08 95       	ret

00001f3a <__udivmodsi4>:
    1f3a:	a1 e2       	ldi	r26, 0x21	; 33
    1f3c:	1a 2e       	mov	r1, r26
    1f3e:	aa 1b       	sub	r26, r26
    1f40:	bb 1b       	sub	r27, r27
    1f42:	fd 01       	movw	r30, r26
    1f44:	0d c0       	rjmp	.+26     	; 0x1f60 <__udivmodsi4_ep>

00001f46 <__udivmodsi4_loop>:
    1f46:	aa 1f       	adc	r26, r26
    1f48:	bb 1f       	adc	r27, r27
    1f4a:	ee 1f       	adc	r30, r30
    1f4c:	ff 1f       	adc	r31, r31
    1f4e:	a2 17       	cp	r26, r18
    1f50:	b3 07       	cpc	r27, r19
    1f52:	e4 07       	cpc	r30, r20
    1f54:	f5 07       	cpc	r31, r21
    1f56:	20 f0       	brcs	.+8      	; 0x1f60 <__udivmodsi4_ep>
    1f58:	a2 1b       	sub	r26, r18
    1f5a:	b3 0b       	sbc	r27, r19
    1f5c:	e4 0b       	sbc	r30, r20
    1f5e:	f5 0b       	sbc	r31, r21

00001f60 <__udivmodsi4_ep>:
    1f60:	66 1f       	adc	r22, r22
    1f62:	77 1f       	adc	r23, r23
    1f64:	88 1f       	adc	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	1a 94       	dec	r1
    1f6a:	69 f7       	brne	.-38     	; 0x1f46 <__udivmodsi4_loop>
    1f6c:	60 95       	com	r22
    1f6e:	70 95       	com	r23
    1f70:	80 95       	com	r24
    1f72:	90 95       	com	r25
    1f74:	9b 01       	movw	r18, r22
    1f76:	ac 01       	movw	r20, r24
    1f78:	bd 01       	movw	r22, r26
    1f7a:	cf 01       	movw	r24, r30
    1f7c:	08 95       	ret

00001f7e <strcpy_P>:
    1f7e:	fb 01       	movw	r30, r22
    1f80:	dc 01       	movw	r26, r24
    1f82:	05 90       	lpm	r0, Z+
    1f84:	0d 92       	st	X+, r0
    1f86:	00 20       	and	r0, r0
    1f88:	e1 f7       	brne	.-8      	; 0x1f82 <strcpy_P+0x4>
    1f8a:	08 95       	ret

00001f8c <_exit>:
    1f8c:	f8 94       	cli

00001f8e <__stop_program>:
    1f8e:	ff cf       	rjmp	.-2      	; 0x1f8e <__stop_program>
