   1               		.file	"usart.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 105               	.global	USARTinit
 107               	USARTinit:
   1:usart.c       **** // USART transmission Functions
   2:usart.c       **** 
   3:usart.c       **** #include <avr/io.h>
   4:usart.c       **** #include <avr/delay.h>
   5:usart.c       **** #include "usart.h"
   6:usart.c       **** #define USART_STATUS UCSR0A
   7:usart.c       **** 
   8:usart.c       **** /*
   9:usart.c       **** -- You should define variables in your source code --
  10:usart.c       **** #define FOSC 8000000 // Clock Speed 
  11:usart.c       **** #define BAUD   19200 
  12:usart.c       **** #define UBRR FOSC/16/BAUD-1 
  13:usart.c       **** */
  14:usart.c       **** 
  15:usart.c       **** // USART initialize
  16:usart.c       **** void USARTinit(unsigned int ubrr){
 109               	.LM0:
 110               	.LFBB1:
 111               	/* prologue: function */
 112               	/* frame size = 0 */
 113               	/* stack size = 0 */
 114               	.L__stack_usage = 0
  17:usart.c       **** 	UBRR0H = (unsigned char)(ubrr>>8);
 116               	.LM1:
 117 0000 9093 C500 		sts 197,r25
  18:usart.c       **** 	UBRR0L = (unsigned char)ubrr;
 119               	.LM2:
 120 0004 8093 C400 		sts 196,r24
  19:usart.c       **** 	
  20:usart.c       **** 	unsigned int Mode= 0b00;	// USART mode select
  21:usart.c       **** 								//   '00' : Asynchronous
  22:usart.c       **** 								//   '01' : Synchronous
  23:usart.c       **** 	unsigned int Pari= 0b10;	// Parity mode select
  24:usart.c       **** 								//   '00': No parity
  25:usart.c       **** 								//   '10': Even parity
  26:usart.c       **** 								//   '11': Odd parity
  27:usart.c       **** 	unsigned int STPB= 0b0;		// Stop bit length
  28:usart.c       **** 								//   '0' : 1-bit
  29:usart.c       **** 								//   '1' : 2-bit
  30:usart.c       **** 	unsigned int CLKE= 0b0;		// Clock edge for sampling
  31:usart.c       **** 								//  *This bit must be set '0' in Asynchronous mode 
  32:usart.c       **** 								//   '0' : Negative 
  33:usart.c       **** 								//   '1' : Positive
  34:usart.c       **** 	unsigned int RCIE= 0b1;		// Receive complete interuput enable
  35:usart.c       **** 	unsigned int TCIE= 0b0;		// Transmit complete interuput enable
  36:usart.c       **** 	unsigned int TRIE= 0b0;		// Transmit Data register empty interrupt enable
  37:usart.c       **** 	unsigned int RE  = 0b1;		// Receive enable
  38:usart.c       **** 	unsigned int TE  = 0b1;		// Transmit enable
  39:usart.c       **** 	unsigned int Nb  = 0b011;	// Number of bit per packet
  40:usart.c       **** 								//   '000' : 5bit
  41:usart.c       **** 								//   '001' : 6bit
  42:usart.c       **** 								//   '010' : 7bit
  43:usart.c       **** 								//   '011' : 8bit
  44:usart.c       **** 	unsigned int U2X = 0;		// Over clocking operation
  45:usart.c       **** 	UCSR0B = (RCIE<<7)|(TCIE<<6)|(TRIE<<5)|(RE<<4)|(TE<<3)|((Nb>>2)<<2);
 122               	.LM3:
 123 0008 88E9      		ldi r24,lo8(-104)
 124 000a 8093 C100 		sts 193,r24
  46:usart.c       **** 	UCSR0C = (Mode<<6)|(Pari<<4)|(STPB<<3)|(Nb<<1)|(CLKE);
 126               	.LM4:
 127 000e 86E2      		ldi r24,lo8(38)
 128 0010 8093 C200 		sts 194,r24
  47:usart.c       **** 	UCSR0A = U2X<<1;
 130               	.LM5:
 131 0014 1092 C000 		sts 192,__zero_reg__
 132               	/* epilogue start */
  48:usart.c       **** }
 134               	.LM6:
 135 0018 0895      		ret
 137               	.Lscope1:
 140               	.global	USART_transmit
 142               	USART_transmit:
  49:usart.c       **** 
  50:usart.c       **** // USART transmit
  51:usart.c       **** void USART_transmit(unsigned char data){
 144               	.LM7:
 145               	.LFBB2:
 146               	/* prologue: function */
 147               	/* frame size = 0 */
 148               	/* stack size = 0 */
 149               	.L__stack_usage = 0
 150               	.L3:
  52:usart.c       **** 	while(!(USART_STATUS & (1<<UDRE0)));	// Wait until tx buffer is empty
 152               	.LM8:
 153 001a 9091 C000 		lds r25,192
 154 001e 95FF      		sbrs r25,5
 155 0020 00C0      		rjmp .L3
  53:usart.c       **** 	UDR0 = data;
 157               	.LM9:
 158 0022 8093 C600 		sts 198,r24
 159               	/* epilogue start */
  54:usart.c       **** }
 161               	.LM10:
 162 0026 0895      		ret
 164               	.Lscope2:
 166               	.global	USART_transmit_str
 168               	USART_transmit_str:
  55:usart.c       **** 
  56:usart.c       **** void USART_transmit_str(unsigned char *s){
 170               	.LM11:
 171               	.LFBB3:
 172 0028 CF93      		push r28
 173 002a DF93      		push r29
 174               	/* prologue: function */
 175               	/* frame size = 0 */
 176               	/* stack size = 2 */
 177               	.L__stack_usage = 2
 179               	.LM12:
 180 002c EC01      		movw r28,r24
  57:usart.c       ****     while (*s != 0) {
 182               	.LM13:
 183 002e 00C0      		rjmp .L6
 184               	.L7:
  58:usart.c       ****         USART_transmit(*s);
 186               	.LM14:
 187 0030 0E94 0000 		call USART_transmit
 188               	.L6:
  57:usart.c       ****     while (*s != 0) {
 190               	.LM15:
 191 0034 8991      		ld r24,Y+
 192 0036 8823      		tst r24
 193 0038 01F4      		brne .L7
 194               	/* epilogue start */
  59:usart.c       ****         s++;
  60:usart.c       ****     } 
  61:usart.c       **** }
 196               	.LM16:
 197 003a DF91      		pop r29
 198 003c CF91      		pop r28
 199 003e 0895      		ret
 201               	.Lscope3:
 207               	.global	USART_transmit_numeric
 209               	USART_transmit_numeric:
  62:usart.c       **** 
  63:usart.c       **** void USART_transmit_numeric(float num, unsigned int Nint, unsigned int Nfrac, unsigned int sign){
 211               	.LM17:
 212               	.LFBB4:
 213 0040 2F92      		push r2
 214 0042 3F92      		push r3
 215 0044 4F92      		push r4
 216 0046 5F92      		push r5
 217 0048 6F92      		push r6
 218 004a 7F92      		push r7
 219 004c 8F92      		push r8
 220 004e 9F92      		push r9
 221 0050 AF92      		push r10
 222 0052 BF92      		push r11
 223 0054 CF92      		push r12
 224 0056 DF92      		push r13
 225 0058 EF92      		push r14
 226 005a FF92      		push r15
 227 005c 0F93      		push r16
 228 005e 1F93      		push r17
 229 0060 CF93      		push r28
 230 0062 DF93      		push r29
 231 0064 CDB7      		in r28,__SP_L__
 232 0066 DEB7      		in r29,__SP_H__
 233 0068 2897      		sbiw r28,8
 234 006a 0FB6      		in __tmp_reg__,__SREG__
 235 006c F894      		cli
 236 006e DEBF      		out __SP_H__,r29
 237 0070 0FBE      		out __SREG__,__tmp_reg__
 238 0072 CDBF      		out __SP_L__,r28
 239               	/* prologue: function */
 240               	/* frame size = 8 */
 241               	/* stack size = 26 */
 242               	.L__stack_usage = 26
 243 0074 6B01      		movw r12,r22
 244 0076 7C01      		movw r14,r24
 245 0078 1A01      		movw r2,r20
 246 007a 2901      		movw r4,r18
  64:usart.c       ****     unsigned long int DivFactor = 1;
  65:usart.c       ****     unsigned int n, m;
  66:usart.c       ****     unsigned int d[10];
  67:usart.c       ****     unsigned int valid = 0;
  68:usart.c       ****     
  69:usart.c       ****     for(n=0;n<Nfrac;n++){
 248               	.LM18:
 249 007c 80E0      		ldi r24,lo8(0)
 250 007e 90E0      		ldi r25,hi8(0)
 251 0080 4C01      		movw r8,r24
 252 0082 00C0      		rjmp .L9
 253               	.L10:
  70:usart.c       ****         num = num * 10;
 255               	.LM19:
 256 0084 C701      		movw r24,r14
 257 0086 B601      		movw r22,r12
 258 0088 20E0      		ldi r18,lo8(0x41200000)
 259 008a 30E0      		ldi r19,hi8(0x41200000)
 260 008c 40E2      		ldi r20,hlo8(0x41200000)
 261 008e 51E4      		ldi r21,hhi8(0x41200000)
 262 0090 0E94 0000 		call __mulsf3
 263 0094 C62E      		mov r12,r22
 264 0096 D72E      		mov r13,r23
 265 0098 E82E      		mov r14,r24
 266 009a F92E      		mov r15,r25
  69:usart.c       ****     for(n=0;n<Nfrac;n++){
 268               	.LM20:
 269 009c 0894      		sec
 270 009e 811C      		adc r8,__zero_reg__
 271 00a0 911C      		adc r9,__zero_reg__
 272               	.L9:
  69:usart.c       ****     for(n=0;n<Nfrac;n++){
 274               	.LM21:
 275 00a2 8414      		cp r8,r4
 276 00a4 9504      		cpc r9,r5
 277 00a6 01F4      		brne .L10
  71:usart.c       ****     }
  72:usart.c       ****     
  73:usart.c       ****     // Detect sign
  74:usart.c       ****     if( sign == 1){
 279               	.LM22:
 280 00a8 0130      		cpi r16,1
 281 00aa 1105      		cpc r17,__zero_reg__
 282 00ac 01F4      		brne .L11
  75:usart.c       ****         if( num < 0 ){
 284               	.LM23:
 285 00ae C701      		movw r24,r14
 286 00b0 B601      		movw r22,r12
 287 00b2 20E0      		ldi r18,lo8(0x0)
 288 00b4 30E0      		ldi r19,hi8(0x0)
 289 00b6 A901      		movw r20,r18
 290 00b8 0E94 0000 		call __ltsf2
 291 00bc 87FF      		sbrs r24,7
 292 00be 00C0      		rjmp .L29
  76:usart.c       ****             USART_transmit('-');
 294               	.LM24:
 295 00c0 8DE2      		ldi r24,lo8(45)
 296 00c2 0E94 0000 		call USART_transmit
  77:usart.c       ****             num = -num;
 298               	.LM25:
 299 00c6 F7FA      		bst r15,7
 300 00c8 F094      		com r15
 301 00ca F7F8      		bld r15,7
 302 00cc F094      		com r15
 303               	.L11:
  78:usart.c       ****         }else{
  79:usart.c       ****             USART_transmit('+');
  80:usart.c       ****         }
  81:usart.c       ****     }
  82:usart.c       ****     // end of
  83:usart.c       **** 				
  84:usart.c       ****     for(n=0;n<=Nint+Nfrac-1;n++){
  85:usart.c       ****         
  86:usart.c       ****         if( ( n== Nint ) && ( Nfrac!=0 )){
  87:usart.c       ****             USART_transmit('.');
  88:usart.c       ****         }
  89:usart.c       ****         
  90:usart.c       ****         DivFactor = 1;
  91:usart.c       ****         for(m=n+1;m<Nint+Nfrac;m++){
  92:usart.c       ****             DivFactor = DivFactor * 10;
  93:usart.c       ****         }
  94:usart.c       ****         
  95:usart.c       ****         d[n] = (unsigned int)( num / DivFactor );
  96:usart.c       ****         if( (valid == 0) && ( d[n]!=0 || n==Nint-1) ) valid = 1;
 305               	.LM26:
 306 00ce 00E0      		ldi r16,lo8(0)
 307 00d0 10E0      		ldi r17,hi8(0)
 308 00d2 6624      		clr r6
 309 00d4 7724      		clr r7
  84:usart.c       ****     for(n=0;n<=Nint+Nfrac-1;n++){
 311               	.LM27:
 312 00d6 9201      		movw r18,r4
 313 00d8 220D      		add r18,r2
 314 00da 331D      		adc r19,r3
 315 00dc 3A83      		std Y+2,r19
 316 00de 2983      		std Y+1,r18
 317 00e0 2150      		subi r18,lo8(-(-1))
 318 00e2 3040      		sbci r19,hi8(-(-1))
 319 00e4 3C83      		std Y+4,r19
 320 00e6 2B83      		std Y+3,r18
 322               	.LM28:
 323 00e8 C101      		movw r24,r2
 324 00ea 0197      		sbiw r24,1
 325 00ec 9E83      		std Y+6,r25
 326 00ee 8D83      		std Y+5,r24
 327 00f0 7886      		std Y+8,r7
 328 00f2 6F82      		std Y+7,r6
 329 00f4 00C0      		rjmp .L14
 330               	.L29:
  79:usart.c       ****             USART_transmit('+');
 332               	.LM29:
 333 00f6 8BE2      		ldi r24,lo8(43)
 334 00f8 0E94 0000 		call USART_transmit
 335 00fc 00C0      		rjmp .L11
 336               	.L24:
  86:usart.c       ****         if( ( n== Nint ) && ( Nfrac!=0 )){
 338               	.LM30:
 339 00fe 0215      		cp r16,r2
 340 0100 1305      		cpc r17,r3
 341 0102 01F4      		brne .L15
  86:usart.c       ****         if( ( n== Nint ) && ( Nfrac!=0 )){
 343               	.LM31:
 344 0104 4114      		cp r4,__zero_reg__
 345 0106 5104      		cpc r5,__zero_reg__
 346 0108 01F0      		breq .L15
  87:usart.c       ****             USART_transmit('.');
 348               	.LM32:
 349 010a 8EE2      		ldi r24,lo8(46)
 350 010c 0E94 0000 		call USART_transmit
 351               	.L15:
  91:usart.c       ****         for(m=n+1;m<Nint+Nfrac;m++){
 353               	.LM33:
 354 0110 3801      		movw r6,r16
  90:usart.c       ****         DivFactor = 1;
 356               	.LM34:
 357 0112 81E0      		ldi r24,lo8(1)
 358 0114 882E      		mov r8,r24
 359 0116 912C      		mov r9,__zero_reg__
 360 0118 A12C      		mov r10,__zero_reg__
 361 011a B12C      		mov r11,__zero_reg__
 362 011c C501      		movw r24,r10
 363 011e B401      		movw r22,r8
  91:usart.c       ****         for(m=n+1;m<Nint+Nfrac;m++){
 365               	.LM35:
 366 0120 00C0      		rjmp .L16
 367               	.L17:
  92:usart.c       ****             DivFactor = DivFactor * 10;
 369               	.LM36:
 370 0122 2AE0      		ldi r18,lo8(10)
 371 0124 30E0      		ldi r19,hi8(10)
 372 0126 40E0      		ldi r20,hlo8(10)
 373 0128 50E0      		ldi r21,hhi8(10)
 374 012a 0E94 0000 		call __mulsi3
 375               	.L16:
  92:usart.c       ****             DivFactor = DivFactor * 10;
 377               	.LM37:
 378 012e 0894      		sec
 379 0130 611C      		adc r6,__zero_reg__
 380 0132 711C      		adc r7,__zero_reg__
  91:usart.c       ****         for(m=n+1;m<Nint+Nfrac;m++){
 382               	.LM38:
 383 0134 E981      		ldd r30,Y+1
 384 0136 FA81      		ldd r31,Y+2
 385 0138 6E16      		cp r6,r30
 386 013a 7F06      		cpc r7,r31
 387 013c 00F0      		brlo .L17
 388 013e 4B01      		movw r8,r22
 389 0140 5C01      		movw r10,r24
  95:usart.c       ****         d[n] = (unsigned int)( num / DivFactor );
 391               	.LM39:
 392 0142 0E94 0000 		call __floatunsisf
 393 0146 9B01      		movw r18,r22
 394 0148 AC01      		movw r20,r24
 395 014a C701      		movw r24,r14
 396 014c B601      		movw r22,r12
 397 014e 0E94 0000 		call __divsf3
 398 0152 0E94 0000 		call __fixunssfsi
 399 0156 DC01      		movw r26,r24
 400 0158 CB01      		movw r24,r22
 401 015a 3C01      		movw r6,r24
 403               	.LM40:
 404 015c 2F81      		ldd r18,Y+7
 405 015e 3885      		ldd r19,Y+8
 406 0160 2115      		cp r18,__zero_reg__
 407 0162 3105      		cpc r19,__zero_reg__
 408 0164 01F4      		brne .L25
 410               	.LM41:
 411 0166 81E0      		ldi r24,lo8(1)
 412 0168 90E0      		ldi r25,hi8(1)
 413 016a 9887      		std Y+8,r25
 414 016c 8F83      		std Y+7,r24
 415 016e 6114      		cp r6,__zero_reg__
 416 0170 7104      		cpc r7,__zero_reg__
 417 0172 01F4      		brne .L18
 419               	.LM42:
 420 0174 ED81      		ldd r30,Y+5
 421 0176 FE81      		ldd r31,Y+6
 422 0178 0E17      		cp r16,r30
 423 017a 1F07      		cpc r17,r31
 424 017c 01F0      		breq .L18
 425 017e 1886      		std Y+8,__zero_reg__
 426 0180 1F82      		std Y+7,__zero_reg__
 427 0182 00C0      		rjmp .L18
 428               	.L25:
 430               	.LM43:
 431 0184 21E0      		ldi r18,lo8(1)
 432 0186 30E0      		ldi r19,hi8(1)
 433 0188 3887      		std Y+8,r19
 434 018a 2F83      		std Y+7,r18
 435               	.L18:
  97:usart.c       ****         num = num - d[n]*DivFactor;
 437               	.LM44:
 438 018c B301      		movw r22,r6
 439 018e 80E0      		ldi r24,lo8(0)
 440 0190 90E0      		ldi r25,hi8(0)
 441 0192 A501      		movw r20,r10
 442 0194 9401      		movw r18,r8
 443 0196 0E94 0000 		call __mulsi3
 444 019a 0E94 0000 		call __floatunsisf
 445 019e 9B01      		movw r18,r22
 446 01a0 AC01      		movw r20,r24
 447 01a2 C701      		movw r24,r14
 448 01a4 B601      		movw r22,r12
 449 01a6 0E94 0000 		call __subsf3
 450 01aa 6B01      		movw r12,r22
 451 01ac E82E      		mov r14,r24
 452 01ae F92E      		mov r15,r25
  98:usart.c       ****         
  99:usart.c       ****         if( (valid == 1)|(n == (Nint+Nfrac-1)) ) USART_transmit(0x30 + d[n]);
 454               	.LM45:
 455 01b0 EF81      		ldd r30,Y+7
 456 01b2 F885      		ldd r31,Y+8
 457 01b4 3097      		sbiw r30,0
 458 01b6 01F4      		brne .L28
 459 01b8 2B81      		ldd r18,Y+3
 460 01ba 3C81      		ldd r19,Y+4
 461 01bc 0217      		cp r16,r18
 462 01be 1307      		cpc r17,r19
 463 01c0 01F4      		brne .L30
 464               	.L28:
 466               	.LM46:
 467 01c2 862D      		mov r24,r6
 468 01c4 805D      		subi r24,lo8(-(48))
 469 01c6 00C0      		rjmp .L31
 470               	.L30:
 100:usart.c       ****         else if( valid == 0 )                   USART_transmit(0x20);
 472               	.LM47:
 473 01c8 80E2      		ldi r24,lo8(32)
 474               	.L31:
 475 01ca 0E94 0000 		call USART_transmit
 476 01ce 0F5F      		subi r16,lo8(-(1))
 477 01d0 1F4F      		sbci r17,hi8(-(1))
 478               	.L14:
  84:usart.c       ****     for(n=0;n<=Nint+Nfrac-1;n++){
 480               	.LM48:
 481 01d2 8B81      		ldd r24,Y+3
 482 01d4 9C81      		ldd r25,Y+4
 483 01d6 8017      		cp r24,r16
 484 01d8 9107      		cpc r25,r17
 485 01da 00F0      		brlo .+2
 486 01dc 00C0      		rjmp .L24
 487               	/* epilogue start */
 101:usart.c       ****         else                                    USART_transmit(0xff);
 102:usart.c       ****     }
 103:usart.c       **** }
 489               	.LM49:
 490 01de 2896      		adiw r28,8
 491 01e0 0FB6      		in __tmp_reg__,__SREG__
 492 01e2 F894      		cli
 493 01e4 DEBF      		out __SP_H__,r29
 494 01e6 0FBE      		out __SREG__,__tmp_reg__
 495 01e8 CDBF      		out __SP_L__,r28
 496 01ea DF91      		pop r29
 497 01ec CF91      		pop r28
 498 01ee 1F91      		pop r17
 499 01f0 0F91      		pop r16
 500 01f2 FF90      		pop r15
 501 01f4 EF90      		pop r14
 502 01f6 DF90      		pop r13
 503 01f8 CF90      		pop r12
 504 01fa BF90      		pop r11
 505 01fc AF90      		pop r10
 506 01fe 9F90      		pop r9
 507 0200 8F90      		pop r8
 508 0202 7F90      		pop r7
 509 0204 6F90      		pop r6
 510 0206 5F90      		pop r5
 511 0208 4F90      		pop r4
 512 020a 3F90      		pop r3
 513 020c 2F90      		pop r2
 514 020e 0895      		ret
 521               	.Lscope4:
 523               	.global	USART_receive
 525               	USART_receive:
 104:usart.c       **** 
 105:usart.c       **** // USART receive without wait & Error rejection
 106:usart.c       **** /*
 107:usart.c       **** unsigned char USART_receive(void){
 108:usart.c       **** 	return UDR0;
 109:usart.c       **** }
 110:usart.c       **** */
 111:usart.c       **** 
 112:usart.c       **** // USART receive w/o. Time-out
 113:usart.c       **** unsigned char USART_receive(void){
 527               	.LM50:
 528               	.LFBB5:
 529               	/* prologue: function */
 530               	/* frame size = 0 */
 531               	/* stack size = 0 */
 532               	.L__stack_usage = 0
 533               	.L33:
 114:usart.c       **** 	unsigned char error_data;
 115:usart.c       **** 	while(!(USART_STATUS & (1<<RXC0)));	// Wait receive process
 535               	.LM51:
 536 0210 8091 C000 		lds r24,192
 537 0214 87FF      		sbrs r24,7
 538 0216 00C0      		rjmp .L33
 116:usart.c       **** 	if ( !( ( USART_STATUS & (1<< FE0))
 540               	.LM52:
 541 0218 8091 C000 		lds r24,192
 117:usart.c       **** 	      | ( USART_STATUS & (1<<UPE0)) ) ){	// detect framing & parity error
 543               	.LM53:
 544 021c 8091 C000 		lds r24,192
 118:usart.c       **** 		return UDR0;
 119:usart.c       **** 	}else{
 120:usart.c       **** 		error_data = UDR0;
 546               	.LM54:
 547 0220 8091 C600 		lds r24,198
 548               	/* epilogue start */
 121:usart.c       **** 		return error_data;
 122:usart.c       **** 	}
 123:usart.c       **** }
 550               	.LM55:
 551 0224 0895      		ret
 556               	.Lscope5:
 558               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 usart.c
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//cch58PNg.s:2      *ABS*:0000003f __SREG__
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//cch58PNg.s:3      *ABS*:0000003e __SP_H__
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//cch58PNg.s:4      *ABS*:0000003d __SP_L__
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//cch58PNg.s:5      *ABS*:00000034 __CCP__
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//cch58PNg.s:6      *ABS*:00000000 __tmp_reg__
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//cch58PNg.s:7      *ABS*:00000001 __zero_reg__
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//cch58PNg.s:107    .text:00000000 USARTinit
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//cch58PNg.s:142    .text:0000001a USART_transmit
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//cch58PNg.s:168    .text:00000028 USART_transmit_str
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//cch58PNg.s:209    .text:00000040 USART_transmit_numeric
/var/folders/v3/wysfpd052nz8jkbx04pk0ym80000gn/T//cch58PNg.s:525    .text:00000210 USART_receive

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__mulsf3
__ltsf2
__mulsi3
__floatunsisf
__divsf3
__fixunssfsi
__subsf3
