
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  000010f8  0000118c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  008001ca  008001ca  00001256  2**0
                  ALLOC
  3 .stab         000040ec  00000000  00000000  00001258  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000183d  00000000  00000000  00005344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00006b88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003c0  00000000  00000000  00006c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000064  00000000  00000000  00006fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000218  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	c0 c1       	rjmp	.+896    	; 0x3a6 <__vector_18>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d4 e0       	ldi	r29, 0x04	; 4
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
      40:	11 e0       	ldi	r17, 0x01	; 1
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	b1 e0       	ldi	r27, 0x01	; 1
      46:	e8 ef       	ldi	r30, 0xF8	; 248
      48:	f0 e1       	ldi	r31, 0x10	; 16
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	aa 3c       	cpi	r26, 0xCA	; 202
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	11 e0       	ldi	r17, 0x01	; 1
      58:	aa ec       	ldi	r26, 0xCA	; 202
      5a:	b1 e0       	ldi	r27, 0x01	; 1
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	ab 3f       	cpi	r26, 0xFB	; 251
      62:	b1 07       	cpc	r27, r17
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	82 d2       	rcall	.+1284   	; 0x56c <main>
      68:	45 c8       	rjmp	.-3958   	; 0xfffff0f4 <__eeprom_end+0xff7ef0f4>

0000006a <__bad_interrupt>:
      6a:	27 c2       	rjmp	.+1102   	; 0x4ba <__vector_default>

0000006c <SoftSPI_Init>:
unsigned char RS;
unsigned char DATA;

void SoftSPI_Init(void){
    /*MOSI,SCK=出力、他は入力に設定 */
    DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RCK);
      6c:	84 b1       	in	r24, 0x04	; 4
      6e:	8c 62       	ori	r24, 0x2C	; 44
      70:	84 b9       	out	0x04, r24	; 4
}
      72:	08 95       	ret

00000074 <SoftSPI_TX>:

void SoftSPI_TX(unsigned char cData){
      74:	27 e0       	ldi	r18, 0x07	; 7
      76:	30 e0       	ldi	r19, 0x00	; 0
    unsigned int n;
    for(n=0;n<8;n++){
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
        _delay_us(1);
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
      78:	90 e0       	ldi	r25, 0x00	; 0
}

void SoftSPI_TX(unsigned char cData){
    unsigned int n;
    for(n=0;n<8;n++){
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
      7a:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      7c:	42 e0       	ldi	r20, 0x02	; 2
      7e:	4a 95       	dec	r20
      80:	f1 f7       	brne	.-4      	; 0x7e <SoftSPI_TX+0xa>
      82:	00 c0       	rjmp	.+0      	; 0x84 <SoftSPI_TX+0x10>
        _delay_us(1);
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
      84:	2b 98       	cbi	0x05, 3	; 5
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
      86:	65 b1       	in	r22, 0x05	; 5
      88:	ac 01       	movw	r20, r24
      8a:	02 2e       	mov	r0, r18
      8c:	02 c0       	rjmp	.+4      	; 0x92 <SoftSPI_TX+0x1e>
      8e:	55 95       	asr	r21
      90:	47 95       	ror	r20
      92:	0a 94       	dec	r0
      94:	e2 f7       	brpl	.-8      	; 0x8e <SoftSPI_TX+0x1a>
      96:	41 70       	andi	r20, 0x01	; 1
      98:	50 70       	andi	r21, 0x00	; 0
      9a:	73 e0       	ldi	r23, 0x03	; 3
      9c:	44 0f       	add	r20, r20
      9e:	55 1f       	adc	r21, r21
      a0:	7a 95       	dec	r23
      a2:	e1 f7       	brne	.-8      	; 0x9c <SoftSPI_TX+0x28>
      a4:	64 2b       	or	r22, r20
      a6:	65 b9       	out	0x05, r22	; 5
      a8:	42 e0       	ldi	r20, 0x02	; 2
      aa:	4a 95       	dec	r20
      ac:	f1 f7       	brne	.-4      	; 0xaa <SoftSPI_TX+0x36>
      ae:	00 c0       	rjmp	.+0      	; 0xb0 <SoftSPI_TX+0x3c>
        _delay_us(1);
        PORT_SPI |= (1<<DD_SCK);                // Set SCK "H"
      b0:	2d 9a       	sbi	0x05, 5	; 5
      b2:	42 e0       	ldi	r20, 0x02	; 2
      b4:	4a 95       	dec	r20
      b6:	f1 f7       	brne	.-4      	; 0xb4 <SoftSPI_TX+0x40>
      b8:	00 c0       	rjmp	.+0      	; 0xba <SoftSPI_TX+0x46>
      ba:	21 50       	subi	r18, 0x01	; 1
      bc:	30 40       	sbci	r19, 0x00	; 0
    DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RCK);
}

void SoftSPI_TX(unsigned char cData){
    unsigned int n;
    for(n=0;n<8;n++){
      be:	4f ef       	ldi	r20, 0xFF	; 255
      c0:	2f 3f       	cpi	r18, 0xFF	; 255
      c2:	34 07       	cpc	r19, r20
      c4:	d1 f6       	brne	.-76     	; 0x7a <SoftSPI_TX+0x6>
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
        _delay_us(1);
        PORT_SPI |= (1<<DD_SCK);                // Set SCK "H"
        _delay_us(1);
    }
}
      c6:	08 95       	ret

000000c8 <send_bits_595>:

void send_bits_595(unsigned char RS, unsigned char E, unsigned char DATA){
    unsigned char bits;
    bits = 0x3f & ( (RS<<5)|(E<<4)|DATA );
      c8:	82 95       	swap	r24
      ca:	88 0f       	add	r24, r24
      cc:	80 7e       	andi	r24, 0xE0	; 224
      ce:	84 2b       	or	r24, r20
      d0:	62 95       	swap	r22
      d2:	60 7f       	andi	r22, 0xF0	; 240
      d4:	68 2b       	or	r22, r24
    SoftSPI_TX(bits);
      d6:	86 2f       	mov	r24, r22
      d8:	8f 73       	andi	r24, 0x3F	; 63
      da:	cc df       	rcall	.-104    	; 0x74 <SoftSPI_TX>
      dc:	8a e1       	ldi	r24, 0x1A	; 26
      de:	8a 95       	dec	r24
      e0:	f1 f7       	brne	.-4      	; 0xde <send_bits_595+0x16>
      e2:	00 c0       	rjmp	.+0      	; 0xe4 <send_bits_595+0x1c>
    _delay_us(10);
    PORT_SPI &= ~(1<<DD_RCK);   // Set RCK "L"
      e4:	2a 98       	cbi	0x05, 2	; 5
    PORT_SPI |=  (1<<DD_RCK);   // Set RCK "H"
      e6:	2a 9a       	sbi	0x05, 2	; 5
    PORT_SPI &= ~(1<<DD_RCK);   // Set RCK "L"
      e8:	2a 98       	cbi	0x05, 2	; 5
}
      ea:	08 95       	ret

000000ec <lcd_set_4bit>:

// fuction for sending control bitpattern
void lcd_set_4bit(unsigned char bitpattern){
	DATA    =   0x0f & bitpattern; // set sending data
      ec:	48 2f       	mov	r20, r24
      ee:	4f 70       	andi	r20, 0x0F	; 15
      f0:	40 93 ca 01 	sts	0x01CA, r20
	E       =   0;
      f4:	10 92 cb 01 	sts	0x01CB, r1
    send_bits_595(RS,E,DATA);
      f8:	80 91 cc 01 	lds	r24, 0x01CC
      fc:	60 e0       	ldi	r22, 0x00	; 0
      fe:	e4 df       	rcall	.-56     	; 0xc8 <send_bits_595>
//	_delay_us(20);
	E       =   1;
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	80 93 cb 01 	sts	0x01CB, r24
    send_bits_595(RS,E,DATA);
     106:	80 91 cc 01 	lds	r24, 0x01CC
     10a:	61 e0       	ldi	r22, 0x01	; 1
     10c:	40 91 ca 01 	lds	r20, 0x01CA
     110:	db df       	rcall	.-74     	; 0xc8 <send_bits_595>
//	_delay_us(20);
	E       =   0;
     112:	10 92 cb 01 	sts	0x01CB, r1
    send_bits_595(RS,E,DATA);
     116:	80 91 cc 01 	lds	r24, 0x01CC
     11a:	60 e0       	ldi	r22, 0x00	; 0
     11c:	40 91 ca 01 	lds	r20, 0x01CA
     120:	d3 df       	rcall	.-90     	; 0xc8 <send_bits_595>
//	_delay_us(20);
}
     122:	08 95       	ret

00000124 <lcd_init>:

// Initializing LCD
void lcd_init(void){

	// set enable "0"
    E       = 0;
     124:	10 92 cb 01 	sts	0x01CB, r1
    // set instruction input mode
	RS      = 0;
     128:	10 92 cc 01 	sts	0x01CC, r1
	// initialize data port
	DATA	= 0x00;
     12c:	10 92 ca 01 	sts	0x01CA, r1
    send_bits_595(RS,E,DATA);
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	40 e0       	ldi	r20, 0x00	; 0
     136:	c8 df       	rcall	.-112    	; 0xc8 <send_bits_595>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     138:	8f e3       	ldi	r24, 0x3F	; 63
     13a:	9c e9       	ldi	r25, 0x9C	; 156
     13c:	01 97       	sbiw	r24, 0x01	; 1
     13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_init+0x18>
     140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_init+0x1e>
     142:	00 00       	nop
    
	// wait more than 15ms
	_delay_ms(20);

	// set 8-bit mode
	lcd_set_4bit(0x03);
     144:	83 e0       	ldi	r24, 0x03	; 3
     146:	d2 df       	rcall	.-92     	; 0xec <lcd_set_4bit>
     148:	8f e0       	ldi	r24, 0x0F	; 15
     14a:	97 e2       	ldi	r25, 0x27	; 39
     14c:	01 97       	sbiw	r24, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_init+0x28>
     150:	00 c0       	rjmp	.+0      	; 0x152 <lcd_init+0x2e>
     152:	00 00       	nop
	_delay_ms(5);
	lcd_set_4bit(0x03);
     154:	83 e0       	ldi	r24, 0x03	; 3
     156:	ca df       	rcall	.-108    	; 0xec <lcd_set_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     158:	8b ed       	ldi	r24, 0xDB	; 219
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	01 97       	sbiw	r24, 0x01	; 1
     15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_init+0x38>
     160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_init+0x3e>
     162:	00 00       	nop
	_delay_us(110);
	lcd_set_4bit(0x03);
     164:	83 e0       	ldi	r24, 0x03	; 3
     166:	c2 df       	rcall	.-124    	; 0xec <lcd_set_4bit>
     168:	95 e8       	ldi	r25, 0x85	; 133
     16a:	9a 95       	dec	r25
     16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_init+0x46>
     16e:	00 00       	nop
	_delay_us(50);
	
	// set 4-bit mode
	lcd_set_4bit(0x02);
     170:	82 e0       	ldi	r24, 0x02	; 2
     172:	bc df       	rcall	.-136    	; 0xec <lcd_set_4bit>
     174:	85 e8       	ldi	r24, 0x85	; 133
     176:	8a 95       	dec	r24
     178:	f1 f7       	brne	.-4      	; 0x176 <lcd_init+0x52>
     17a:	00 00       	nop
	_delay_us(50);

	// function setting
	lcd_set_4bit(0x02);
     17c:	82 e0       	ldi	r24, 0x02	; 2
     17e:	b6 df       	rcall	.-148    	; 0xec <lcd_set_4bit>
	lcd_set_4bit(0x08);
     180:	88 e0       	ldi	r24, 0x08	; 8
     182:	b4 df       	rcall	.-152    	; 0xec <lcd_set_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     184:	8f ec       	ldi	r24, 0xCF	; 207
     186:	97 e0       	ldi	r25, 0x07	; 7
     188:	01 97       	sbiw	r24, 0x01	; 1
     18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_init+0x64>
     18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_init+0x6a>
     18e:	00 00       	nop
	_delay_ms(1);

	// set display off, cursol off and blink off
	lcd_set_4bit(0x00);
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	ac df       	rcall	.-168    	; 0xec <lcd_set_4bit>
	lcd_set_4bit(0x0c);
     194:	8c e0       	ldi	r24, 0x0C	; 12
     196:	aa df       	rcall	.-172    	; 0xec <lcd_set_4bit>
     198:	8f ec       	ldi	r24, 0xCF	; 207
     19a:	97 e0       	ldi	r25, 0x07	; 7
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_init+0x78>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lcd_init+0x7e>
     1a2:	00 00       	nop
	_delay_ms(1);

	// set entry mode (cursol direction : right, disable shift)
	lcd_set_4bit(0x00);
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	a2 df       	rcall	.-188    	; 0xec <lcd_set_4bit>
	lcd_set_4bit(0x03);
     1a8:	83 e0       	ldi	r24, 0x03	; 3
     1aa:	a0 df       	rcall	.-192    	; 0xec <lcd_set_4bit>
     1ac:	8f ec       	ldi	r24, 0xCF	; 207
     1ae:	97 e0       	ldi	r25, 0x07	; 7
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_init+0x8c>
     1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcd_init+0x92>
     1b6:	00 00       	nop
	_delay_ms(1);

	// clear display
	lcd_set_4bit(0x00);
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	98 df       	rcall	.-208    	; 0xec <lcd_set_4bit>
	lcd_set_4bit(0x01);
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	96 df       	rcall	.-212    	; 0xec <lcd_set_4bit>
     1c0:	8f e9       	ldi	r24, 0x9F	; 159
     1c2:	9f e0       	ldi	r25, 0x0F	; 15
     1c4:	01 97       	sbiw	r24, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init+0xa0>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_init+0xa6>
     1ca:	00 00       	nop
	_delay_ms(2);

	// clear cursol position
	lcd_set_4bit(0x00);
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	8e df       	rcall	.-228    	; 0xec <lcd_set_4bit>
	lcd_set_4bit(0x02);
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	8c df       	rcall	.-232    	; 0xec <lcd_set_4bit>
     1d4:	8f e9       	ldi	r24, 0x9F	; 159
     1d6:	9f e0       	ldi	r25, 0x0F	; 15
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_init+0xb4>
     1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_init+0xba>
     1de:	00 00       	nop
	_delay_ms(2);

	// set data input mode
    RS      =   1;
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	80 93 cc 01 	sts	0x01CC, r24
}
     1e6:	08 95       	ret

000001e8 <lcd_set_char>:
    RS      =   1;
}

// LCD character (1 byte) sending
void lcd_set_char(unsigned char c)
{
     1e8:	cf 93       	push	r28
     1ea:	c8 2f       	mov	r28, r24
	lcd_set_4bit(c >> 4); // Upper Bit
     1ec:	82 95       	swap	r24
     1ee:	8f 70       	andi	r24, 0x0F	; 15
     1f0:	7d df       	rcall	.-262    	; 0xec <lcd_set_4bit>
	lcd_set_4bit(0x0f & c); // Lower Bit
     1f2:	8c 2f       	mov	r24, r28
     1f4:	8f 70       	andi	r24, 0x0F	; 15
     1f6:	7a df       	rcall	.-268    	; 0xec <lcd_set_4bit>
     1f8:	8f ec       	ldi	r24, 0xCF	; 207
     1fa:	97 e0       	ldi	r25, 0x07	; 7
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_set_char+0x14>
     200:	00 c0       	rjmp	.+0      	; 0x202 <lcd_set_char+0x1a>
     202:	00 00       	nop
	_delay_ms(1);
}
     204:	cf 91       	pop	r28
     206:	08 95       	ret

00000208 <lcd_locate>:

// LCD character allocation
void lcd_locate(unsigned char row, unsigned char col)
{
	// set instruction input mode
    RS      =   0;
     208:	10 92 cc 01 	sts	0x01CC, r1
	lcd_set_char(0x80 | col | (0x40 * row) );
     20c:	60 68       	ori	r22, 0x80	; 128
     20e:	82 95       	swap	r24
     210:	88 0f       	add	r24, r24
     212:	88 0f       	add	r24, r24
     214:	80 7c       	andi	r24, 0xC0	; 192
     216:	86 2b       	or	r24, r22
     218:	e7 df       	rcall	.-50     	; 0x1e8 <lcd_set_char>
	// set data input mode
    RS      =   1;
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	80 93 cc 01 	sts	0x01CC, r24
}
     220:	08 95       	ret

00000222 <lcd_set_str>:
	_delay_ms(1);
}

// LCD String Sending
void lcd_set_str(unsigned char *s)
{
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	ec 01       	movw	r28, r24
	while (*s != 0) {
     228:	01 c0       	rjmp	.+2      	; 0x22c <lcd_set_str+0xa>
		lcd_set_char(*s);
     22a:	de df       	rcall	.-68     	; 0x1e8 <lcd_set_char>
}

// LCD String Sending
void lcd_set_str(unsigned char *s)
{
	while (*s != 0) {
     22c:	89 91       	ld	r24, Y+
     22e:	88 23       	and	r24, r24
     230:	e1 f7       	brne	.-8      	; 0x22a <lcd_set_str+0x8>
		lcd_set_char(*s);
		s++;
	} 
}
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	08 95       	ret

00000238 <lcd_set_numeric>:

// Display numeric on LCD display
void lcd_set_numeric(unsigned int num, unsigned int Ndig){
     238:	4f 92       	push	r4
     23a:	5f 92       	push	r5
     23c:	6f 92       	push	r6
     23e:	7f 92       	push	r7
     240:	8f 92       	push	r8
     242:	9f 92       	push	r9
     244:	af 92       	push	r10
     246:	bf 92       	push	r11
     248:	cf 92       	push	r12
     24a:	df 92       	push	r13
     24c:	ef 92       	push	r14
     24e:	ff 92       	push	r15
     250:	0f 93       	push	r16
     252:	1f 93       	push	r17
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	5c 01       	movw	r10, r24
     25a:	3b 01       	movw	r6, r22
    unsigned long int DivFactor = 1;
	unsigned int n, m;
	unsigned int d[10];
    unsigned int valid = 0;
    for(n=0;n<=Ndig-1;n++){
     25c:	00 e0       	ldi	r16, 0x00	; 0
     25e:	10 e0       	ldi	r17, 0x00	; 0
// Display numeric on LCD display
void lcd_set_numeric(unsigned int num, unsigned int Ndig){
    unsigned long int DivFactor = 1;
	unsigned int n, m;
	unsigned int d[10];
    unsigned int valid = 0;
     260:	88 24       	eor	r8, r8
     262:	99 24       	eor	r9, r9
    for(n=0;n<=Ndig-1;n++){
     264:	2b 01       	movw	r4, r22
     266:	08 94       	sec
     268:	41 08       	sbc	r4, r1
     26a:	51 08       	sbc	r5, r1
     26c:	39 c0       	rjmp	.+114    	; 0x2e0 <lcd_set_numeric+0xa8>
        
        DivFactor = 1;
        for(m=n+1;m<Ndig;m++){
            DivFactor = DivFactor * 10;
     26e:	c7 01       	movw	r24, r14
     270:	b6 01       	movw	r22, r12
     272:	2a e0       	ldi	r18, 0x0A	; 10
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	40 e0       	ldi	r20, 0x00	; 0
     278:	50 e0       	ldi	r21, 0x00	; 0
     27a:	fb d6       	rcall	.+3574   	; 0x1072 <__mulsi3>
     27c:	6b 01       	movw	r12, r22
     27e:	7c 01       	movw	r14, r24
     280:	06 c0       	rjmp	.+12     	; 0x28e <lcd_set_numeric+0x56>
void lcd_set_numeric(unsigned int num, unsigned int Ndig){
    unsigned long int DivFactor = 1;
	unsigned int n, m;
	unsigned int d[10];
    unsigned int valid = 0;
    for(n=0;n<=Ndig-1;n++){
     282:	e8 01       	movw	r28, r16
     284:	f1 e0       	ldi	r31, 0x01	; 1
     286:	cf 2e       	mov	r12, r31
     288:	d1 2c       	mov	r13, r1
     28a:	e1 2c       	mov	r14, r1
     28c:	f1 2c       	mov	r15, r1
        
        DivFactor = 1;
        for(m=n+1;m<Ndig;m++){
            DivFactor = DivFactor * 10;
     28e:	21 96       	adiw	r28, 0x01	; 1
	unsigned int d[10];
    unsigned int valid = 0;
    for(n=0;n<=Ndig-1;n++){
        
        DivFactor = 1;
        for(m=n+1;m<Ndig;m++){
     290:	c6 15       	cp	r28, r6
     292:	d7 05       	cpc	r29, r7
     294:	60 f3       	brcs	.-40     	; 0x26e <lcd_set_numeric+0x36>
            DivFactor = DivFactor * 10;
        }
        
        d[n] = (unsigned int)( num / DivFactor );
     296:	b5 01       	movw	r22, r10
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	a7 01       	movw	r20, r14
     29e:	96 01       	movw	r18, r12
     2a0:	07 d7       	rcall	.+3598   	; 0x10b0 <__udivmodsi4>
        if( (valid == 0) & (d[n]!=0) ) valid = 1;
     2a2:	21 15       	cp	r18, r1
     2a4:	31 05       	cpc	r19, r1
     2a6:	31 f0       	breq	.+12     	; 0x2b4 <lcd_set_numeric+0x7c>
     2a8:	81 14       	cp	r8, r1
     2aa:	91 04       	cpc	r9, r1
     2ac:	19 f4       	brne	.+6      	; 0x2b4 <lcd_set_numeric+0x7c>
     2ae:	e1 e0       	ldi	r30, 0x01	; 1
     2b0:	8e 2e       	mov	r8, r30
     2b2:	91 2c       	mov	r9, r1
        num = num - d[n]*DivFactor;
     2b4:	2c 9d       	mul	r18, r12
     2b6:	c0 01       	movw	r24, r0
     2b8:	2d 9d       	mul	r18, r13
     2ba:	90 0d       	add	r25, r0
     2bc:	3c 9d       	mul	r19, r12
     2be:	90 0d       	add	r25, r0
     2c0:	11 24       	eor	r1, r1
     2c2:	a8 1a       	sub	r10, r24
     2c4:	b9 0a       	sbc	r11, r25
        
        if( (valid == 1)|(n == Ndig-1) )    lcd_set_char(0x30 + d[n]);
     2c6:	81 14       	cp	r8, r1
     2c8:	91 04       	cpc	r9, r1
     2ca:	19 f4       	brne	.+6      	; 0x2d2 <lcd_set_numeric+0x9a>
     2cc:	04 15       	cp	r16, r4
     2ce:	15 05       	cpc	r17, r5
     2d0:	19 f4       	brne	.+6      	; 0x2d8 <lcd_set_numeric+0xa0>
     2d2:	82 2f       	mov	r24, r18
     2d4:	80 5d       	subi	r24, 0xD0	; 208
     2d6:	01 c0       	rjmp	.+2      	; 0x2da <lcd_set_numeric+0xa2>
        else if( valid == 0 )               lcd_set_char(0x20);
     2d8:	80 e2       	ldi	r24, 0x20	; 32
     2da:	86 df       	rcall	.-244    	; 0x1e8 <lcd_set_char>
     2dc:	0f 5f       	subi	r16, 0xFF	; 255
     2de:	1f 4f       	sbci	r17, 0xFF	; 255
void lcd_set_numeric(unsigned int num, unsigned int Ndig){
    unsigned long int DivFactor = 1;
	unsigned int n, m;
	unsigned int d[10];
    unsigned int valid = 0;
    for(n=0;n<=Ndig-1;n++){
     2e0:	40 16       	cp	r4, r16
     2e2:	51 06       	cpc	r5, r17
     2e4:	70 f6       	brcc	.-100    	; 0x282 <lcd_set_numeric+0x4a>
        
        if( (valid == 1)|(n == Ndig-1) )    lcd_set_char(0x30 + d[n]);
        else if( valid == 0 )               lcd_set_char(0x20);
        else                                lcd_set_char(0xff);
    }
}
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	ff 90       	pop	r15
     2f0:	ef 90       	pop	r14
     2f2:	df 90       	pop	r13
     2f4:	cf 90       	pop	r12
     2f6:	bf 90       	pop	r11
     2f8:	af 90       	pop	r10
     2fa:	9f 90       	pop	r9
     2fc:	8f 90       	pop	r8
     2fe:	7f 90       	pop	r7
     300:	6f 90       	pop	r6
     302:	5f 90       	pop	r5
     304:	4f 90       	pop	r4
     306:	08 95       	ret

00000308 <lcd_clear>:

// Clear LCD
void lcd_clear(){
	// clear display
    RS      =   0;
     308:	10 92 cc 01 	sts	0x01CC, r1
	lcd_set_4bit(0x00);
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	ee de       	rcall	.-548    	; 0xec <lcd_set_4bit>
	lcd_set_4bit(0x01);
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	ec de       	rcall	.-552    	; 0xec <lcd_set_4bit>
     314:	8f e9       	ldi	r24, 0x9F	; 159
     316:	9f e0       	ldi	r25, 0x0F	; 15
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <lcd_clear+0x10>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <lcd_clear+0x16>
     31e:	00 00       	nop
	_delay_ms(2);
    RS      =   1;
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	80 93 cc 01 	sts	0x01CC, r24
	lcd_locate(0,0);
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	6e df       	rcall	.-292    	; 0x208 <lcd_locate>
}
     32c:	08 95       	ret

0000032e <set_initial_t_id>:
};

// Measure Tarfet ID Declarations
uint8_t     t_id[Ndata];
void set_initial_t_id(){
    t_id[0] = 3;
     32e:	83 e0       	ldi	r24, 0x03	; 3
     330:	80 93 df 01 	sts	0x01DF, r24
    t_id[1] = 0;
     334:	10 92 e0 01 	sts	0x01E0, r1
//    t_id[2] = 6;
//    t_id[3] = 5;
}
     338:	08 95       	ret

0000033a <timer1_init>:
//	data[*][2] : Angle Data
//	data[*][3] : Angle Data (LSB)

// 16-bit Counter intialazation
void timer1_init() {
	TCCR1A  = 0b00000000;	// Timer/Counter1 Control Register A
     33a:	10 92 80 00 	sts	0x0080, r1
	TCCR1B  = 0b00000010;
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	80 93 81 00 	sts	0x0081, r24
	TCCR1C  = 0b00000000;
     344:	10 92 82 00 	sts	0x0082, r1
	TIMSK1  = 0b00000000;
     348:	10 92 6f 00 	sts	0x006F, r1
	TCNT1   = 0x0000;         // Initialize 16-bit counter bit
     34c:	10 92 85 00 	sts	0x0085, r1
     350:	10 92 84 00 	sts	0x0084, r1
	OCR1A   = 0xffff;         // 16-bit register for compare
     354:	8f ef       	ldi	r24, 0xFF	; 255
     356:	9f ef       	ldi	r25, 0xFF	; 255
     358:	90 93 89 00 	sts	0x0089, r25
     35c:	80 93 88 00 	sts	0x0088, r24
}
     360:	08 95       	ret

00000362 <DisplayItemInfo>:

// Display
void DisplayItemInfo(void){
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
	int k;
	lcd_clear();
     366:	d0 df       	rcall	.-96     	; 0x308 <lcd_clear>
	for(k=0;k<Ndata;k++){
		lcd_locate((unsigned int)((8*k)/16),9*(k%2));
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	4d df       	rcall	.-358    	; 0x208 <lcd_locate>
		lcd_set_str(RxName[t_id[k]]);
     36e:	e0 91 df 01 	lds	r30, 0x01DF
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	cd ec       	ldi	r28, 0xCD	; 205
     376:	d1 e0       	ldi	r29, 0x01	; 1
     378:	ee 0f       	add	r30, r30
     37a:	ff 1f       	adc	r31, r31
     37c:	ec 0f       	add	r30, r28
     37e:	fd 1f       	adc	r31, r29
     380:	80 81       	ld	r24, Z
     382:	91 81       	ldd	r25, Z+1	; 0x01
     384:	4e df       	rcall	.-356    	; 0x222 <lcd_set_str>
// Display
void DisplayItemInfo(void){
	int k;
	lcd_clear();
	for(k=0;k<Ndata;k++){
		lcd_locate((unsigned int)((8*k)/16),9*(k%2));
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	69 e0       	ldi	r22, 0x09	; 9
     38a:	3e df       	rcall	.-388    	; 0x208 <lcd_locate>
		lcd_set_str(RxName[t_id[k]]);
     38c:	e0 91 e0 01 	lds	r30, 0x01E0
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	ee 0f       	add	r30, r30
     394:	ff 1f       	adc	r31, r31
     396:	ec 0f       	add	r30, r28
     398:	fd 1f       	adc	r31, r29
     39a:	80 81       	ld	r24, Z
     39c:	91 81       	ldd	r25, Z+1	; 0x01
     39e:	41 df       	rcall	.-382    	; 0x222 <lcd_set_str>
	}
	
}
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	08 95       	ret

000003a6 <__vector_18>:

// interval measure
unsigned long int   cnt;
double              freq;

ISR(USART_RX_vect){
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
     3ae:	11 24       	eor	r1, r1
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	2f 93       	push	r18
     3ba:	3f 93       	push	r19
     3bc:	4f 93       	push	r20
     3be:	5f 93       	push	r21
     3c0:	6f 93       	push	r22
     3c2:	7f 93       	push	r23
     3c4:	8f 93       	push	r24
     3c6:	9f 93       	push	r25
     3c8:	af 93       	push	r26
     3ca:	bf 93       	push	r27
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	ef 93       	push	r30
     3d2:	ff 93       	push	r31
    unsigned int    ID;
    unsigned int    n, m;

    ID = USART_receive_wTO(); // Synchronize & Detect receiver ID
     3d4:	ac d0       	rcall	.+344    	; 0x52e <USART_receive_wTO>
     3d6:	7c 01       	movw	r14, r24
    // Get 3-bit sngle data
    for(n=0;n<Ndata;n++){
        if ( ID == RxID[t_id[n]] ){
     3d8:	e0 91 df 01 	lds	r30, 0x01DF
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	e1 54       	subi	r30, 0x41	; 65
     3e0:	fe 4f       	sbci	r31, 0xFE	; 254
     3e2:	80 81       	ld	r24, Z
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	e8 16       	cp	r14, r24
     3e8:	f9 06       	cpc	r15, r25
     3ea:	71 f0       	breq	.+28     	; 0x408 <__vector_18+0x62>
     3ec:	e0 91 e0 01 	lds	r30, 0x01E0
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	e1 54       	subi	r30, 0x41	; 65
     3f4:	fe 4f       	sbci	r31, 0xFE	; 254
     3f6:	80 81       	ld	r24, Z
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	e8 16       	cp	r14, r24
     3fc:	f9 06       	cpc	r15, r25
     3fe:	09 f0       	breq	.+2      	; 0x402 <__vector_18+0x5c>
     400:	45 c0       	rjmp	.+138    	; 0x48c <__vector_18+0xe6>
    unsigned int    ID;
    unsigned int    n, m;

    ID = USART_receive_wTO(); // Synchronize & Detect receiver ID
    // Get 3-bit sngle data
    for(n=0;n<Ndata;n++){
     402:	c1 e0       	ldi	r28, 0x01	; 1
     404:	d0 e0       	ldi	r29, 0x00	; 0
     406:	02 c0       	rjmp	.+4      	; 0x40c <__vector_18+0x66>
     408:	c0 e0       	ldi	r28, 0x00	; 0
     40a:	d0 e0       	ldi	r29, 0x00	; 0
     40c:	00 e0       	ldi	r16, 0x00	; 0
     40e:	10 e0       	ldi	r17, 0x00	; 0

// interval measure
unsigned long int   cnt;
double              freq;

ISR(USART_RX_vect){
     410:	cc 0f       	add	r28, r28
     412:	dd 1f       	adc	r29, r29
     414:	cc 0f       	add	r28, r28
     416:	dd 1f       	adc	r29, r29
     418:	cd 50       	subi	r28, 0x0D	; 13
     41a:	de 4f       	sbci	r29, 0xFE	; 254

    ID = USART_receive_wTO(); // Synchronize & Detect receiver ID
    // Get 3-bit sngle data
    for(n=0;n<Ndata;n++){
        if ( ID == RxID[t_id[n]] ){
            for(m=0;m<4;m++) data[n][m] = USART_receive_wTO();
     41c:	88 d0       	rcall	.+272    	; 0x52e <USART_receive_wTO>

// interval measure
unsigned long int   cnt;
double              freq;

ISR(USART_RX_vect){
     41e:	fe 01       	movw	r30, r28
     420:	e0 0f       	add	r30, r16
     422:	f1 1f       	adc	r31, r17

    ID = USART_receive_wTO(); // Synchronize & Detect receiver ID
    // Get 3-bit sngle data
    for(n=0;n<Ndata;n++){
        if ( ID == RxID[t_id[n]] ){
            for(m=0;m<4;m++) data[n][m] = USART_receive_wTO();
     424:	80 83       	st	Z, r24
     426:	0f 5f       	subi	r16, 0xFF	; 255
     428:	1f 4f       	sbci	r17, 0xFF	; 255
     42a:	04 30       	cpi	r16, 0x04	; 4
     42c:	11 05       	cpc	r17, r1
     42e:	b1 f7       	brne	.-20     	; 0x41c <__vector_18+0x76>
            
            // interval measure
            if( ID == RxID[t_id[0]] ){
     430:	e0 91 df 01 	lds	r30, 0x01DF
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	e1 54       	subi	r30, 0x41	; 65
     438:	fe 4f       	sbci	r31, 0xFE	; 254
     43a:	80 81       	ld	r24, Z
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	e8 16       	cp	r14, r24
     440:	f9 06       	cpc	r15, r25
     442:	21 f5       	brne	.+72     	; 0x48c <__vector_18+0xe6>
                cnt = TCNT1;
     444:	60 91 84 00 	lds	r22, 0x0084
     448:	70 91 85 00 	lds	r23, 0x0085
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	60 93 e1 01 	sts	0x01E1, r22
     454:	70 93 e2 01 	sts	0x01E2, r23
     458:	80 93 e3 01 	sts	0x01E3, r24
     45c:	90 93 e4 01 	sts	0x01E4, r25
                freq = 8000000.0 / 8.0 / cnt;
     460:	f3 d4       	rcall	.+2534   	; 0xe48 <__floatunsisf>
     462:	9b 01       	movw	r18, r22
     464:	ac 01       	movw	r20, r24
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	74 e2       	ldi	r23, 0x24	; 36
     46a:	84 e7       	ldi	r24, 0x74	; 116
     46c:	99 e4       	ldi	r25, 0x49	; 73
     46e:	58 d4       	rcall	.+2224   	; 0xd20 <__divsf3>
     470:	dc 01       	movw	r26, r24
     472:	cb 01       	movw	r24, r22
     474:	80 93 db 01 	sts	0x01DB, r24
     478:	90 93 dc 01 	sts	0x01DC, r25
     47c:	a0 93 dd 01 	sts	0x01DD, r26
     480:	b0 93 de 01 	sts	0x01DE, r27
                //     ^^^^^^^^^   ^^^
                //       fosc      Ndiv
                TCNT1 = 0;
     484:	10 92 85 00 	sts	0x0085, r1
     488:	10 92 84 00 	sts	0x0084, r1
            }
            break;
        }
    }
}
     48c:	ff 91       	pop	r31
     48e:	ef 91       	pop	r30
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	bf 91       	pop	r27
     496:	af 91       	pop	r26
     498:	9f 91       	pop	r25
     49a:	8f 91       	pop	r24
     49c:	7f 91       	pop	r23
     49e:	6f 91       	pop	r22
     4a0:	5f 91       	pop	r21
     4a2:	4f 91       	pop	r20
     4a4:	3f 91       	pop	r19
     4a6:	2f 91       	pop	r18
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	ff 90       	pop	r15
     4ae:	ef 90       	pop	r14
     4b0:	0f 90       	pop	r0
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	0f 90       	pop	r0
     4b6:	1f 90       	pop	r1
     4b8:	18 95       	reti

000004ba <__vector_default>:

// Bas ISR interrput detector for debugging
ISR(BADISR_vect){
     4ba:	1f 92       	push	r1
     4bc:	0f 92       	push	r0
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	0f 92       	push	r0
     4c2:	11 24       	eor	r1, r1
    cli();    // これ以上割り込ませない
     4c4:	f8 94       	cli
    lcd_locate(0,0);
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	9e de       	rcall	.-708    	; 0x208 <lcd_locate>
    lcd_set_str("BADISR ERROR");
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	a8 de       	rcall	.-688    	; 0x222 <lcd_set_str>
     4d2:	ff cf       	rjmp	.-2      	; 0x4d2 <__vector_default+0x18>

000004d4 <USARTinit>:
#define UBRR FOSC/16/BAUD-1 
*/

// USART initialize
void USARTinit(unsigned int ubrr){
	UBRR0H = (unsigned char)(ubrr>>8);
     4d4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     4d8:	80 93 c4 00 	sts	0x00C4, r24
								//   '000' : 5bit
								//   '001' : 6bit
								//   '010' : 7bit
								//   '011' : 8bit
	unsigned int U2X = 0;		// Over clocking operation
	UCSR0B = (RCIE<<7)|(TCIE<<6)|(TRIE<<5)|(RE<<4)|(TE<<3)|((Nb>>2)<<2);
     4dc:	80 e9       	ldi	r24, 0x90	; 144
     4de:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (Mode<<6)|(Pari<<4)|(STPB<<3)|(Nb<<1)|(CLKE);
     4e2:	86 e2       	ldi	r24, 0x26	; 38
     4e4:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0A = U2X<<1;
     4e8:	10 92 c0 00 	sts	0x00C0, r1
}
     4ec:	08 95       	ret

000004ee <USART_transmit>:

// USART transmit
void USART_transmit(unsigned char data){
	while(!(USART_STATUS & (1<<UDRE0)));	// Wait until tx buffer is empty
     4ee:	90 91 c0 00 	lds	r25, 0x00C0
     4f2:	95 ff       	sbrs	r25, 5
     4f4:	fc cf       	rjmp	.-8      	; 0x4ee <USART_transmit>
	UDR0 = data;
     4f6:	80 93 c6 00 	sts	0x00C6, r24
}
     4fa:	08 95       	ret

000004fc <USART_receive>:

// USART receive
unsigned char USART_receive(void){
	unsigned char error_data;
	
	while(!(USART_STATUS & (1<<RXC0)));	// Wait receive process
     4fc:	80 91 c0 00 	lds	r24, 0x00C0
     500:	87 ff       	sbrs	r24, 7
     502:	fc cf       	rjmp	.-8      	; 0x4fc <USART_receive>
	if ( !( ( USART_STATUS & (1<< FE0))
     504:	20 91 c0 00 	lds	r18, 0x00C0
	      | ( USART_STATUS & (1<<UPE0)) ) ){	// detect framing & parity error
     508:	80 91 c0 00 	lds	r24, 0x00C0
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	84 70       	andi	r24, 0x04	; 4
     510:	90 70       	andi	r25, 0x00	; 0
// USART receive
unsigned char USART_receive(void){
	unsigned char error_data;
	
	while(!(USART_STATUS & (1<<RXC0)));	// Wait receive process
	if ( !( ( USART_STATUS & (1<< FE0))
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	20 71       	andi	r18, 0x10	; 16
     516:	30 70       	andi	r19, 0x00	; 0
	      | ( USART_STATUS & (1<<UPE0)) ) ){	// detect framing & parity error
     518:	82 2b       	or	r24, r18
     51a:	93 2b       	or	r25, r19
// USART receive
unsigned char USART_receive(void){
	unsigned char error_data;
	
	while(!(USART_STATUS & (1<<RXC0)));	// Wait receive process
	if ( !( ( USART_STATUS & (1<< FE0))
     51c:	00 97       	sbiw	r24, 0x00	; 0
     51e:	19 f4       	brne	.+6      	; 0x526 <__stack+0x27>
	      | ( USART_STATUS & (1<<UPE0)) ) ){	// detect framing & parity error
		return UDR0;
     520:	80 91 c6 00 	lds	r24, 0x00C6
     524:	08 95       	ret
	}else{
		error_data = UDR0;
     526:	80 91 c6 00 	lds	r24, 0x00C6
		return 0xff;
     52a:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
     52c:	08 95       	ret

0000052e <USART_receive_wTO>:

// USART receive w. Time-out
unsigned char USART_receive_wTO(void){
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	95 e0       	ldi	r25, 0x05	; 5
	unsigned char error_data;
	unsigned int n = 0;
	unsigned int m = 0;
	
	for(n=0;n<1280;n++){
		if( (USART_STATUS & (1<<RXC0)) ){
     532:	20 91 c0 00 	lds	r18, 0x00C0
     536:	27 ff       	sbrs	r18, 7
     538:	15 c0       	rjmp	.+42     	; 0x564 <USART_receive_wTO+0x36>
			if ( !( ( USART_STATUS & (1<< FE0))
     53a:	20 91 c0 00 	lds	r18, 0x00C0
				   | ( USART_STATUS & (1<<UPE0)) ) ){	// detect framing & parity error
     53e:	80 91 c0 00 	lds	r24, 0x00C0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	84 70       	andi	r24, 0x04	; 4
     546:	90 70       	andi	r25, 0x00	; 0
	unsigned int n = 0;
	unsigned int m = 0;
	
	for(n=0;n<1280;n++){
		if( (USART_STATUS & (1<<RXC0)) ){
			if ( !( ( USART_STATUS & (1<< FE0))
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	20 71       	andi	r18, 0x10	; 16
     54c:	30 70       	andi	r19, 0x00	; 0
				   | ( USART_STATUS & (1<<UPE0)) ) ){	// detect framing & parity error
     54e:	82 2b       	or	r24, r18
     550:	93 2b       	or	r25, r19
	unsigned int n = 0;
	unsigned int m = 0;
	
	for(n=0;n<1280;n++){
		if( (USART_STATUS & (1<<RXC0)) ){
			if ( !( ( USART_STATUS & (1<< FE0))
     552:	00 97       	sbiw	r24, 0x00	; 0
     554:	19 f4       	brne	.+6      	; 0x55c <USART_receive_wTO+0x2e>
				   | ( USART_STATUS & (1<<UPE0)) ) ){	// detect framing & parity error
				return UDR0;
     556:	80 91 c6 00 	lds	r24, 0x00C6
     55a:	08 95       	ret
			}else{
				error_data = UDR0;
     55c:	80 91 c6 00 	lds	r24, 0x00C6
				return 0xff;
     560:	8f ef       	ldi	r24, 0xFF	; 255
     562:	08 95       	ret
     564:	01 97       	sbiw	r24, 0x01	; 1
unsigned char USART_receive_wTO(void){
	unsigned char error_data;
	unsigned int n = 0;
	unsigned int m = 0;
	
	for(n=0;n<1280;n++){
     566:	29 f7       	brne	.-54     	; 0x532 <USART_receive_wTO+0x4>
				error_data = UDR0;
				return 0xff;
			}
		}
	}
	return 0xff;
     568:	8f ef       	ldi	r24, 0xFF	; 255
}
     56a:	08 95       	ret

0000056c <main>:
    while(1);  // ここで止めておく
}

int main(void)
{
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	c0 57       	subi	r28, 0x70	; 112
     576:	d0 40       	sbci	r29, 0x00	; 0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	cd bf       	out	0x3d, r28	; 61

    // for 74HC595 port setting
    SoftSPI_Init();
     582:	74 dd       	rcall	.-1304   	; 0x6c <SoftSPI_Init>
    
    // Initialize LCD
	lcd_init();
     584:	cf dd       	rcall	.-1122   	; 0x124 <lcd_init>
	

    // Interval Measure
    timer1_init();
     586:	d9 de       	rcall	.-590    	; 0x33a <timer1_init>

	// USART initialize
	USARTinit(UBRR);
     588:	89 e1       	ldi	r24, 0x19	; 25
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	a3 df       	rcall	.-186    	; 0x4d4 <USARTinit>
	
	// Ext. Interupt setting
//	ExtInterrupt_init();
    
    set_initial_t_id();
     58e:	cf de       	rcall	.-610    	; 0x32e <set_initial_t_id>
	float           div_factor;				// Dividing factor for integer
	uint8_t         digits_valid;			// Indicate digits in integer are valid or invalid
    
    // value = eq_grad * dec_nrm + eq_intercept
    // Gradient-term of decoding equation
	uint16_t eq_grad[] = {
     590:	de 01       	movw	r26, r28
     592:	d3 96       	adiw	r26, 0x33	; 51
     594:	e4 e9       	ldi	r30, 0x94	; 148
     596:	f1 e0       	ldi	r31, 0x01	; 1
     598:	8e e0       	ldi	r24, 0x0E	; 14
     59a:	01 90       	ld	r0, Z+
     59c:	0d 92       	st	X+, r0
     59e:	81 50       	subi	r24, 0x01	; 1
     5a0:	e1 f7       	brne	.-8      	; 0x59a <main+0x2e>
        100,	// Oil Temp.
        100	// Water Temp.
    };
    
    // Intercept-term of decoding equation
    int16_t eq_intercept[] = {
     5a2:	de 01       	movw	r26, r28
     5a4:	95 96       	adiw	r26, 0x25	; 37
     5a6:	e2 ea       	ldi	r30, 0xA2	; 162
     5a8:	f1 e0       	ldi	r31, 0x01	; 1
     5aa:	8e e0       	ldi	r24, 0x0E	; 14
     5ac:	01 90       	ld	r0, Z+
     5ae:	0d 92       	st	X+, r0
     5b0:	81 50       	subi	r24, 0x01	; 1
     5b2:	e1 f7       	brne	.-8      	; 0x5ac <main+0x40>
        50,	// Oil Temp.
        20	// Water Temp.
    };
    
    // Definition of number of significant figure
	uint8_t   Nsig[] = {				// Number of significant figures
     5b4:	de 01       	movw	r26, r28
     5b6:	5e 96       	adiw	r26, 0x1e	; 30
     5b8:	e0 eb       	ldi	r30, 0xB0	; 176
     5ba:	f1 e0       	ldi	r31, 0x01	; 1
     5bc:	87 e0       	ldi	r24, 0x07	; 7
     5be:	01 90       	ld	r0, Z+
     5c0:	0d 92       	st	X+, r0
     5c2:	81 50       	subi	r24, 0x01	; 1
     5c4:	e1 f7       	brne	.-8      	; 0x5be <main+0x52>
        3,	// Oil Temp.
        3	// Water Temp.
    };
    
    // Deifinition of number of integer figure
	uint8_t	Nint[] = {				// Number of integr digits
     5c6:	de 01       	movw	r26, r28
     5c8:	57 96       	adiw	r26, 0x17	; 23
     5ca:	e7 eb       	ldi	r30, 0xB7	; 183
     5cc:	f1 e0       	ldi	r31, 0x01	; 1
     5ce:	87 e0       	ldi	r24, 0x07	; 7
     5d0:	01 90       	ld	r0, Z+
     5d2:	0d 92       	st	X+, r0
     5d4:	81 50       	subi	r24, 0x01	; 1
     5d6:	e1 f7       	brne	.-8      	; 0x5d0 <main+0x64>
     5d8:	8e 01       	movw	r16, r28
     5da:	0f 5b       	subi	r16, 0xBF	; 191
     5dc:	1f 4f       	sbci	r17, 0xFF	; 255
     5de:	8e e1       	ldi	r24, 0x1E	; 30
     5e0:	28 2e       	mov	r2, r24
     5e2:	31 2c       	mov	r3, r1
     5e4:	2c 0e       	add	r2, r28
     5e6:	3d 1e       	adc	r3, r29
     5e8:	9e 01       	movw	r18, r28
     5ea:	29 5e       	subi	r18, 0xE9	; 233
     5ec:	3f 4f       	sbci	r19, 0xFF	; 255
     5ee:	a3 96       	adiw	r28, 0x23	; 35
     5f0:	3f af       	sts	0x7f, r19
     5f2:	2e af       	sts	0x7e, r18
     5f4:	a3 97       	sbiw	r28, 0x23	; 35
     5f6:	ce 01       	movw	r24, r28
     5f8:	40 96       	adiw	r24, 0x10	; 16
     5fa:	a1 96       	adiw	r28, 0x21	; 33
     5fc:	9f af       	sts	0x7f, r25
     5fe:	8e af       	sts	0x7e, r24
     600:	a1 97       	sbiw	r28, 0x21	; 33
    
	uint8_t	Nspace[7];				// Number of space between character and digits
    float   Resolution[7];
    
    // Definition of Resolution for processing and number of space for display
    for(n=0;n<7;n++){
     602:	dd 24       	eor	r13, r13
        Resolution[n] = 1;
     604:	0f 2e       	mov	r0, r31
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	4f 2e       	mov	r4, r31
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	5f 2e       	mov	r5, r31
     60e:	f0 e8       	ldi	r31, 0x80	; 128
     610:	6f 2e       	mov	r6, r31
     612:	ff e3       	ldi	r31, 0x3F	; 63
     614:	7f 2e       	mov	r7, r31
     616:	f0 2d       	mov	r31, r0
        for(m=0;m<Nsig[n]-Nint[n];m++){
            Resolution[n] = Resolution[n] / 10;
        }
        Nspace[n]       = 4 - ( Nsig[n] + (Nsig[n]!=Nint[n]) );
     618:	44 e0       	ldi	r20, 0x04	; 4
     61a:	94 2e       	mov	r9, r20
	uint8_t	Nspace[7];				// Number of space between character and digits
    float   Resolution[7];
    
    // Definition of Resolution for processing and number of space for display
    for(n=0;n<7;n++){
        Resolution[n] = 1;
     61c:	d8 01       	movw	r26, r16
     61e:	4d 92       	st	X+, r4
     620:	5d 92       	st	X+, r5
     622:	6d 92       	st	X+, r6
     624:	7c 92       	st	X, r7
     626:	13 97       	sbiw	r26, 0x03	; 3
        for(m=0;m<Nsig[n]-Nint[n];m++){
     628:	f1 01       	movw	r30, r2
     62a:	e1 90       	ld	r14, Z+
     62c:	1f 01       	movw	r2, r30
     62e:	a3 96       	adiw	r28, 0x23	; 35
     630:	ae ad       	sts	0x6e, r26
     632:	bf ad       	sts	0x6f, r27
     634:	a3 97       	sbiw	r28, 0x23	; 35
     636:	cd 90       	ld	r12, X+
     638:	a3 96       	adiw	r28, 0x23	; 35
     63a:	bf af       	sts	0x7f, r27
     63c:	ae af       	sts	0x7e, r26
     63e:	a3 97       	sbiw	r28, 0x23	; 35
     640:	ae 2c       	mov	r10, r14
     642:	bb 24       	eor	r11, r11
     644:	ac 18       	sub	r10, r12
     646:	b1 08       	sbc	r11, r1
     648:	ff 24       	eor	r15, r15
     64a:	12 c0       	rjmp	.+36     	; 0x670 <main+0x104>
            Resolution[n] = Resolution[n] / 10;
     64c:	f8 01       	movw	r30, r16
     64e:	60 81       	ld	r22, Z
     650:	71 81       	ldd	r23, Z+1	; 0x01
     652:	82 81       	ldd	r24, Z+2	; 0x02
     654:	93 81       	ldd	r25, Z+3	; 0x03
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	40 e2       	ldi	r20, 0x20	; 32
     65c:	51 e4       	ldi	r21, 0x41	; 65
     65e:	60 d3       	rcall	.+1728   	; 0xd20 <__divsf3>
     660:	dc 01       	movw	r26, r24
     662:	cb 01       	movw	r24, r22
     664:	f8 01       	movw	r30, r16
     666:	80 83       	st	Z, r24
     668:	91 83       	std	Z+1, r25	; 0x01
     66a:	a2 83       	std	Z+2, r26	; 0x02
     66c:	b3 83       	std	Z+3, r27	; 0x03
    float   Resolution[7];
    
    // Definition of Resolution for processing and number of space for display
    for(n=0;n<7;n++){
        Resolution[n] = 1;
        for(m=0;m<Nsig[n]-Nint[n];m++){
     66e:	f3 94       	inc	r15
     670:	8f 2d       	mov	r24, r15
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	8a 15       	cp	r24, r10
     676:	9b 05       	cpc	r25, r11
     678:	4c f3       	brlt	.-46     	; 0x64c <main+0xe0>
            Resolution[n] = Resolution[n] / 10;
        }
        Nspace[n]       = 4 - ( Nsig[n] + (Nsig[n]!=Nint[n]) );
     67a:	89 2d       	mov	r24, r9
     67c:	8e 19       	sub	r24, r14
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	ec 14       	cp	r14, r12
     682:	09 f4       	brne	.+2      	; 0x686 <main+0x11a>
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	89 1b       	sub	r24, r25
     688:	a1 96       	adiw	r28, 0x21	; 33
     68a:	ae ad       	sts	0x6e, r26
     68c:	bf ad       	sts	0x6f, r27
     68e:	a1 97       	sbiw	r28, 0x21	; 33
     690:	8d 93       	st	X+, r24
     692:	a1 96       	adiw	r28, 0x21	; 33
     694:	bf af       	sts	0x7f, r27
     696:	ae af       	sts	0x7e, r26
     698:	a1 97       	sbiw	r28, 0x21	; 33
    
	uint8_t	Nspace[7];				// Number of space between character and digits
    float   Resolution[7];
    
    // Definition of Resolution for processing and number of space for display
    for(n=0;n<7;n++){
     69a:	d3 94       	inc	r13
     69c:	0c 5f       	subi	r16, 0xFC	; 252
     69e:	1f 4f       	sbci	r17, 0xFF	; 255
     6a0:	b7 e0       	ldi	r27, 0x07	; 7
     6a2:	db 16       	cp	r13, r27
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <main+0x13c>
     6a6:	ba cf       	rjmp	.-140    	; 0x61c <main+0xb0>
            Resolution[n] = Resolution[n] / 10;
        }
        Nspace[n]       = 4 - ( Nsig[n] + (Nsig[n]!=Nint[n]) );
    }
    
	RxName[0]		=   "BS";
     6a8:	8f e2       	ldi	r24, 0x2F	; 47
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	90 93 ce 01 	sts	0x01CE, r25
     6b0:	80 93 cd 01 	sts	0x01CD, r24
	RxName[1]		=   "TC";
     6b4:	82 e3       	ldi	r24, 0x32	; 50
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	90 93 d0 01 	sts	0x01D0, r25
     6bc:	80 93 cf 01 	sts	0x01CF, r24
	RxName[2]		=   "OPs";
     6c0:	85 e3       	ldi	r24, 0x35	; 53
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	90 93 d2 01 	sts	0x01D2, r25
     6c8:	80 93 d1 01 	sts	0x01D1, r24
	RxName[3]		=   "FP";
     6cc:	89 e3       	ldi	r24, 0x39	; 57
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	90 93 d4 01 	sts	0x01D4, r25
     6d4:	80 93 d3 01 	sts	0x01D3, r24
	RxName[4]		=   "ET";
     6d8:	8c e3       	ldi	r24, 0x3C	; 60
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	90 93 d6 01 	sts	0x01D6, r25
     6e0:	80 93 d5 01 	sts	0x01D5, r24
	RxName[5]		=   "OT";
     6e4:	8f e3       	ldi	r24, 0x3F	; 63
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	90 93 d8 01 	sts	0x01D8, r25
     6ec:	80 93 d7 01 	sts	0x01D7, r24
	RxName[6]		=   "WT";
     6f0:	82 e4       	ldi	r24, 0x42	; 66
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	90 93 da 01 	sts	0x01DA, r25
     6f8:	80 93 d9 01 	sts	0x01D9, r24
    
    
	RxName_long[0]	=   "Boost";
     6fc:	85 e4       	ldi	r24, 0x45	; 69
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	90 93 e6 01 	sts	0x01E6, r25
     704:	80 93 e5 01 	sts	0x01E5, r24
	RxName_long[1]	=   "Tacho";
     708:	8b e4       	ldi	r24, 0x4B	; 75
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	90 93 e8 01 	sts	0x01E8, r25
     710:	80 93 e7 01 	sts	0x01E7, r24
	RxName_long[2]	=   "Oil press";
     714:	81 e5       	ldi	r24, 0x51	; 81
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	90 93 ea 01 	sts	0x01EA, r25
     71c:	80 93 e9 01 	sts	0x01E9, r24
	RxName_long[3]	=   "Fuel press";
     720:	8b e5       	ldi	r24, 0x5B	; 91
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	90 93 ec 01 	sts	0x01EC, r25
     728:	80 93 eb 01 	sts	0x01EB, r24
	RxName_long[4]	=   "Ext. Temp.";
     72c:	86 e6       	ldi	r24, 0x66	; 102
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	90 93 ee 01 	sts	0x01EE, r25
     734:	80 93 ed 01 	sts	0x01ED, r24
	RxName_long[5]	=   "Oil Temp.";
     738:	81 e7       	ldi	r24, 0x71	; 113
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	90 93 f0 01 	sts	0x01F0, r25
     740:	80 93 ef 01 	sts	0x01EF, r24
	RxName_long[6]	=   "Water Temp.";
     744:	8b e7       	ldi	r24, 0x7B	; 123
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	90 93 f2 01 	sts	0x01F2, r25
     74c:	80 93 f1 01 	sts	0x01F1, r24
    
	mult_factor[0] = 1;
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	9b 87       	std	Y+11, r25	; 0x0b
     756:	8a 87       	std	Y+10, r24	; 0x0a
	mult_factor[1] = 16;
     758:	80 e1       	ldi	r24, 0x10	; 16
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	9d 87       	std	Y+13, r25	; 0x0d
     75e:	8c 87       	std	Y+12, r24	; 0x0c
	mult_factor[2] = 256;
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	9f 87       	std	Y+15, r25	; 0x0f
     766:	8e 87       	std	Y+14, r24	; 0x0e
     768:	8f e7       	ldi	r24, 0x7F	; 127
     76a:	98 e3       	ldi	r25, 0x38	; 56
     76c:	a1 e0       	ldi	r26, 0x01	; 1
     76e:	81 50       	subi	r24, 0x01	; 1
     770:	90 40       	sbci	r25, 0x00	; 0
     772:	a0 40       	sbci	r26, 0x00	; 0
     774:	e1 f7       	brne	.-8      	; 0x76e <main+0x202>
     776:	00 c0       	rjmp	.+0      	; 0x778 <main+0x20c>
     778:	00 00       	nop
        }
    }

    // opening
	_delay_ms(50);
	lcd_locate(0,0);
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	44 dd       	rcall	.-1400   	; 0x208 <lcd_locate>
     780:	0e e1       	ldi	r16, 0x1E	; 30
     782:	11 e0       	ldi	r17, 0x01	; 1
	for(n=0;n<16;n++){
     784:	90 e0       	ldi	r25, 0x00	; 0
		lcd_set_char(opening_message0[n]);
     786:	d8 01       	movw	r26, r16
     788:	8d 91       	ld	r24, X+
     78a:	8d 01       	movw	r16, r26
     78c:	e1 96       	adiw	r28, 0x31	; 49
     78e:	9f af       	sts	0x7f, r25
     790:	e1 97       	sbiw	r28, 0x31	; 49
     792:	2a dd       	rcall	.-1452   	; 0x1e8 <lcd_set_char>
     794:	ef e3       	ldi	r30, 0x3F	; 63
     796:	fc e9       	ldi	r31, 0x9C	; 156
     798:	31 97       	sbiw	r30, 0x01	; 1
     79a:	f1 f7       	brne	.-4      	; 0x798 <main+0x22c>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <main+0x232>
     79e:	00 00       	nop
    }

    // opening
	_delay_ms(50);
	lcd_locate(0,0);
	for(n=0;n<16;n++){
     7a0:	e1 96       	adiw	r28, 0x31	; 49
     7a2:	9f ad       	sts	0x6f, r25
     7a4:	e1 97       	sbiw	r28, 0x31	; 49
     7a6:	9f 5f       	subi	r25, 0xFF	; 255
     7a8:	90 31       	cpi	r25, 0x10	; 16
     7aa:	69 f7       	brne	.-38     	; 0x786 <main+0x21a>
		lcd_set_char(opening_message0[n]);
		_delay_ms(20);
	}
	lcd_locate(1,0);
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	2b dd       	rcall	.-1450   	; 0x208 <lcd_locate>
     7b2:	0d e0       	ldi	r16, 0x0D	; 13
     7b4:	11 e0       	ldi	r17, 0x01	; 1
	for(n=0;n<16;n++){
     7b6:	90 e0       	ldi	r25, 0x00	; 0
		lcd_set_char(opening_message1[n]);
     7b8:	d8 01       	movw	r26, r16
     7ba:	8d 91       	ld	r24, X+
     7bc:	8d 01       	movw	r16, r26
     7be:	e1 96       	adiw	r28, 0x31	; 49
     7c0:	9f af       	sts	0x7f, r25
     7c2:	e1 97       	sbiw	r28, 0x31	; 49
     7c4:	11 dd       	rcall	.-1502   	; 0x1e8 <lcd_set_char>
     7c6:	ef e3       	ldi	r30, 0x3F	; 63
     7c8:	fc e9       	ldi	r31, 0x9C	; 156
     7ca:	31 97       	sbiw	r30, 0x01	; 1
     7cc:	f1 f7       	brne	.-4      	; 0x7ca <main+0x25e>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <main+0x264>
     7d0:	00 00       	nop
	for(n=0;n<16;n++){
		lcd_set_char(opening_message0[n]);
		_delay_ms(20);
	}
	lcd_locate(1,0);
	for(n=0;n<16;n++){
     7d2:	e1 96       	adiw	r28, 0x31	; 49
     7d4:	9f ad       	sts	0x6f, r25
     7d6:	e1 97       	sbiw	r28, 0x31	; 49
     7d8:	9f 5f       	subi	r25, 0xFF	; 255
     7da:	90 31       	cpi	r25, 0x10	; 16
     7dc:	69 f7       	brne	.-38     	; 0x7b8 <main+0x24c>
     7de:	8f ef       	ldi	r24, 0xFF	; 255
     7e0:	92 e5       	ldi	r25, 0x52	; 82
     7e2:	a7 e0       	ldi	r26, 0x07	; 7
     7e4:	81 50       	subi	r24, 0x01	; 1
     7e6:	90 40       	sbci	r25, 0x00	; 0
     7e8:	a0 40       	sbci	r26, 0x00	; 0
     7ea:	e1 f7       	brne	.-8      	; 0x7e4 <main+0x278>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <main+0x282>
     7ee:	00 00       	nop
		_delay_ms(20);
	}
    
    // Clear Opening
	_delay_ms(300);
	for(m=0;m<2;m++){
     7f0:	10 e0       	ldi	r17, 0x00	; 0
		lcd_locate(m,0);
     7f2:	81 2f       	mov	r24, r17
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	08 dd       	rcall	.-1520   	; 0x208 <lcd_locate>
     7f8:	00 e1       	ldi	r16, 0x10	; 16
		for(n=0;n<16;n++){
			lcd_set_char(0x20);
     7fa:	80 e2       	ldi	r24, 0x20	; 32
     7fc:	f5 dc       	rcall	.-1558   	; 0x1e8 <lcd_set_char>
     7fe:	af e3       	ldi	r26, 0x3F	; 63
     800:	bc e9       	ldi	r27, 0x9C	; 156
     802:	11 97       	sbiw	r26, 0x01	; 1
     804:	f1 f7       	brne	.-4      	; 0x802 <main+0x296>
     806:	00 c0       	rjmp	.+0      	; 0x808 <main+0x29c>
     808:	00 00       	nop
     80a:	01 50       	subi	r16, 0x01	; 1
    
    // Clear Opening
	_delay_ms(300);
	for(m=0;m<2;m++){
		lcd_locate(m,0);
		for(n=0;n<16;n++){
     80c:	b1 f7       	brne	.-20     	; 0x7fa <main+0x28e>
		_delay_ms(20);
	}
    
    // Clear Opening
	_delay_ms(300);
	for(m=0;m<2;m++){
     80e:	1f 5f       	subi	r17, 0xFF	; 255
     810:	12 30       	cpi	r17, 0x02	; 2
     812:	79 f7       	brne	.-34     	; 0x7f2 <main+0x286>
			lcd_set_char(0x20);
			_delay_ms(20);
		}
	}
    
    sei();
     814:	78 94       	sei

	// Main function start this
	while(1){
        
        if(lcd_update){
     816:	80 91 be 01 	lds	r24, 0x01BE
     81a:	88 23       	and	r24, r24
     81c:	89 f0       	breq	.+34     	; 0x840 <main+0x2d4>
			DisplayItemInfo();
     81e:	a1 dd       	rcall	.-1214   	; 0x362 <DisplayItemInfo>
            lcd_locate((chg_index&0x03)>>1,8-(1-chg_index%2));
     820:	20 91 c8 01 	lds	r18, 0x01C8
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	c9 01       	movw	r24, r18
     828:	83 70       	andi	r24, 0x03	; 3
     82a:	90 70       	andi	r25, 0x00	; 0
     82c:	95 95       	asr	r25
     82e:	87 95       	ror	r24
     830:	20 ff       	sbrs	r18, 0
     832:	02 c0       	rjmp	.+4      	; 0x838 <main+0x2cc>
     834:	68 e0       	ldi	r22, 0x08	; 8
     836:	01 c0       	rjmp	.+2      	; 0x83a <main+0x2ce>
     838:	67 e0       	ldi	r22, 0x07	; 7
     83a:	e6 dc       	rcall	.-1588   	; 0x208 <lcd_locate>
			lcd_update = 0;
     83c:	10 92 be 01 	sts	0x01BE, r1
     840:	ef ed       	ldi	r30, 0xDF	; 223
     842:	f1 e0       	ldi	r31, 0x01	; 1
     844:	ae 96       	adiw	r28, 0x2e	; 46
     846:	ff af       	sts	0x7f, r31
     848:	ee af       	sts	0x7e, r30
     84a:	ae 97       	sbiw	r28, 0x2e	; 46
     84c:	23 ef       	ldi	r18, 0xF3	; 243
     84e:	31 e0       	ldi	r19, 0x01	; 1
     850:	ab 96       	adiw	r28, 0x2b	; 43
     852:	3f af       	sts	0x7f, r19
     854:	2e af       	sts	0x7e, r18
     856:	ab 97       	sbiw	r28, 0x2b	; 43
	// Main function start this
	while(1){
        
        if(lcd_update){
			DisplayItemInfo();
            lcd_locate((chg_index&0x03)>>1,8-(1-chg_index%2));
     858:	32 e0       	ldi	r19, 0x02	; 2
     85a:	a0 96       	adiw	r28, 0x20	; 32
     85c:	3f af       	sts	0x7f, r19
     85e:	a0 97       	sbiw	r28, 0x20	; 32
     860:	a9 96       	adiw	r28, 0x29	; 41
     862:	1f ae       	sts	0xbf, r17
     864:	1e ae       	sts	0xbe, r17
     866:	a9 97       	sbiw	r28, 0x29	; 41
			
			// Rx data read
			id = t_id[index];
            
			// Judge data validity
			for( n = 1; n < 4; n++ ){
     868:	ce 01       	movw	r24, r28
     86a:	0a 96       	adiw	r24, 0x0a	; 10
     86c:	6f 96       	adiw	r28, 0x1f	; 31
     86e:	9f af       	sts	0x7f, r25
     870:	8e af       	sts	0x7e, r24
     872:	6f 97       	sbiw	r28, 0x1f	; 31
		}

		for ( index = 0; index < Ndata; index++ ){
			
			// Rx data read
			id = t_id[index];
     874:	ae 96       	adiw	r28, 0x2e	; 46
     876:	ae ad       	sts	0x6e, r26
     878:	bf ad       	sts	0x6f, r27
     87a:	ae 97       	sbiw	r28, 0x2e	; 46
     87c:	fd 90       	ld	r15, X+
     87e:	ae 96       	adiw	r28, 0x2e	; 46
     880:	bf af       	sts	0x7f, r27
     882:	ae af       	sts	0x7e, r26
     884:	ae 97       	sbiw	r28, 0x2e	; 46
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
    lcd_locate(0,0);
    lcd_set_str("BADISR ERROR");
    while(1);  // ここで止めておく
}

int main(void)
     88a:	ab 96       	adiw	r28, 0x2b	; 43
     88c:	ee ad       	sts	0x6e, r30
     88e:	ff ad       	sts	0x6f, r31
     890:	ab 97       	sbiw	r28, 0x2b	; 43
     892:	e8 0f       	add	r30, r24
     894:	f9 1f       	adc	r31, r25
			// Rx data read
			id = t_id[index];
            
			// Judge data validity
			for( n = 1; n < 4; n++ ){
				if( ( ( (data[index][n] >= '0') & (data[index][n] <= '9') )
     896:	21 81       	ldd	r18, Z+1	; 0x01
                     |( (data[index][n] >= 'A') & (data[index][n] <= 'F') ) ) ){
     898:	32 2f       	mov	r19, r18
     89a:	31 54       	subi	r19, 0x41	; 65
     89c:	36 30       	cpi	r19, 0x06	; 6
     89e:	20 f0       	brcs	.+8      	; 0x8a8 <main+0x33c>
			// Rx data read
			id = t_id[index];
            
			// Judge data validity
			for( n = 1; n < 4; n++ ){
				if( ( ( (data[index][n] >= '0') & (data[index][n] <= '9') )
     8a0:	20 53       	subi	r18, 0x30	; 48
     8a2:	2a 30       	cpi	r18, 0x0A	; 10
     8a4:	08 f0       	brcs	.+2      	; 0x8a8 <main+0x33c>
     8a6:	ca c1       	rjmp	.+916    	; 0xc3c <main+0x6d0>
     8a8:	01 96       	adiw	r24, 0x01	; 1
			
			// Rx data read
			id = t_id[index];
            
			// Judge data validity
			for( n = 1; n < 4; n++ ){
     8aa:	83 30       	cpi	r24, 0x03	; 3
     8ac:	91 05       	cpc	r25, r1
     8ae:	69 f7       	brne	.-38     	; 0x88a <main+0x31e>
    lcd_locate(0,0);
    lcd_set_str("BADISR ERROR");
    while(1);  // ここで止めておく
}

int main(void)
     8b0:	a9 96       	adiw	r28, 0x29	; 41
     8b2:	ee ad       	sts	0x6e, r30
     8b4:	ff ad       	sts	0x6f, r31
     8b6:	a9 97       	sbiw	r28, 0x29	; 41
     8b8:	ee 0f       	add	r30, r30
     8ba:	ff 1f       	adc	r31, r31
     8bc:	ee 0f       	add	r30, r30
     8be:	ff 1f       	adc	r31, r31
     8c0:	ec 50       	subi	r30, 0x0C	; 12
     8c2:	fe 4f       	sbci	r31, 0xFE	; 254
			
			// Rx data read
			id = t_id[index];
            
			// Judge data validity
			for( n = 1; n < 4; n++ ){
     8c4:	de 01       	movw	r26, r28
     8c6:	12 96       	adiw	r26, 0x02	; 2
     8c8:	be 01       	movw	r22, r28
     8ca:	60 5f       	subi	r22, 0xF0	; 240
     8cc:	7f 4f       	sbci	r23, 0xFF	; 255
    lcd_locate(0,0);
    lcd_set_str("BADISR ERROR");
    while(1);  // ここで止めておく
}

int main(void)
     8ce:	00 e0       	ldi	r16, 0x00	; 0
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	6f 01       	movw	r12, r30
            
			if ( valid_packet == 1 ) {
				// Change char to angle-dec
                dec_ang = 0;
				for( n = 1; n < 4; n++){ // data[0] is neglected because of it is control data
					if  ( (data[index][n] & 0xf0) == 0x30 ){
     8d4:	f6 01       	movw	r30, r12
     8d6:	21 91       	ld	r18, Z+
     8d8:	6f 01       	movw	r12, r30
     8da:	82 2f       	mov	r24, r18
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	80 7f       	andi	r24, 0xF0	; 240
     8e0:	90 70       	andi	r25, 0x00	; 0
     8e2:	80 33       	cpi	r24, 0x30	; 48
     8e4:	91 05       	cpc	r25, r1
     8e6:	11 f4       	brne	.+4      	; 0x8ec <main+0x380>
						low4bits[n] = (unsigned int)(data[index][n] & 0x0f);
     8e8:	2f 70       	andi	r18, 0x0F	; 15
     8ea:	05 c0       	rjmp	.+10     	; 0x8f6 <main+0x38a>
					}else if ( (data[index][n] & 0xf0) == 0x40 ){
     8ec:	80 34       	cpi	r24, 0x40	; 64
     8ee:	91 05       	cpc	r25, r1
     8f0:	c9 f4       	brne	.+50     	; 0x924 <main+0x3b8>
						low4bits[n] = (unsigned int)(data[index][n] & 0x0f) + 9;
     8f2:	2f 70       	andi	r18, 0x0F	; 15
     8f4:	27 5f       	subi	r18, 0xF7	; 247
     8f6:	2c 93       	st	X, r18
					}else{
						break;
					}
					dec_ang = dec_ang + low4bits[n] * mult_factor[3-n];
     8f8:	8d 91       	ld	r24, X+
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	fb 01       	movw	r30, r22
     8fe:	32 91       	ld	r19, -Z
     900:	22 91       	ld	r18, -Z
     902:	bf 01       	movw	r22, r30
     904:	82 9f       	mul	r24, r18
     906:	a0 01       	movw	r20, r0
     908:	83 9f       	mul	r24, r19
     90a:	50 0d       	add	r21, r0
     90c:	92 9f       	mul	r25, r18
     90e:	50 0d       	add	r21, r0
     910:	11 24       	eor	r1, r1
     912:	04 0f       	add	r16, r20
     914:	15 1f       	adc	r17, r21
			// end of judge
            
			if ( valid_packet == 1 ) {
				// Change char to angle-dec
                dec_ang = 0;
				for( n = 1; n < 4; n++){ // data[0] is neglected because of it is control data
     916:	6f 96       	adiw	r28, 0x1f	; 31
     918:	2e ad       	sts	0x6e, r18
     91a:	3f ad       	sts	0x6f, r19
     91c:	6f 97       	sbiw	r28, 0x1f	; 31
     91e:	e2 17       	cp	r30, r18
     920:	f3 07       	cpc	r31, r19
     922:	c1 f6       	brne	.-80     	; 0x8d4 <main+0x368>
                // Change angle-dec to normlized-dec
                dec_nrm = (float)dec_ang / maxv;
                // end of Change angle-dec to normlized-dec
                
				// Change dec to ISO
				value = dec_nrm * eq_grad[id] + eq_intercept[id];
     924:	8f 2d       	mov	r24, r15
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a3 96       	adiw	r28, 0x23	; 35
     92a:	9f af       	sts	0x7f, r25
     92c:	8e af       	sts	0x7e, r24
     92e:	a3 97       	sbiw	r28, 0x23	; 35
					dec_ang = dec_ang + low4bits[n] * mult_factor[3-n];
				}
				// end of Change char to angle-dec
                
                // Change angle-dec to normlized-dec
                dec_nrm = (float)dec_ang / maxv;
     930:	b8 01       	movw	r22, r16
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	88 d2       	rcall	.+1296   	; 0xe48 <__floatunsisf>
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	43 e1       	ldi	r20, 0x13	; 19
     93e:	55 e4       	ldi	r21, 0x45	; 69
     940:	ef d1       	rcall	.+990    	; 0xd20 <__divsf3>
     942:	6b 01       	movw	r12, r22
     944:	7c 01       	movw	r14, r24
                // end of Change angle-dec to normlized-dec
                
				// Change dec to ISO
				value = dec_nrm * eq_grad[id] + eq_intercept[id];
     946:	a3 96       	adiw	r28, 0x23	; 35
     948:	0e ad       	sts	0x6e, r16
     94a:	1f ad       	sts	0x6f, r17
     94c:	a3 97       	sbiw	r28, 0x23	; 35
     94e:	00 0f       	add	r16, r16
     950:	11 1f       	adc	r17, r17
     952:	a1 e0       	ldi	r26, 0x01	; 1
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ac 0f       	add	r26, r28
     958:	bd 1f       	adc	r27, r29
     95a:	0a 0f       	add	r16, r26
     95c:	1b 1f       	adc	r17, r27
     95e:	f8 01       	movw	r30, r16
     960:	62 a9       	sts	0x42, r22
     962:	73 a9       	sts	0x43, r23
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	6f d2       	rcall	.+1246   	; 0xe48 <__floatunsisf>
     96a:	9b 01       	movw	r18, r22
     96c:	ac 01       	movw	r20, r24
     96e:	c7 01       	movw	r24, r14
     970:	b6 01       	movw	r22, r12
     972:	1c d3       	rcall	.+1592   	; 0xfac <__mulsf3>
     974:	6b 01       	movw	r12, r22
     976:	7c 01       	movw	r14, r24
     978:	d8 01       	movw	r26, r16
     97a:	94 96       	adiw	r26, 0x24	; 36
     97c:	6d 91       	ld	r22, X+
     97e:	7c 91       	ld	r23, X
     980:	95 97       	sbiw	r26, 0x25	; 37
     982:	88 27       	eor	r24, r24
     984:	77 fd       	sbrc	r23, 7
     986:	80 95       	com	r24
     988:	98 2f       	mov	r25, r24
     98a:	60 d2       	rcall	.+1216   	; 0xe4c <__floatsisf>
     98c:	9b 01       	movw	r18, r22
     98e:	ac 01       	movw	r20, r24
     990:	c7 01       	movw	r24, r14
     992:	b6 01       	movw	r22, r12
     994:	5d d1       	rcall	.+698    	; 0xc50 <__addsf3>
     996:	86 2e       	mov	r8, r22
     998:	97 2e       	mov	r9, r23
     99a:	a8 2e       	mov	r10, r24
     99c:	b9 2e       	mov	r11, r25
                // end of change
				
				// Detect sign
                if( value < 0 ){
     99e:	46 2f       	mov	r20, r22
     9a0:	57 2f       	mov	r21, r23
     9a2:	68 2f       	mov	r22, r24
     9a4:	79 2f       	mov	r23, r25
     9a6:	cb 01       	movw	r24, r22
     9a8:	ba 01       	movw	r22, r20
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	a9 01       	movw	r20, r18
     9b0:	b3 d1       	rcall	.+870    	; 0xd18 <__cmpsf2>
     9b2:	87 ff       	sbrs	r24, 7
     9b4:	09 c0       	rjmp	.+18     	; 0x9c8 <main+0x45c>
					value_sign = 1;
					value = -value;
     9b6:	b7 fa       	bst	r11, 7
     9b8:	b0 94       	com	r11
     9ba:	b7 f8       	bld	r11, 7
     9bc:	b0 94       	com	r11
				value = dec_nrm * eq_grad[id] + eq_intercept[id];
                // end of change
				
				// Detect sign
                if( value < 0 ){
					value_sign = 1;
     9be:	b1 e0       	ldi	r27, 0x01	; 1
     9c0:	ac 96       	adiw	r28, 0x2c	; 44
     9c2:	bf af       	sts	0x7f, r27
     9c4:	ac 97       	sbiw	r28, 0x2c	; 44
     9c6:	03 c0       	rjmp	.+6      	; 0x9ce <main+0x462>
					value = -value;
				}else{
					value_sign = 0;
     9c8:	ac 96       	adiw	r28, 0x2c	; 44
     9ca:	1f ae       	sts	0xbf, r17
     9cc:	ac 97       	sbiw	r28, 0x2c	; 44
				}
				// end of
				
				// Divide from integer to each digits
				for (n=0;n<=Nsig[id]-1;n++) {
     9ce:	ee e1       	ldi	r30, 0x1E	; 30
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	ec 0f       	add	r30, r28
     9d4:	fd 1f       	adc	r31, r29
     9d6:	a3 96       	adiw	r28, 0x23	; 35
     9d8:	2e ad       	sts	0x6e, r18
     9da:	3f ad       	sts	0x6f, r19
     9dc:	a3 97       	sbiw	r28, 0x23	; 35
     9de:	e2 0f       	add	r30, r18
     9e0:	f3 1f       	adc	r31, r19
     9e2:	80 81       	ld	r24, Z
     9e4:	a8 2f       	mov	r26, r24
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	a5 96       	adiw	r28, 0x25	; 37
     9ea:	bf af       	sts	0x7f, r27
     9ec:	ae af       	sts	0x7e, r26
     9ee:	a5 97       	sbiw	r28, 0x25	; 37
     9f0:	cc 24       	eor	r12, r12
					div_factor = Resolution[id];
     9f2:	19 01       	movw	r2, r18
     9f4:	22 0c       	add	r2, r2
     9f6:	33 1c       	adc	r3, r3
     9f8:	22 0c       	add	r2, r2
     9fa:	33 1c       	adc	r3, r3
     9fc:	e1 e4       	ldi	r30, 0x41	; 65
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	ec 0f       	add	r30, r28
     a02:	fd 1f       	adc	r31, r29
     a04:	2e 0e       	add	r2, r30
     a06:	3f 1e       	adc	r3, r31
					for (m=0;m<Nsig[id]-1-n;m++) {
     a08:	11 97       	sbiw	r26, 0x01	; 1
     a0a:	e0 96       	adiw	r28, 0x30	; 48
     a0c:	bf af       	sts	0x7f, r27
     a0e:	ae af       	sts	0x7e, r26
     a10:	e0 97       	sbiw	r28, 0x30	; 48
					value_sign = 0;
				}
				// end of
				
				// Divide from integer to each digits
				for (n=0;n<=Nsig[id]-1;n++) {
     a12:	61 c0       	rjmp	.+194    	; 0xad6 <main+0x56a>
					div_factor = Resolution[id];
     a14:	d1 01       	movw	r26, r2
     a16:	ec 90       	ld	r14, X
     a18:	11 96       	adiw	r26, 0x01	; 1
     a1a:	1c 91       	ld	r17, X
     a1c:	11 97       	sbiw	r26, 0x01	; 1
     a1e:	12 96       	adiw	r26, 0x02	; 2
     a20:	0c 91       	ld	r16, X
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	13 96       	adiw	r26, 0x03	; 3
     a26:	fc 90       	ld	r15, X
     a28:	13 97       	sbiw	r26, 0x03	; 3
					for (m=0;m<Nsig[id]-1-n;m++) {
     a2a:	dd 24       	eor	r13, r13
     a2c:	e0 96       	adiw	r28, 0x30	; 48
     a2e:	4e ac       	sts	0xae, r20
     a30:	5f ac       	sts	0xaf, r21
     a32:	e0 97       	sbiw	r28, 0x30	; 48
     a34:	a7 96       	adiw	r28, 0x27	; 39
     a36:	ee ad       	sts	0x6e, r30
     a38:	ff ad       	sts	0x6f, r31
     a3a:	a7 97       	sbiw	r28, 0x27	; 39
     a3c:	4e 1a       	sub	r4, r30
     a3e:	5f 0a       	sbc	r5, r31
     a40:	80 2f       	mov	r24, r16
     a42:	9f 2d       	mov	r25, r15
     a44:	0f c0       	rjmp	.+30     	; 0xa64 <main+0x4f8>
						div_factor = div_factor * 10;
     a46:	2e 2d       	mov	r18, r14
     a48:	31 2f       	mov	r19, r17
     a4a:	ac 01       	movw	r20, r24
     a4c:	c9 01       	movw	r24, r18
     a4e:	da 01       	movw	r26, r20
     a50:	bc 01       	movw	r22, r24
     a52:	cd 01       	movw	r24, r26
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	40 e2       	ldi	r20, 0x20	; 32
     a5a:	51 e4       	ldi	r21, 0x41	; 65
     a5c:	a7 d2       	rcall	.+1358   	; 0xfac <__mulsf3>
     a5e:	e6 2e       	mov	r14, r22
     a60:	17 2f       	mov	r17, r23
				// end of
				
				// Divide from integer to each digits
				for (n=0;n<=Nsig[id]-1;n++) {
					div_factor = Resolution[id];
					for (m=0;m<Nsig[id]-1-n;m++) {
     a62:	d3 94       	inc	r13
     a64:	2d 2d       	mov	r18, r13
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	24 15       	cp	r18, r4
     a6a:	35 05       	cpc	r19, r5
     a6c:	64 f3       	brlt	.-40     	; 0xa46 <main+0x4da>
     a6e:	08 2f       	mov	r16, r24
     a70:	f9 2e       	mov	r15, r25
						div_factor = div_factor * 10;
					}
					digits_int[n] = (uint8_t)(value / div_factor);
     a72:	c5 01       	movw	r24, r10
     a74:	b4 01       	movw	r22, r8
     a76:	2e 2d       	mov	r18, r14
     a78:	31 2f       	mov	r19, r17
     a7a:	40 2f       	mov	r20, r16
     a7c:	5f 2d       	mov	r21, r15
     a7e:	29 01       	movw	r4, r18
     a80:	3a 01       	movw	r6, r20
     a82:	a3 01       	movw	r20, r6
     a84:	92 01       	movw	r18, r4
     a86:	4c d1       	rcall	.+664    	; 0xd20 <__divsf3>
     a88:	b3 d1       	rcall	.+870    	; 0xdf0 <__fixunssfsi>
					digits_char[n] = (uint8_t)digits_int[n] + 0x30;
     a8a:	e5 e0       	ldi	r30, 0x05	; 5
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	ec 0f       	add	r30, r28
     a90:	fd 1f       	adc	r31, r29
     a92:	a7 96       	adiw	r28, 0x27	; 39
     a94:	2e ad       	sts	0x6e, r18
     a96:	3f ad       	sts	0x6f, r19
     a98:	a7 97       	sbiw	r28, 0x27	; 39
     a9a:	e2 0f       	add	r30, r18
     a9c:	f3 1f       	adc	r31, r19
     a9e:	86 2f       	mov	r24, r22
     aa0:	80 5d       	subi	r24, 0xD0	; 208
     aa2:	80 83       	st	Z, r24
					value = value - div_factor * digits_int[n];
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	d0 d1       	rcall	.+928    	; 0xe4c <__floatsisf>
     aac:	9b 01       	movw	r18, r22
     aae:	ac 01       	movw	r20, r24
     ab0:	6e 2d       	mov	r22, r14
     ab2:	71 2f       	mov	r23, r17
     ab4:	e0 2f       	mov	r30, r16
     ab6:	ff 2d       	mov	r31, r15
     ab8:	cb 01       	movw	r24, r22
     aba:	df 01       	movw	r26, r30
     abc:	bc 01       	movw	r22, r24
     abe:	cd 01       	movw	r24, r26
     ac0:	75 d2       	rcall	.+1258   	; 0xfac <__mulsf3>
     ac2:	9b 01       	movw	r18, r22
     ac4:	ac 01       	movw	r20, r24
     ac6:	c5 01       	movw	r24, r10
     ac8:	b4 01       	movw	r22, r8
     aca:	c1 d0       	rcall	.+386    	; 0xc4e <__subsf3>
     acc:	86 2e       	mov	r8, r22
     ace:	97 2e       	mov	r9, r23
     ad0:	a8 2e       	mov	r10, r24
     ad2:	b9 2e       	mov	r11, r25
					value_sign = 0;
				}
				// end of
				
				// Divide from integer to each digits
				for (n=0;n<=Nsig[id]-1;n++) {
     ad4:	c3 94       	inc	r12
     ad6:	8c 2d       	mov	r24, r12
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	a7 96       	adiw	r28, 0x27	; 39
     adc:	9f af       	sts	0x7f, r25
     ade:	8e af       	sts	0x7e, r24
     ae0:	a7 97       	sbiw	r28, 0x27	; 39
     ae2:	a5 96       	adiw	r28, 0x25	; 37
     ae4:	ae ad       	sts	0x6e, r26
     ae6:	bf ad       	sts	0x6f, r27
     ae8:	a5 97       	sbiw	r28, 0x25	; 37
     aea:	8a 17       	cp	r24, r26
     aec:	9b 07       	cpc	r25, r27
     aee:	0c f4       	brge	.+2      	; 0xaf2 <main+0x586>
     af0:	91 cf       	rjmp	.-222    	; 0xa14 <main+0x4a8>
					value = value - div_factor * digits_int[n];
				}
				// end of
                
				// clear value area of LCD
                lcd_locate((uint8_t)((8*index)/16),9*(index%2)+2);
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	a0 96       	adiw	r28, 0x20	; 32
     af6:	6f ad       	sts	0x6f, r22
     af8:	a0 97       	sbiw	r28, 0x20	; 32
     afa:	86 db       	rcall	.-2292   	; 0x208 <lcd_locate>
				lcd_set_str("     ");
     afc:	87 e8       	ldi	r24, 0x87	; 135
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	90 db       	rcall	.-2272   	; 0x222 <lcd_set_str>
				// end of clear value
				
				// display in LCD
				lcd_locate((uint8_t)((8*index)/16),9*(index%2)+2);
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	a0 96       	adiw	r28, 0x20	; 32
     b06:	6f ad       	sts	0x6f, r22
     b08:	a0 97       	sbiw	r28, 0x20	; 32
     b0a:	7e db       	rcall	.-2308   	; 0x208 <lcd_locate>
				for (n=0;n<Nspace[id];n++){
     b0c:	ff 24       	eor	r15, r15
     b0e:	00 e1       	ldi	r16, 0x10	; 16
     b10:	10 e0       	ldi	r17, 0x00	; 0
     b12:	0c 0f       	add	r16, r28
     b14:	1d 1f       	adc	r17, r29
     b16:	a3 96       	adiw	r28, 0x23	; 35
     b18:	ee ad       	sts	0x6e, r30
     b1a:	ff ad       	sts	0x6f, r31
     b1c:	a3 97       	sbiw	r28, 0x23	; 35
     b1e:	0e 0f       	add	r16, r30
     b20:	1f 1f       	adc	r17, r31
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <main+0x5be>
					lcd_set_char(' ');
     b24:	80 e2       	ldi	r24, 0x20	; 32
     b26:	60 db       	rcall	.-2368   	; 0x1e8 <lcd_set_char>
				lcd_set_str("     ");
				// end of clear value
				
				// display in LCD
				lcd_locate((uint8_t)((8*index)/16),9*(index%2)+2);
				for (n=0;n<Nspace[id];n++){
     b28:	f3 94       	inc	r15
     b2a:	d8 01       	movw	r26, r16
     b2c:	8c 91       	ld	r24, X
     b2e:	f8 16       	cp	r15, r24
     b30:	c8 f3       	brcs	.-14     	; 0xb24 <main+0x5b8>
					lcd_set_char(' ');
				}
				if( !value_sign )	lcd_set_char(' ');
     b32:	ac 96       	adiw	r28, 0x2c	; 44
     b34:	bf ad       	sts	0x6f, r27
     b36:	ac 97       	sbiw	r28, 0x2c	; 44
     b38:	bb 23       	and	r27, r27
     b3a:	11 f4       	brne	.+4      	; 0xb40 <main+0x5d4>
     b3c:	80 e2       	ldi	r24, 0x20	; 32
     b3e:	01 c0       	rjmp	.+2      	; 0xb42 <main+0x5d6>
				else				lcd_set_char('-');
     b40:	8d e2       	ldi	r24, 0x2D	; 45
     b42:	52 db       	rcall	.-2396   	; 0x1e8 <lcd_set_char>
					if( n == Nint[id] ) lcd_set_char('.');
					if( !digits_valid && (digits_char[n]==0x30) && ( n+1 < Nint[id])){
						lcd_set_char(' ');
					}else{
						lcd_set_char(digits_char[n]);
						digits_valid = 1;
     b44:	dd 24       	eor	r13, r13
     b46:	10 e0       	ldi	r17, 0x00	; 0
				}
				if( !value_sign )	lcd_set_char(' ');
				else				lcd_set_char('-');
				digits_valid = 0;
				for (n=0;n<=Nsig[id]-1;n++) {
					if( n == Nint[id] ) lcd_set_char('.');
     b48:	47 e1       	ldi	r20, 0x17	; 23
     b4a:	a4 2e       	mov	r10, r20
     b4c:	b1 2c       	mov	r11, r1
     b4e:	ac 0e       	add	r10, r28
     b50:	bd 1e       	adc	r11, r29
     b52:	a3 96       	adiw	r28, 0x23	; 35
     b54:	ee ad       	sts	0x6e, r30
     b56:	ff ad       	sts	0x6f, r31
     b58:	a3 97       	sbiw	r28, 0x23	; 35
     b5a:	ae 0e       	add	r10, r30
     b5c:	bf 1e       	adc	r11, r31
     b5e:	27 c0       	rjmp	.+78     	; 0xbae <main+0x642>
     b60:	d5 01       	movw	r26, r10
     b62:	0c 91       	ld	r16, X
     b64:	10 17       	cp	r17, r16
     b66:	11 f4       	brne	.+4      	; 0xb6c <main+0x600>
     b68:	8e e2       	ldi	r24, 0x2E	; 46
     b6a:	3e db       	rcall	.-2436   	; 0x1e8 <lcd_set_char>
					if( !digits_valid && (digits_char[n]==0x30) && ( n+1 < Nint[id])){
     b6c:	dd 20       	and	r13, r13
     b6e:	a1 f4       	brne	.+40     	; 0xb98 <main+0x62c>
     b70:	e5 e0       	ldi	r30, 0x05	; 5
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	ec 0f       	add	r30, r28
     b76:	fd 1f       	adc	r31, r29
     b78:	ee 0d       	add	r30, r14
     b7a:	ff 1d       	adc	r31, r15
     b7c:	80 81       	ld	r24, Z
     b7e:	80 33       	cpi	r24, 0x30	; 48
     b80:	59 f4       	brne	.+22     	; 0xb98 <main+0x62c>
     b82:	97 01       	movw	r18, r14
     b84:	2f 5f       	subi	r18, 0xFF	; 255
     b86:	3f 4f       	sbci	r19, 0xFF	; 255
     b88:	80 2f       	mov	r24, r16
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	28 17       	cp	r18, r24
     b8e:	39 07       	cpc	r19, r25
     b90:	1c f4       	brge	.+6      	; 0xb98 <main+0x62c>
						lcd_set_char(' ');
     b92:	80 e2       	ldi	r24, 0x20	; 32
     b94:	29 db       	rcall	.-2478   	; 0x1e8 <lcd_set_char>
     b96:	0a c0       	rjmp	.+20     	; 0xbac <main+0x640>
					}else{
						lcd_set_char(digits_char[n]);
     b98:	e5 e0       	ldi	r30, 0x05	; 5
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	ec 0f       	add	r30, r28
     b9e:	fd 1f       	adc	r31, r29
     ba0:	ee 0d       	add	r30, r14
     ba2:	ff 1d       	adc	r31, r15
     ba4:	80 81       	ld	r24, Z
     ba6:	20 db       	rcall	.-2496   	; 0x1e8 <lcd_set_char>
						digits_valid = 1;
     ba8:	dd 24       	eor	r13, r13
     baa:	d3 94       	inc	r13
					lcd_set_char(' ');
				}
				if( !value_sign )	lcd_set_char(' ');
				else				lcd_set_char('-');
				digits_valid = 0;
				for (n=0;n<=Nsig[id]-1;n++) {
     bac:	1f 5f       	subi	r17, 0xFF	; 255
     bae:	e1 2e       	mov	r14, r17
     bb0:	ff 24       	eor	r15, r15
     bb2:	a5 96       	adiw	r28, 0x25	; 37
     bb4:	ee ad       	sts	0x6e, r30
     bb6:	ff ad       	sts	0x6f, r31
     bb8:	a5 97       	sbiw	r28, 0x25	; 37
     bba:	ee 16       	cp	r14, r30
     bbc:	ff 06       	cpc	r15, r31
     bbe:	84 f2       	brlt	.-96     	; 0xb60 <main+0x5f4>
     bc0:	8f e1       	ldi	r24, 0x1F	; 31
     bc2:	9e e4       	ldi	r25, 0x4E	; 78
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	f1 f7       	brne	.-4      	; 0xbc4 <main+0x658>
     bc8:	00 c0       	rjmp	.+0      	; 0xbca <main+0x65e>
     bca:	00 00       	nop
     bcc:	a9 96       	adiw	r28, 0x29	; 41
     bce:	ae ad       	sts	0x6e, r26
     bd0:	bf ad       	sts	0x6f, r27
     bd2:	a9 97       	sbiw	r28, 0x29	; 41
     bd4:	11 96       	adiw	r26, 0x01	; 1
     bd6:	a9 96       	adiw	r28, 0x29	; 41
     bd8:	bf af       	sts	0x7f, r27
     bda:	ae af       	sts	0x7e, r26
     bdc:	a9 97       	sbiw	r28, 0x29	; 41
     bde:	a0 96       	adiw	r28, 0x20	; 32
     be0:	bf ad       	sts	0x6f, r27
     be2:	a0 97       	sbiw	r28, 0x20	; 32
     be4:	b7 5f       	subi	r27, 0xF7	; 247
     be6:	a0 96       	adiw	r28, 0x20	; 32
     be8:	bf af       	sts	0x7f, r27
     bea:	a0 97       	sbiw	r28, 0x20	; 32
     bec:	ab 96       	adiw	r28, 0x2b	; 43
     bee:	ee ad       	sts	0x6e, r30
     bf0:	ff ad       	sts	0x6f, r31
     bf2:	ab 97       	sbiw	r28, 0x2b	; 43
     bf4:	34 96       	adiw	r30, 0x04	; 4
     bf6:	ab 96       	adiw	r28, 0x2b	; 43
     bf8:	ff af       	sts	0x7f, r31
     bfa:	ee af       	sts	0x7e, r30
     bfc:	ab 97       	sbiw	r28, 0x2b	; 43
			DisplayItemInfo();
            lcd_locate((chg_index&0x03)>>1,8-(1-chg_index%2));
			lcd_update = 0;
		}

		for ( index = 0; index < Ndata; index++ ){
     bfe:	b4 31       	cpi	r27, 0x14	; 20
     c00:	09 f0       	breq	.+2      	; 0xc04 <main+0x698>
     c02:	38 ce       	rjmp	.-912    	; 0x874 <main+0x308>
                lcd_set_str("  --- ");
            }
            
		}
        // Display measure interval frequency.
        lcd_locate(1,0);
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	ff da       	rcall	.-2562   	; 0x208 <lcd_locate>
        lcd_set_numeric((unsigned int)cnt,6);
     c0a:	80 91 e1 01 	lds	r24, 0x01E1
     c0e:	90 91 e2 01 	lds	r25, 0x01E2
     c12:	66 e0       	ldi	r22, 0x06	; 6
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	10 db       	rcall	.-2528   	; 0x238 <lcd_set_numeric>
        lcd_locate(1,8);
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	68 e0       	ldi	r22, 0x08	; 8
     c1c:	f5 da       	rcall	.-2582   	; 0x208 <lcd_locate>
        lcd_set_numeric((unsigned int)freq,6);
     c1e:	60 91 db 01 	lds	r22, 0x01DB
     c22:	70 91 dc 01 	lds	r23, 0x01DC
     c26:	80 91 dd 01 	lds	r24, 0x01DD
     c2a:	90 91 de 01 	lds	r25, 0x01DE
     c2e:	e0 d0       	rcall	.+448    	; 0xdf0 <__fixunssfsi>
     c30:	dc 01       	movw	r26, r24
     c32:	cb 01       	movw	r24, r22
     c34:	66 e0       	ldi	r22, 0x06	; 6
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	ff da       	rcall	.-2562   	; 0x238 <lcd_set_numeric>
        //

	}
     c3a:	ed cd       	rjmp	.-1062   	; 0x816 <main+0x2aa>
				// end of
				
				_delay_ms((unsigned int)(WAIT));
                
			}else if( valid_packet == 0 ){
                lcd_locate((unsigned int)((8*index)/16),9*(index%2)+2);
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	a0 96       	adiw	r28, 0x20	; 32
     c40:	6f ad       	sts	0x6f, r22
     c42:	a0 97       	sbiw	r28, 0x20	; 32
     c44:	e1 da       	rcall	.-2622   	; 0x208 <lcd_locate>
                lcd_set_str("  --- ");
     c46:	8d e8       	ldi	r24, 0x8D	; 141
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	eb da       	rcall	.-2602   	; 0x222 <lcd_set_str>
     c4c:	bf cf       	rjmp	.-130    	; 0xbcc <main+0x660>

00000c4e <__subsf3>:
     c4e:	50 58       	subi	r21, 0x80	; 128

00000c50 <__addsf3>:
     c50:	bb 27       	eor	r27, r27
     c52:	aa 27       	eor	r26, r26
     c54:	0e d0       	rcall	.+28     	; 0xc72 <__addsf3x>
     c56:	70 c1       	rjmp	.+736    	; 0xf38 <__fp_round>
     c58:	61 d1       	rcall	.+706    	; 0xf1c <__fp_pscA>
     c5a:	30 f0       	brcs	.+12     	; 0xc68 <__addsf3+0x18>
     c5c:	66 d1       	rcall	.+716    	; 0xf2a <__fp_pscB>
     c5e:	20 f0       	brcs	.+8      	; 0xc68 <__addsf3+0x18>
     c60:	31 f4       	brne	.+12     	; 0xc6e <__addsf3+0x1e>
     c62:	9f 3f       	cpi	r25, 0xFF	; 255
     c64:	11 f4       	brne	.+4      	; 0xc6a <__addsf3+0x1a>
     c66:	1e f4       	brtc	.+6      	; 0xc6e <__addsf3+0x1e>
     c68:	56 c1       	rjmp	.+684    	; 0xf16 <__fp_nan>
     c6a:	0e f4       	brtc	.+2      	; 0xc6e <__addsf3+0x1e>
     c6c:	e0 95       	com	r30
     c6e:	e7 fb       	bst	r30, 7
     c70:	4c c1       	rjmp	.+664    	; 0xf0a <__fp_inf>

00000c72 <__addsf3x>:
     c72:	e9 2f       	mov	r30, r25
     c74:	72 d1       	rcall	.+740    	; 0xf5a <__fp_split3>
     c76:	80 f3       	brcs	.-32     	; 0xc58 <__addsf3+0x8>
     c78:	ba 17       	cp	r27, r26
     c7a:	62 07       	cpc	r22, r18
     c7c:	73 07       	cpc	r23, r19
     c7e:	84 07       	cpc	r24, r20
     c80:	95 07       	cpc	r25, r21
     c82:	18 f0       	brcs	.+6      	; 0xc8a <__addsf3x+0x18>
     c84:	71 f4       	brne	.+28     	; 0xca2 <__addsf3x+0x30>
     c86:	9e f5       	brtc	.+102    	; 0xcee <__addsf3x+0x7c>
     c88:	8a c1       	rjmp	.+788    	; 0xf9e <__fp_zero>
     c8a:	0e f4       	brtc	.+2      	; 0xc8e <__addsf3x+0x1c>
     c8c:	e0 95       	com	r30
     c8e:	0b 2e       	mov	r0, r27
     c90:	ba 2f       	mov	r27, r26
     c92:	a0 2d       	mov	r26, r0
     c94:	0b 01       	movw	r0, r22
     c96:	b9 01       	movw	r22, r18
     c98:	90 01       	movw	r18, r0
     c9a:	0c 01       	movw	r0, r24
     c9c:	ca 01       	movw	r24, r20
     c9e:	a0 01       	movw	r20, r0
     ca0:	11 24       	eor	r1, r1
     ca2:	ff 27       	eor	r31, r31
     ca4:	59 1b       	sub	r21, r25
     ca6:	99 f0       	breq	.+38     	; 0xcce <__addsf3x+0x5c>
     ca8:	59 3f       	cpi	r21, 0xF9	; 249
     caa:	50 f4       	brcc	.+20     	; 0xcc0 <__addsf3x+0x4e>
     cac:	50 3e       	cpi	r21, 0xE0	; 224
     cae:	68 f1       	brcs	.+90     	; 0xd0a <__addsf3x+0x98>
     cb0:	1a 16       	cp	r1, r26
     cb2:	f0 40       	sbci	r31, 0x00	; 0
     cb4:	a2 2f       	mov	r26, r18
     cb6:	23 2f       	mov	r18, r19
     cb8:	34 2f       	mov	r19, r20
     cba:	44 27       	eor	r20, r20
     cbc:	58 5f       	subi	r21, 0xF8	; 248
     cbe:	f3 cf       	rjmp	.-26     	; 0xca6 <__addsf3x+0x34>
     cc0:	46 95       	lsr	r20
     cc2:	37 95       	ror	r19
     cc4:	27 95       	ror	r18
     cc6:	a7 95       	ror	r26
     cc8:	f0 40       	sbci	r31, 0x00	; 0
     cca:	53 95       	inc	r21
     ccc:	c9 f7       	brne	.-14     	; 0xcc0 <__addsf3x+0x4e>
     cce:	7e f4       	brtc	.+30     	; 0xcee <__addsf3x+0x7c>
     cd0:	1f 16       	cp	r1, r31
     cd2:	ba 0b       	sbc	r27, r26
     cd4:	62 0b       	sbc	r22, r18
     cd6:	73 0b       	sbc	r23, r19
     cd8:	84 0b       	sbc	r24, r20
     cda:	ba f0       	brmi	.+46     	; 0xd0a <__addsf3x+0x98>
     cdc:	91 50       	subi	r25, 0x01	; 1
     cde:	a1 f0       	breq	.+40     	; 0xd08 <__addsf3x+0x96>
     ce0:	ff 0f       	add	r31, r31
     ce2:	bb 1f       	adc	r27, r27
     ce4:	66 1f       	adc	r22, r22
     ce6:	77 1f       	adc	r23, r23
     ce8:	88 1f       	adc	r24, r24
     cea:	c2 f7       	brpl	.-16     	; 0xcdc <__addsf3x+0x6a>
     cec:	0e c0       	rjmp	.+28     	; 0xd0a <__addsf3x+0x98>
     cee:	ba 0f       	add	r27, r26
     cf0:	62 1f       	adc	r22, r18
     cf2:	73 1f       	adc	r23, r19
     cf4:	84 1f       	adc	r24, r20
     cf6:	48 f4       	brcc	.+18     	; 0xd0a <__addsf3x+0x98>
     cf8:	87 95       	ror	r24
     cfa:	77 95       	ror	r23
     cfc:	67 95       	ror	r22
     cfe:	b7 95       	ror	r27
     d00:	f7 95       	ror	r31
     d02:	9e 3f       	cpi	r25, 0xFE	; 254
     d04:	08 f0       	brcs	.+2      	; 0xd08 <__addsf3x+0x96>
     d06:	b3 cf       	rjmp	.-154    	; 0xc6e <__addsf3+0x1e>
     d08:	93 95       	inc	r25
     d0a:	88 0f       	add	r24, r24
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <__addsf3x+0x9e>
     d0e:	99 27       	eor	r25, r25
     d10:	ee 0f       	add	r30, r30
     d12:	97 95       	ror	r25
     d14:	87 95       	ror	r24
     d16:	08 95       	ret

00000d18 <__cmpsf2>:
     d18:	d4 d0       	rcall	.+424    	; 0xec2 <__fp_cmp>
     d1a:	08 f4       	brcc	.+2      	; 0xd1e <__cmpsf2+0x6>
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	08 95       	ret

00000d20 <__divsf3>:
     d20:	0c d0       	rcall	.+24     	; 0xd3a <__divsf3x>
     d22:	0a c1       	rjmp	.+532    	; 0xf38 <__fp_round>
     d24:	02 d1       	rcall	.+516    	; 0xf2a <__fp_pscB>
     d26:	40 f0       	brcs	.+16     	; 0xd38 <__divsf3+0x18>
     d28:	f9 d0       	rcall	.+498    	; 0xf1c <__fp_pscA>
     d2a:	30 f0       	brcs	.+12     	; 0xd38 <__divsf3+0x18>
     d2c:	21 f4       	brne	.+8      	; 0xd36 <__divsf3+0x16>
     d2e:	5f 3f       	cpi	r21, 0xFF	; 255
     d30:	19 f0       	breq	.+6      	; 0xd38 <__divsf3+0x18>
     d32:	eb c0       	rjmp	.+470    	; 0xf0a <__fp_inf>
     d34:	51 11       	cpse	r21, r1
     d36:	34 c1       	rjmp	.+616    	; 0xfa0 <__fp_szero>
     d38:	ee c0       	rjmp	.+476    	; 0xf16 <__fp_nan>

00000d3a <__divsf3x>:
     d3a:	0f d1       	rcall	.+542    	; 0xf5a <__fp_split3>
     d3c:	98 f3       	brcs	.-26     	; 0xd24 <__divsf3+0x4>

00000d3e <__divsf3_pse>:
     d3e:	99 23       	and	r25, r25
     d40:	c9 f3       	breq	.-14     	; 0xd34 <__divsf3+0x14>
     d42:	55 23       	and	r21, r21
     d44:	b1 f3       	breq	.-20     	; 0xd32 <__divsf3+0x12>
     d46:	95 1b       	sub	r25, r21
     d48:	55 0b       	sbc	r21, r21
     d4a:	bb 27       	eor	r27, r27
     d4c:	aa 27       	eor	r26, r26
     d4e:	62 17       	cp	r22, r18
     d50:	73 07       	cpc	r23, r19
     d52:	84 07       	cpc	r24, r20
     d54:	38 f0       	brcs	.+14     	; 0xd64 <__divsf3_pse+0x26>
     d56:	9f 5f       	subi	r25, 0xFF	; 255
     d58:	5f 4f       	sbci	r21, 0xFF	; 255
     d5a:	22 0f       	add	r18, r18
     d5c:	33 1f       	adc	r19, r19
     d5e:	44 1f       	adc	r20, r20
     d60:	aa 1f       	adc	r26, r26
     d62:	a9 f3       	breq	.-22     	; 0xd4e <__divsf3_pse+0x10>
     d64:	33 d0       	rcall	.+102    	; 0xdcc <__divsf3_pse+0x8e>
     d66:	0e 2e       	mov	r0, r30
     d68:	3a f0       	brmi	.+14     	; 0xd78 <__divsf3_pse+0x3a>
     d6a:	e0 e8       	ldi	r30, 0x80	; 128
     d6c:	30 d0       	rcall	.+96     	; 0xdce <__divsf3_pse+0x90>
     d6e:	91 50       	subi	r25, 0x01	; 1
     d70:	50 40       	sbci	r21, 0x00	; 0
     d72:	e6 95       	lsr	r30
     d74:	00 1c       	adc	r0, r0
     d76:	ca f7       	brpl	.-14     	; 0xd6a <__divsf3_pse+0x2c>
     d78:	29 d0       	rcall	.+82     	; 0xdcc <__divsf3_pse+0x8e>
     d7a:	fe 2f       	mov	r31, r30
     d7c:	27 d0       	rcall	.+78     	; 0xdcc <__divsf3_pse+0x8e>
     d7e:	66 0f       	add	r22, r22
     d80:	77 1f       	adc	r23, r23
     d82:	88 1f       	adc	r24, r24
     d84:	bb 1f       	adc	r27, r27
     d86:	26 17       	cp	r18, r22
     d88:	37 07       	cpc	r19, r23
     d8a:	48 07       	cpc	r20, r24
     d8c:	ab 07       	cpc	r26, r27
     d8e:	b0 e8       	ldi	r27, 0x80	; 128
     d90:	09 f0       	breq	.+2      	; 0xd94 <__divsf3_pse+0x56>
     d92:	bb 0b       	sbc	r27, r27
     d94:	80 2d       	mov	r24, r0
     d96:	bf 01       	movw	r22, r30
     d98:	ff 27       	eor	r31, r31
     d9a:	93 58       	subi	r25, 0x83	; 131
     d9c:	5f 4f       	sbci	r21, 0xFF	; 255
     d9e:	2a f0       	brmi	.+10     	; 0xdaa <__divsf3_pse+0x6c>
     da0:	9e 3f       	cpi	r25, 0xFE	; 254
     da2:	51 05       	cpc	r21, r1
     da4:	68 f0       	brcs	.+26     	; 0xdc0 <__divsf3_pse+0x82>
     da6:	b1 c0       	rjmp	.+354    	; 0xf0a <__fp_inf>
     da8:	fb c0       	rjmp	.+502    	; 0xfa0 <__fp_szero>
     daa:	5f 3f       	cpi	r21, 0xFF	; 255
     dac:	ec f3       	brlt	.-6      	; 0xda8 <__divsf3_pse+0x6a>
     dae:	98 3e       	cpi	r25, 0xE8	; 232
     db0:	dc f3       	brlt	.-10     	; 0xda8 <__divsf3_pse+0x6a>
     db2:	86 95       	lsr	r24
     db4:	77 95       	ror	r23
     db6:	67 95       	ror	r22
     db8:	b7 95       	ror	r27
     dba:	f7 95       	ror	r31
     dbc:	9f 5f       	subi	r25, 0xFF	; 255
     dbe:	c9 f7       	brne	.-14     	; 0xdb2 <__divsf3_pse+0x74>
     dc0:	88 0f       	add	r24, r24
     dc2:	91 1d       	adc	r25, r1
     dc4:	96 95       	lsr	r25
     dc6:	87 95       	ror	r24
     dc8:	97 f9       	bld	r25, 7
     dca:	08 95       	ret
     dcc:	e1 e0       	ldi	r30, 0x01	; 1
     dce:	66 0f       	add	r22, r22
     dd0:	77 1f       	adc	r23, r23
     dd2:	88 1f       	adc	r24, r24
     dd4:	bb 1f       	adc	r27, r27
     dd6:	62 17       	cp	r22, r18
     dd8:	73 07       	cpc	r23, r19
     dda:	84 07       	cpc	r24, r20
     ddc:	ba 07       	cpc	r27, r26
     dde:	20 f0       	brcs	.+8      	; 0xde8 <__divsf3_pse+0xaa>
     de0:	62 1b       	sub	r22, r18
     de2:	73 0b       	sbc	r23, r19
     de4:	84 0b       	sbc	r24, r20
     de6:	ba 0b       	sbc	r27, r26
     de8:	ee 1f       	adc	r30, r30
     dea:	88 f7       	brcc	.-30     	; 0xdce <__divsf3_pse+0x90>
     dec:	e0 95       	com	r30
     dee:	08 95       	ret

00000df0 <__fixunssfsi>:
     df0:	bc d0       	rcall	.+376    	; 0xf6a <__fp_splitA>
     df2:	88 f0       	brcs	.+34     	; 0xe16 <__fixunssfsi+0x26>
     df4:	9f 57       	subi	r25, 0x7F	; 127
     df6:	90 f0       	brcs	.+36     	; 0xe1c <__fixunssfsi+0x2c>
     df8:	b9 2f       	mov	r27, r25
     dfa:	99 27       	eor	r25, r25
     dfc:	b7 51       	subi	r27, 0x17	; 23
     dfe:	a0 f0       	brcs	.+40     	; 0xe28 <__fixunssfsi+0x38>
     e00:	d1 f0       	breq	.+52     	; 0xe36 <__fixunssfsi+0x46>
     e02:	66 0f       	add	r22, r22
     e04:	77 1f       	adc	r23, r23
     e06:	88 1f       	adc	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	1a f0       	brmi	.+6      	; 0xe12 <__fixunssfsi+0x22>
     e0c:	ba 95       	dec	r27
     e0e:	c9 f7       	brne	.-14     	; 0xe02 <__fixunssfsi+0x12>
     e10:	12 c0       	rjmp	.+36     	; 0xe36 <__fixunssfsi+0x46>
     e12:	b1 30       	cpi	r27, 0x01	; 1
     e14:	81 f0       	breq	.+32     	; 0xe36 <__fixunssfsi+0x46>
     e16:	c3 d0       	rcall	.+390    	; 0xf9e <__fp_zero>
     e18:	b1 e0       	ldi	r27, 0x01	; 1
     e1a:	08 95       	ret
     e1c:	c0 c0       	rjmp	.+384    	; 0xf9e <__fp_zero>
     e1e:	67 2f       	mov	r22, r23
     e20:	78 2f       	mov	r23, r24
     e22:	88 27       	eor	r24, r24
     e24:	b8 5f       	subi	r27, 0xF8	; 248
     e26:	39 f0       	breq	.+14     	; 0xe36 <__fixunssfsi+0x46>
     e28:	b9 3f       	cpi	r27, 0xF9	; 249
     e2a:	cc f3       	brlt	.-14     	; 0xe1e <__fixunssfsi+0x2e>
     e2c:	86 95       	lsr	r24
     e2e:	77 95       	ror	r23
     e30:	67 95       	ror	r22
     e32:	b3 95       	inc	r27
     e34:	d9 f7       	brne	.-10     	; 0xe2c <__fixunssfsi+0x3c>
     e36:	3e f4       	brtc	.+14     	; 0xe46 <__fixunssfsi+0x56>
     e38:	90 95       	com	r25
     e3a:	80 95       	com	r24
     e3c:	70 95       	com	r23
     e3e:	61 95       	neg	r22
     e40:	7f 4f       	sbci	r23, 0xFF	; 255
     e42:	8f 4f       	sbci	r24, 0xFF	; 255
     e44:	9f 4f       	sbci	r25, 0xFF	; 255
     e46:	08 95       	ret

00000e48 <__floatunsisf>:
     e48:	e8 94       	clt
     e4a:	09 c0       	rjmp	.+18     	; 0xe5e <__floatsisf+0x12>

00000e4c <__floatsisf>:
     e4c:	97 fb       	bst	r25, 7
     e4e:	3e f4       	brtc	.+14     	; 0xe5e <__floatsisf+0x12>
     e50:	90 95       	com	r25
     e52:	80 95       	com	r24
     e54:	70 95       	com	r23
     e56:	61 95       	neg	r22
     e58:	7f 4f       	sbci	r23, 0xFF	; 255
     e5a:	8f 4f       	sbci	r24, 0xFF	; 255
     e5c:	9f 4f       	sbci	r25, 0xFF	; 255
     e5e:	99 23       	and	r25, r25
     e60:	a9 f0       	breq	.+42     	; 0xe8c <__floatsisf+0x40>
     e62:	f9 2f       	mov	r31, r25
     e64:	96 e9       	ldi	r25, 0x96	; 150
     e66:	bb 27       	eor	r27, r27
     e68:	93 95       	inc	r25
     e6a:	f6 95       	lsr	r31
     e6c:	87 95       	ror	r24
     e6e:	77 95       	ror	r23
     e70:	67 95       	ror	r22
     e72:	b7 95       	ror	r27
     e74:	f1 11       	cpse	r31, r1
     e76:	f8 cf       	rjmp	.-16     	; 0xe68 <__floatsisf+0x1c>
     e78:	fa f4       	brpl	.+62     	; 0xeb8 <__floatsisf+0x6c>
     e7a:	bb 0f       	add	r27, r27
     e7c:	11 f4       	brne	.+4      	; 0xe82 <__floatsisf+0x36>
     e7e:	60 ff       	sbrs	r22, 0
     e80:	1b c0       	rjmp	.+54     	; 0xeb8 <__floatsisf+0x6c>
     e82:	6f 5f       	subi	r22, 0xFF	; 255
     e84:	7f 4f       	sbci	r23, 0xFF	; 255
     e86:	8f 4f       	sbci	r24, 0xFF	; 255
     e88:	9f 4f       	sbci	r25, 0xFF	; 255
     e8a:	16 c0       	rjmp	.+44     	; 0xeb8 <__floatsisf+0x6c>
     e8c:	88 23       	and	r24, r24
     e8e:	11 f0       	breq	.+4      	; 0xe94 <__floatsisf+0x48>
     e90:	96 e9       	ldi	r25, 0x96	; 150
     e92:	11 c0       	rjmp	.+34     	; 0xeb6 <__floatsisf+0x6a>
     e94:	77 23       	and	r23, r23
     e96:	21 f0       	breq	.+8      	; 0xea0 <__floatsisf+0x54>
     e98:	9e e8       	ldi	r25, 0x8E	; 142
     e9a:	87 2f       	mov	r24, r23
     e9c:	76 2f       	mov	r23, r22
     e9e:	05 c0       	rjmp	.+10     	; 0xeaa <__floatsisf+0x5e>
     ea0:	66 23       	and	r22, r22
     ea2:	71 f0       	breq	.+28     	; 0xec0 <__floatsisf+0x74>
     ea4:	96 e8       	ldi	r25, 0x86	; 134
     ea6:	86 2f       	mov	r24, r22
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	2a f0       	brmi	.+10     	; 0xeb8 <__floatsisf+0x6c>
     eae:	9a 95       	dec	r25
     eb0:	66 0f       	add	r22, r22
     eb2:	77 1f       	adc	r23, r23
     eb4:	88 1f       	adc	r24, r24
     eb6:	da f7       	brpl	.-10     	; 0xeae <__floatsisf+0x62>
     eb8:	88 0f       	add	r24, r24
     eba:	96 95       	lsr	r25
     ebc:	87 95       	ror	r24
     ebe:	97 f9       	bld	r25, 7
     ec0:	08 95       	ret

00000ec2 <__fp_cmp>:
     ec2:	99 0f       	add	r25, r25
     ec4:	00 08       	sbc	r0, r0
     ec6:	55 0f       	add	r21, r21
     ec8:	aa 0b       	sbc	r26, r26
     eca:	e0 e8       	ldi	r30, 0x80	; 128
     ecc:	fe ef       	ldi	r31, 0xFE	; 254
     ece:	16 16       	cp	r1, r22
     ed0:	17 06       	cpc	r1, r23
     ed2:	e8 07       	cpc	r30, r24
     ed4:	f9 07       	cpc	r31, r25
     ed6:	c0 f0       	brcs	.+48     	; 0xf08 <__fp_cmp+0x46>
     ed8:	12 16       	cp	r1, r18
     eda:	13 06       	cpc	r1, r19
     edc:	e4 07       	cpc	r30, r20
     ede:	f5 07       	cpc	r31, r21
     ee0:	98 f0       	brcs	.+38     	; 0xf08 <__fp_cmp+0x46>
     ee2:	62 1b       	sub	r22, r18
     ee4:	73 0b       	sbc	r23, r19
     ee6:	84 0b       	sbc	r24, r20
     ee8:	95 0b       	sbc	r25, r21
     eea:	39 f4       	brne	.+14     	; 0xefa <__fp_cmp+0x38>
     eec:	0a 26       	eor	r0, r26
     eee:	61 f0       	breq	.+24     	; 0xf08 <__fp_cmp+0x46>
     ef0:	23 2b       	or	r18, r19
     ef2:	24 2b       	or	r18, r20
     ef4:	25 2b       	or	r18, r21
     ef6:	21 f4       	brne	.+8      	; 0xf00 <__fp_cmp+0x3e>
     ef8:	08 95       	ret
     efa:	0a 26       	eor	r0, r26
     efc:	09 f4       	brne	.+2      	; 0xf00 <__fp_cmp+0x3e>
     efe:	a1 40       	sbci	r26, 0x01	; 1
     f00:	a6 95       	lsr	r26
     f02:	8f ef       	ldi	r24, 0xFF	; 255
     f04:	81 1d       	adc	r24, r1
     f06:	81 1d       	adc	r24, r1
     f08:	08 95       	ret

00000f0a <__fp_inf>:
     f0a:	97 f9       	bld	r25, 7
     f0c:	9f 67       	ori	r25, 0x7F	; 127
     f0e:	80 e8       	ldi	r24, 0x80	; 128
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	08 95       	ret

00000f16 <__fp_nan>:
     f16:	9f ef       	ldi	r25, 0xFF	; 255
     f18:	80 ec       	ldi	r24, 0xC0	; 192
     f1a:	08 95       	ret

00000f1c <__fp_pscA>:
     f1c:	00 24       	eor	r0, r0
     f1e:	0a 94       	dec	r0
     f20:	16 16       	cp	r1, r22
     f22:	17 06       	cpc	r1, r23
     f24:	18 06       	cpc	r1, r24
     f26:	09 06       	cpc	r0, r25
     f28:	08 95       	ret

00000f2a <__fp_pscB>:
     f2a:	00 24       	eor	r0, r0
     f2c:	0a 94       	dec	r0
     f2e:	12 16       	cp	r1, r18
     f30:	13 06       	cpc	r1, r19
     f32:	14 06       	cpc	r1, r20
     f34:	05 06       	cpc	r0, r21
     f36:	08 95       	ret

00000f38 <__fp_round>:
     f38:	09 2e       	mov	r0, r25
     f3a:	03 94       	inc	r0
     f3c:	00 0c       	add	r0, r0
     f3e:	11 f4       	brne	.+4      	; 0xf44 <__fp_round+0xc>
     f40:	88 23       	and	r24, r24
     f42:	52 f0       	brmi	.+20     	; 0xf58 <__fp_round+0x20>
     f44:	bb 0f       	add	r27, r27
     f46:	40 f4       	brcc	.+16     	; 0xf58 <__fp_round+0x20>
     f48:	bf 2b       	or	r27, r31
     f4a:	11 f4       	brne	.+4      	; 0xf50 <__fp_round+0x18>
     f4c:	60 ff       	sbrs	r22, 0
     f4e:	04 c0       	rjmp	.+8      	; 0xf58 <__fp_round+0x20>
     f50:	6f 5f       	subi	r22, 0xFF	; 255
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	8f 4f       	sbci	r24, 0xFF	; 255
     f56:	9f 4f       	sbci	r25, 0xFF	; 255
     f58:	08 95       	ret

00000f5a <__fp_split3>:
     f5a:	57 fd       	sbrc	r21, 7
     f5c:	90 58       	subi	r25, 0x80	; 128
     f5e:	44 0f       	add	r20, r20
     f60:	55 1f       	adc	r21, r21
     f62:	59 f0       	breq	.+22     	; 0xf7a <__fp_splitA+0x10>
     f64:	5f 3f       	cpi	r21, 0xFF	; 255
     f66:	71 f0       	breq	.+28     	; 0xf84 <__fp_splitA+0x1a>
     f68:	47 95       	ror	r20

00000f6a <__fp_splitA>:
     f6a:	88 0f       	add	r24, r24
     f6c:	97 fb       	bst	r25, 7
     f6e:	99 1f       	adc	r25, r25
     f70:	61 f0       	breq	.+24     	; 0xf8a <__fp_splitA+0x20>
     f72:	9f 3f       	cpi	r25, 0xFF	; 255
     f74:	79 f0       	breq	.+30     	; 0xf94 <__fp_splitA+0x2a>
     f76:	87 95       	ror	r24
     f78:	08 95       	ret
     f7a:	12 16       	cp	r1, r18
     f7c:	13 06       	cpc	r1, r19
     f7e:	14 06       	cpc	r1, r20
     f80:	55 1f       	adc	r21, r21
     f82:	f2 cf       	rjmp	.-28     	; 0xf68 <__fp_split3+0xe>
     f84:	46 95       	lsr	r20
     f86:	f1 df       	rcall	.-30     	; 0xf6a <__fp_splitA>
     f88:	08 c0       	rjmp	.+16     	; 0xf9a <__fp_splitA+0x30>
     f8a:	16 16       	cp	r1, r22
     f8c:	17 06       	cpc	r1, r23
     f8e:	18 06       	cpc	r1, r24
     f90:	99 1f       	adc	r25, r25
     f92:	f1 cf       	rjmp	.-30     	; 0xf76 <__fp_splitA+0xc>
     f94:	86 95       	lsr	r24
     f96:	71 05       	cpc	r23, r1
     f98:	61 05       	cpc	r22, r1
     f9a:	08 94       	sec
     f9c:	08 95       	ret

00000f9e <__fp_zero>:
     f9e:	e8 94       	clt

00000fa0 <__fp_szero>:
     fa0:	bb 27       	eor	r27, r27
     fa2:	66 27       	eor	r22, r22
     fa4:	77 27       	eor	r23, r23
     fa6:	cb 01       	movw	r24, r22
     fa8:	97 f9       	bld	r25, 7
     faa:	08 95       	ret

00000fac <__mulsf3>:
     fac:	0b d0       	rcall	.+22     	; 0xfc4 <__mulsf3x>
     fae:	c4 cf       	rjmp	.-120    	; 0xf38 <__fp_round>
     fb0:	b5 df       	rcall	.-150    	; 0xf1c <__fp_pscA>
     fb2:	28 f0       	brcs	.+10     	; 0xfbe <__mulsf3+0x12>
     fb4:	ba df       	rcall	.-140    	; 0xf2a <__fp_pscB>
     fb6:	18 f0       	brcs	.+6      	; 0xfbe <__mulsf3+0x12>
     fb8:	95 23       	and	r25, r21
     fba:	09 f0       	breq	.+2      	; 0xfbe <__mulsf3+0x12>
     fbc:	a6 cf       	rjmp	.-180    	; 0xf0a <__fp_inf>
     fbe:	ab cf       	rjmp	.-170    	; 0xf16 <__fp_nan>
     fc0:	11 24       	eor	r1, r1
     fc2:	ee cf       	rjmp	.-36     	; 0xfa0 <__fp_szero>

00000fc4 <__mulsf3x>:
     fc4:	ca df       	rcall	.-108    	; 0xf5a <__fp_split3>
     fc6:	a0 f3       	brcs	.-24     	; 0xfb0 <__mulsf3+0x4>

00000fc8 <__mulsf3_pse>:
     fc8:	95 9f       	mul	r25, r21
     fca:	d1 f3       	breq	.-12     	; 0xfc0 <__mulsf3+0x14>
     fcc:	95 0f       	add	r25, r21
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	55 1f       	adc	r21, r21
     fd2:	62 9f       	mul	r22, r18
     fd4:	f0 01       	movw	r30, r0
     fd6:	72 9f       	mul	r23, r18
     fd8:	bb 27       	eor	r27, r27
     fda:	f0 0d       	add	r31, r0
     fdc:	b1 1d       	adc	r27, r1
     fde:	63 9f       	mul	r22, r19
     fe0:	aa 27       	eor	r26, r26
     fe2:	f0 0d       	add	r31, r0
     fe4:	b1 1d       	adc	r27, r1
     fe6:	aa 1f       	adc	r26, r26
     fe8:	64 9f       	mul	r22, r20
     fea:	66 27       	eor	r22, r22
     fec:	b0 0d       	add	r27, r0
     fee:	a1 1d       	adc	r26, r1
     ff0:	66 1f       	adc	r22, r22
     ff2:	82 9f       	mul	r24, r18
     ff4:	22 27       	eor	r18, r18
     ff6:	b0 0d       	add	r27, r0
     ff8:	a1 1d       	adc	r26, r1
     ffa:	62 1f       	adc	r22, r18
     ffc:	73 9f       	mul	r23, r19
     ffe:	b0 0d       	add	r27, r0
    1000:	a1 1d       	adc	r26, r1
    1002:	62 1f       	adc	r22, r18
    1004:	83 9f       	mul	r24, r19
    1006:	a0 0d       	add	r26, r0
    1008:	61 1d       	adc	r22, r1
    100a:	22 1f       	adc	r18, r18
    100c:	74 9f       	mul	r23, r20
    100e:	33 27       	eor	r19, r19
    1010:	a0 0d       	add	r26, r0
    1012:	61 1d       	adc	r22, r1
    1014:	23 1f       	adc	r18, r19
    1016:	84 9f       	mul	r24, r20
    1018:	60 0d       	add	r22, r0
    101a:	21 1d       	adc	r18, r1
    101c:	82 2f       	mov	r24, r18
    101e:	76 2f       	mov	r23, r22
    1020:	6a 2f       	mov	r22, r26
    1022:	11 24       	eor	r1, r1
    1024:	9f 57       	subi	r25, 0x7F	; 127
    1026:	50 40       	sbci	r21, 0x00	; 0
    1028:	8a f0       	brmi	.+34     	; 0x104c <__mulsf3_pse+0x84>
    102a:	e1 f0       	breq	.+56     	; 0x1064 <__mulsf3_pse+0x9c>
    102c:	88 23       	and	r24, r24
    102e:	4a f0       	brmi	.+18     	; 0x1042 <__mulsf3_pse+0x7a>
    1030:	ee 0f       	add	r30, r30
    1032:	ff 1f       	adc	r31, r31
    1034:	bb 1f       	adc	r27, r27
    1036:	66 1f       	adc	r22, r22
    1038:	77 1f       	adc	r23, r23
    103a:	88 1f       	adc	r24, r24
    103c:	91 50       	subi	r25, 0x01	; 1
    103e:	50 40       	sbci	r21, 0x00	; 0
    1040:	a9 f7       	brne	.-22     	; 0x102c <__mulsf3_pse+0x64>
    1042:	9e 3f       	cpi	r25, 0xFE	; 254
    1044:	51 05       	cpc	r21, r1
    1046:	70 f0       	brcs	.+28     	; 0x1064 <__mulsf3_pse+0x9c>
    1048:	60 cf       	rjmp	.-320    	; 0xf0a <__fp_inf>
    104a:	aa cf       	rjmp	.-172    	; 0xfa0 <__fp_szero>
    104c:	5f 3f       	cpi	r21, 0xFF	; 255
    104e:	ec f3       	brlt	.-6      	; 0x104a <__mulsf3_pse+0x82>
    1050:	98 3e       	cpi	r25, 0xE8	; 232
    1052:	dc f3       	brlt	.-10     	; 0x104a <__mulsf3_pse+0x82>
    1054:	86 95       	lsr	r24
    1056:	77 95       	ror	r23
    1058:	67 95       	ror	r22
    105a:	b7 95       	ror	r27
    105c:	f7 95       	ror	r31
    105e:	e7 95       	ror	r30
    1060:	9f 5f       	subi	r25, 0xFF	; 255
    1062:	c1 f7       	brne	.-16     	; 0x1054 <__mulsf3_pse+0x8c>
    1064:	fe 2b       	or	r31, r30
    1066:	88 0f       	add	r24, r24
    1068:	91 1d       	adc	r25, r1
    106a:	96 95       	lsr	r25
    106c:	87 95       	ror	r24
    106e:	97 f9       	bld	r25, 7
    1070:	08 95       	ret

00001072 <__mulsi3>:
    1072:	62 9f       	mul	r22, r18
    1074:	d0 01       	movw	r26, r0
    1076:	73 9f       	mul	r23, r19
    1078:	f0 01       	movw	r30, r0
    107a:	82 9f       	mul	r24, r18
    107c:	e0 0d       	add	r30, r0
    107e:	f1 1d       	adc	r31, r1
    1080:	64 9f       	mul	r22, r20
    1082:	e0 0d       	add	r30, r0
    1084:	f1 1d       	adc	r31, r1
    1086:	92 9f       	mul	r25, r18
    1088:	f0 0d       	add	r31, r0
    108a:	83 9f       	mul	r24, r19
    108c:	f0 0d       	add	r31, r0
    108e:	74 9f       	mul	r23, r20
    1090:	f0 0d       	add	r31, r0
    1092:	65 9f       	mul	r22, r21
    1094:	f0 0d       	add	r31, r0
    1096:	99 27       	eor	r25, r25
    1098:	72 9f       	mul	r23, r18
    109a:	b0 0d       	add	r27, r0
    109c:	e1 1d       	adc	r30, r1
    109e:	f9 1f       	adc	r31, r25
    10a0:	63 9f       	mul	r22, r19
    10a2:	b0 0d       	add	r27, r0
    10a4:	e1 1d       	adc	r30, r1
    10a6:	f9 1f       	adc	r31, r25
    10a8:	bd 01       	movw	r22, r26
    10aa:	cf 01       	movw	r24, r30
    10ac:	11 24       	eor	r1, r1
    10ae:	08 95       	ret

000010b0 <__udivmodsi4>:
    10b0:	a1 e2       	ldi	r26, 0x21	; 33
    10b2:	1a 2e       	mov	r1, r26
    10b4:	aa 1b       	sub	r26, r26
    10b6:	bb 1b       	sub	r27, r27
    10b8:	fd 01       	movw	r30, r26
    10ba:	0d c0       	rjmp	.+26     	; 0x10d6 <__udivmodsi4_ep>

000010bc <__udivmodsi4_loop>:
    10bc:	aa 1f       	adc	r26, r26
    10be:	bb 1f       	adc	r27, r27
    10c0:	ee 1f       	adc	r30, r30
    10c2:	ff 1f       	adc	r31, r31
    10c4:	a2 17       	cp	r26, r18
    10c6:	b3 07       	cpc	r27, r19
    10c8:	e4 07       	cpc	r30, r20
    10ca:	f5 07       	cpc	r31, r21
    10cc:	20 f0       	brcs	.+8      	; 0x10d6 <__udivmodsi4_ep>
    10ce:	a2 1b       	sub	r26, r18
    10d0:	b3 0b       	sbc	r27, r19
    10d2:	e4 0b       	sbc	r30, r20
    10d4:	f5 0b       	sbc	r31, r21

000010d6 <__udivmodsi4_ep>:
    10d6:	66 1f       	adc	r22, r22
    10d8:	77 1f       	adc	r23, r23
    10da:	88 1f       	adc	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	1a 94       	dec	r1
    10e0:	69 f7       	brne	.-38     	; 0x10bc <__udivmodsi4_loop>
    10e2:	60 95       	com	r22
    10e4:	70 95       	com	r23
    10e6:	80 95       	com	r24
    10e8:	90 95       	com	r25
    10ea:	9b 01       	movw	r18, r22
    10ec:	ac 01       	movw	r20, r24
    10ee:	bd 01       	movw	r22, r26
    10f0:	cf 01       	movw	r24, r30
    10f2:	08 95       	ret

000010f4 <_exit>:
    10f4:	f8 94       	cli

000010f6 <__stop_program>:
    10f6:	ff cf       	rjmp	.-2      	; 0x10f6 <__stop_program>
