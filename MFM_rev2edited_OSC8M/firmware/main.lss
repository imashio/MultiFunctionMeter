
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ee  00800100  00001320  000013b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001320  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a2  008001ee  008001ee  000014a2  2**0
                  ALLOC
  3 .stab         00004bd8  00000000  00000000  000014a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019f0  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00007a70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000480  00000000  00000000  00007b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000078  00000000  00000000  00007fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000286  00000000  00000000  00008028  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	4e c3       	rjmp	.+1692   	; 0x6a0 <__vector_1>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	82 c3       	rjmp	.+1796   	; 0x720 <__vector_13>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	ec c2       	rjmp	.+1496   	; 0x5fe <__vector_18>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d4 e0       	ldi	r29, 0x04	; 4
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
      40:	11 e0       	ldi	r17, 0x01	; 1
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	b1 e0       	ldi	r27, 0x01	; 1
      46:	e0 e2       	ldi	r30, 0x20	; 32
      48:	f3 e1       	ldi	r31, 0x13	; 19
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	ae 3e       	cpi	r26, 0xEE	; 238
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	12 e0       	ldi	r17, 0x02	; 2
      58:	ae ee       	ldi	r26, 0xEE	; 238
      5a:	b1 e0       	ldi	r27, 0x01	; 1
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a0 39       	cpi	r26, 0x90	; 144
      62:	b1 07       	cpc	r27, r17
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	f5 d3       	rcall	.+2026   	; 0x852 <main>
      68:	59 c9       	rjmp	.-3406   	; 0xfffff31c <__eeprom_end+0xff7ef31c>

0000006a <__bad_interrupt>:
      6a:	97 c3       	rjmp	.+1838   	; 0x79a <__vector_default>

0000006c <BarMeter_init>:
#define         BarMeter_N          8
#define         BarMeter_MIN        0
#define         BarMeter_MAX        9000
unsigned int    BarMeter_INTG = (BarMeter_MAX-BarMeter_MIN)/BarMeter_N;

void BarMeter_init(){
      6c:	df 92       	push	r13
      6e:	ef 92       	push	r14
      70:	ff 92       	push	r15
      72:	0f 93       	push	r16
      74:	1f 93       	push	r17
      76:	cf 93       	push	r28
      78:	df 93       	push	r29
    unsigned int code;
    unsigned int addr;
    
    for(code=0;code<6;code++){
      7a:	00 e0       	ldi	r16, 0x00	; 0
      7c:	10 e0       	ldi	r17, 0x00	; 0
        for(addr=0;addr<8;addr++){
            lcd_set_CGRAMaddr(code,addr);
            if( (addr > 1) & (addr < 6) )
                lcd_set_char(~(0x1f>>code));
      7e:	8f e1       	ldi	r24, 0x1F	; 31
      80:	e8 2e       	mov	r14, r24
      82:	f1 2c       	mov	r15, r1
      84:	1e c0       	rjmp	.+60     	; 0xc2 <BarMeter_init+0x56>
    unsigned int code;
    unsigned int addr;
    
    for(code=0;code<6;code++){
        for(addr=0;addr<8;addr++){
            lcd_set_CGRAMaddr(code,addr);
      86:	80 2f       	mov	r24, r16
      88:	6c 2f       	mov	r22, r28
      8a:	02 d2       	rcall	.+1028   	; 0x490 <lcd_set_CGRAMaddr>
            if( (addr > 1) & (addr < 6) )
      8c:	9e 01       	movw	r18, r28
      8e:	22 50       	subi	r18, 0x02	; 2
      90:	30 40       	sbci	r19, 0x00	; 0
      92:	24 30       	cpi	r18, 0x04	; 4
      94:	31 05       	cpc	r19, r1
      96:	10 f4       	brcc	.+4      	; 0x9c <BarMeter_init+0x30>
                lcd_set_char(~(0x1f>>code));
      98:	8d 2d       	mov	r24, r13
      9a:	09 c0       	rjmp	.+18     	; 0xae <BarMeter_init+0x42>
            else if( (addr == 6) | (addr == 1) ) lcd_set_char(0x00);
      9c:	c1 30       	cpi	r28, 0x01	; 1
      9e:	d1 05       	cpc	r29, r1
      a0:	19 f0       	breq	.+6      	; 0xa8 <BarMeter_init+0x3c>
      a2:	c6 30       	cpi	r28, 0x06	; 6
      a4:	d1 05       	cpc	r29, r1
      a6:	11 f4       	brne	.+4      	; 0xac <BarMeter_init+0x40>
      a8:	80 e0       	ldi	r24, 0x00	; 0
      aa:	01 c0       	rjmp	.+2      	; 0xae <BarMeter_init+0x42>
            else                                 lcd_set_char(0x10);
      ac:	80 e1       	ldi	r24, 0x10	; 16
      ae:	31 d1       	rcall	.+610    	; 0x312 <lcd_set_char>
void BarMeter_init(){
    unsigned int code;
    unsigned int addr;
    
    for(code=0;code<6;code++){
        for(addr=0;addr<8;addr++){
      b0:	21 96       	adiw	r28, 0x01	; 1
      b2:	c8 30       	cpi	r28, 0x08	; 8
      b4:	d1 05       	cpc	r29, r1
      b6:	39 f7       	brne	.-50     	; 0x86 <BarMeter_init+0x1a>

void BarMeter_init(){
    unsigned int code;
    unsigned int addr;
    
    for(code=0;code<6;code++){
      b8:	0f 5f       	subi	r16, 0xFF	; 255
      ba:	1f 4f       	sbci	r17, 0xFF	; 255
      bc:	06 30       	cpi	r16, 0x06	; 6
      be:	11 05       	cpc	r17, r1
      c0:	61 f0       	breq	.+24     	; 0xda <BarMeter_init+0x6e>
        for(addr=0;addr<8;addr++){
            lcd_set_CGRAMaddr(code,addr);
            if( (addr > 1) & (addr < 6) )
                lcd_set_char(~(0x1f>>code));
      c2:	c7 01       	movw	r24, r14
      c4:	00 2e       	mov	r0, r16
      c6:	02 c0       	rjmp	.+4      	; 0xcc <BarMeter_init+0x60>
      c8:	95 95       	asr	r25
      ca:	87 95       	ror	r24
      cc:	0a 94       	dec	r0
      ce:	e2 f7       	brpl	.-8      	; 0xc8 <BarMeter_init+0x5c>
      d0:	d8 2e       	mov	r13, r24
      d2:	d0 94       	com	r13
      d4:	c0 e0       	ldi	r28, 0x00	; 0
      d6:	d0 e0       	ldi	r29, 0x00	; 0
      d8:	d6 cf       	rjmp	.-84     	; 0x86 <BarMeter_init+0x1a>
            else if( (addr == 6) | (addr == 1) ) lcd_set_char(0x00);
            else                                 lcd_set_char(0x10);
        }
    }
}
      da:	df 91       	pop	r29
      dc:	cf 91       	pop	r28
      de:	1f 91       	pop	r17
      e0:	0f 91       	pop	r16
      e2:	ff 90       	pop	r15
      e4:	ef 90       	pop	r14
      e6:	df 90       	pop	r13
      e8:	08 95       	ret

000000ea <BarMeter_disp>:

void BarMeter_disp(unsigned int data){
      ea:	bf 92       	push	r11
      ec:	cf 92       	push	r12
      ee:	df 92       	push	r13
      f0:	ef 92       	push	r14
      f2:	ff 92       	push	r15
      f4:	0f 93       	push	r16
      f6:	1f 93       	push	r17
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
    
    for(n=0;n<INTG;n++){
        lcd_set_char(0x5);
    }
    if( INTG != BarMeter_N ) lcd_set_char(FRAC);
    for(n=INTG+1;n<BarMeter_N;n++){
      fc:	8c 01       	movw	r16, r24
      fe:	83 e2       	ldi	r24, 0x23	; 35
     100:	09 32       	cpi	r16, 0x29	; 41
     102:	18 07       	cpc	r17, r24
     104:	10 f0       	brcs	.+4      	; 0x10a <BarMeter_disp+0x20>
     106:	08 e2       	ldi	r16, 0x28	; 40
     108:	13 e2       	ldi	r17, 0x23	; 35
    }else if( data < BarMeter_MIN ){
        data = BarMeter_MIN;
    }
    
    conv_data = data - BarMeter_MIN;
    INTG = (unsigned int)(conv_data/BarMeter_INTG);
     10a:	e0 90 00 01 	lds	r14, 0x0100
     10e:	f0 90 01 01 	lds	r15, 0x0101
     112:	c8 01       	movw	r24, r16
     114:	b7 01       	movw	r22, r14
     116:	cc d8       	rcall	.-3688   	; 0xfffff2b0 <__eeprom_end+0xff7ef2b0>
     118:	b6 2e       	mov	r11, r22
    FRAC = (unsigned int)((conv_data - BarMeter_INTG*INTG)/(BarMeter_INTG / 5) + 1);
     11a:	c6 2e       	mov	r12, r22
     11c:	dd 24       	eor	r13, r13
    
    for(n=0;n<INTG;n++){
     11e:	c0 e0       	ldi	r28, 0x00	; 0
     120:	d0 e0       	ldi	r29, 0x00	; 0
     122:	03 c0       	rjmp	.+6      	; 0x12a <BarMeter_disp+0x40>
        lcd_set_char(0x5);
     124:	85 e0       	ldi	r24, 0x05	; 5
     126:	f5 d0       	rcall	.+490    	; 0x312 <lcd_set_char>
    
    conv_data = data - BarMeter_MIN;
    INTG = (unsigned int)(conv_data/BarMeter_INTG);
    FRAC = (unsigned int)((conv_data - BarMeter_INTG*INTG)/(BarMeter_INTG / 5) + 1);
    
    for(n=0;n<INTG;n++){
     128:	21 96       	adiw	r28, 0x01	; 1
     12a:	cc 15       	cp	r28, r12
     12c:	dd 05       	cpc	r29, r13
     12e:	d0 f3       	brcs	.-12     	; 0x124 <BarMeter_disp+0x3a>
        lcd_set_char(0x5);
    }
    if( INTG != BarMeter_N ) lcd_set_char(FRAC);
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	b8 16       	cp	r11, r24
     134:	91 f0       	breq	.+36     	; 0x15a <BarMeter_disp+0x70>
        data = BarMeter_MIN;
    }
    
    conv_data = data - BarMeter_MIN;
    INTG = (unsigned int)(conv_data/BarMeter_INTG);
    FRAC = (unsigned int)((conv_data - BarMeter_INTG*INTG)/(BarMeter_INTG / 5) + 1);
     136:	ce 9c       	mul	r12, r14
     138:	c0 01       	movw	r24, r0
     13a:	cf 9c       	mul	r12, r15
     13c:	90 0d       	add	r25, r0
     13e:	de 9c       	mul	r13, r14
     140:	90 0d       	add	r25, r0
     142:	11 24       	eor	r1, r1
     144:	08 1b       	sub	r16, r24
     146:	19 0b       	sbc	r17, r25
     148:	c7 01       	movw	r24, r14
     14a:	65 e0       	ldi	r22, 0x05	; 5
     14c:	70 e0       	ldi	r23, 0x00	; 0
     14e:	b0 d8       	rcall	.-3744   	; 0xfffff2b0 <__eeprom_end+0xff7ef2b0>
     150:	c8 01       	movw	r24, r16
     152:	ae d8       	rcall	.-3748   	; 0xfffff2b0 <__eeprom_end+0xff7ef2b0>
    
    for(n=0;n<INTG;n++){
        lcd_set_char(0x5);
    }
    if( INTG != BarMeter_N ) lcd_set_char(FRAC);
     154:	86 2f       	mov	r24, r22
     156:	8f 5f       	subi	r24, 0xFF	; 255
     158:	dc d0       	rcall	.+440    	; 0x312 <lcd_set_char>
    for(n=INTG+1;n<BarMeter_N;n++){
     15a:	c0 e0       	ldi	r28, 0x00	; 0
     15c:	d0 e0       	ldi	r29, 0x00	; 0
     15e:	02 c0       	rjmp	.+4      	; 0x164 <BarMeter_disp+0x7a>
        lcd_set_char(0x0);
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	d7 d0       	rcall	.+430    	; 0x312 <lcd_set_char>
     164:	21 96       	adiw	r28, 0x01	; 1
    
    for(n=0;n<INTG;n++){
        lcd_set_char(0x5);
    }
    if( INTG != BarMeter_N ) lcd_set_char(FRAC);
    for(n=INTG+1;n<BarMeter_N;n++){
     166:	ce 01       	movw	r24, r28
     168:	8c 0d       	add	r24, r12
     16a:	9d 1d       	adc	r25, r13
     16c:	88 30       	cpi	r24, 0x08	; 8
     16e:	91 05       	cpc	r25, r1
     170:	b8 f3       	brcs	.-18     	; 0x160 <BarMeter_disp+0x76>
        lcd_set_char(0x0);
    }

}
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	ff 90       	pop	r15
     17c:	ef 90       	pop	r14
     17e:	df 90       	pop	r13
     180:	cf 90       	pop	r12
     182:	bf 90       	pop	r11
     184:	08 95       	ret

00000186 <ExtInterrupt_init>:
#include "ExtInterrupt.h"

void ExtInterrupt_init(void) {

   // INT0, INT1 Pin change interrupt enable
	EIMSK = 0b00000001;
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	8d bb       	out	0x1d, r24	; 29
	// bit 7-2 : not valid ,  bit 1 : INT1 ,  bit 0 : INT0 
	
   // INT0, INT1 Pin change interrupt mode setting
	EICRA = 0b00000011;
     18a:	83 e0       	ldi	r24, 0x03	; 3
     18c:	80 93 69 00 	sts	0x0069, r24
	//		10 ... Negative edge
	//		11 ... Positive edge


	// Pin group mask
	PCICR = 0b00000000;
     190:	10 92 68 00 	sts	0x0068, r1
	// bit 2 : PCINT 16 - 23

	// Pin mask
	// PCMSK2 is valid, when bit 2 of PCICR is setted 
	// PCINT23, PCINT22, PCINT21, PCINT20, PCINT19, PCINT18, PCINT17, PCINT16
	PCMSK2 = 0b00000000;
     194:	10 92 6d 00 	sts	0x006D, r1
	// PCMSK1 is valid, when bit 1 of PCICR is setted 
	//  ----- , PCINT14, PCINT13, PCINT12, PCINT11, PCINT10,  PCINT9,  PCINT8
	PCMSK1 = 0b00000000;
     198:	10 92 6c 00 	sts	0x006C, r1
	// PCMSK0 is valid, when bit 0 of PCICR is setted 
	//  PCINT7,  PCINT6,  PCINT5,  PCINT4,  PCINT3,  PCINT2,  PCINT1,  PCINT0
	PCMSK0 = 0b00000000;
     19c:	10 92 6b 00 	sts	0x006B, r1
     1a0:	08 95       	ret

000001a2 <SoftSPI_Init>:
unsigned char RS;
unsigned char DATA;

void SoftSPI_Init(void){
    /*MOSI,SCK=出力、他は入力に設定 */
    DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RCK);
     1a2:	84 b1       	in	r24, 0x04	; 4
     1a4:	87 60       	ori	r24, 0x07	; 7
     1a6:	84 b9       	out	0x04, r24	; 4
}
     1a8:	08 95       	ret

000001aa <SoftSPI_TX>:

void SoftSPI_TX(unsigned char cData){
     1aa:	27 e0       	ldi	r18, 0x07	; 7
     1ac:	30 e0       	ldi	r19, 0x00	; 0
    unsigned int n;
    for(n=0;n<8;n++){
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
        _delay_us(1);
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
     1ae:	90 e0       	ldi	r25, 0x00	; 0
}

void SoftSPI_TX(unsigned char cData){
    unsigned int n;
    for(n=0;n<8;n++){
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
     1b0:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b2:	42 e0       	ldi	r20, 0x02	; 2
     1b4:	4a 95       	dec	r20
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <SoftSPI_TX+0xa>
     1b8:	00 c0       	rjmp	.+0      	; 0x1ba <SoftSPI_TX+0x10>
        _delay_us(1);
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
     1ba:	28 98       	cbi	0x05, 0	; 5
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
     1bc:	65 b1       	in	r22, 0x05	; 5
     1be:	ac 01       	movw	r20, r24
     1c0:	02 2e       	mov	r0, r18
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <SoftSPI_TX+0x1e>
     1c4:	55 95       	asr	r21
     1c6:	47 95       	ror	r20
     1c8:	0a 94       	dec	r0
     1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <SoftSPI_TX+0x1a>
     1cc:	41 70       	andi	r20, 0x01	; 1
     1ce:	46 2b       	or	r20, r22
     1d0:	45 b9       	out	0x05, r20	; 5
     1d2:	42 e0       	ldi	r20, 0x02	; 2
     1d4:	4a 95       	dec	r20
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <SoftSPI_TX+0x2a>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <SoftSPI_TX+0x30>
        _delay_us(1);
        PORT_SPI |= (1<<DD_SCK);                // Set SCK "H"
     1da:	29 9a       	sbi	0x05, 1	; 5
     1dc:	42 e0       	ldi	r20, 0x02	; 2
     1de:	4a 95       	dec	r20
     1e0:	f1 f7       	brne	.-4      	; 0x1de <SoftSPI_TX+0x34>
     1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <SoftSPI_TX+0x3a>
     1e4:	21 50       	subi	r18, 0x01	; 1
     1e6:	30 40       	sbci	r19, 0x00	; 0
    DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RCK);
}

void SoftSPI_TX(unsigned char cData){
    unsigned int n;
    for(n=0;n<8;n++){
     1e8:	4f ef       	ldi	r20, 0xFF	; 255
     1ea:	2f 3f       	cpi	r18, 0xFF	; 255
     1ec:	34 07       	cpc	r19, r20
     1ee:	01 f7       	brne	.-64     	; 0x1b0 <SoftSPI_TX+0x6>
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
        _delay_us(1);
        PORT_SPI |= (1<<DD_SCK);                // Set SCK "H"
        _delay_us(1);
    }
}
     1f0:	08 95       	ret

000001f2 <send_bits_595>:

void send_bits_595(unsigned char RS, unsigned char E, unsigned char DATA){
    unsigned char bits;
    bits = 0x3f & ( (RS<<5)|(E<<4)|DATA );
     1f2:	82 95       	swap	r24
     1f4:	88 0f       	add	r24, r24
     1f6:	80 7e       	andi	r24, 0xE0	; 224
     1f8:	84 2b       	or	r24, r20
     1fa:	62 95       	swap	r22
     1fc:	60 7f       	andi	r22, 0xF0	; 240
     1fe:	68 2b       	or	r22, r24
    SoftSPI_TX(bits);
     200:	86 2f       	mov	r24, r22
     202:	8f 73       	andi	r24, 0x3F	; 63
     204:	d2 df       	rcall	.-92     	; 0x1aa <SoftSPI_TX>
     206:	8a e1       	ldi	r24, 0x1A	; 26
     208:	8a 95       	dec	r24
     20a:	f1 f7       	brne	.-4      	; 0x208 <send_bits_595+0x16>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <send_bits_595+0x1c>
    _delay_us(10);
    PORT_SPI &= ~(1<<DD_RCK);   // Set RCK "L"
     20e:	2a 98       	cbi	0x05, 2	; 5
    PORT_SPI |=  (1<<DD_RCK);   // Set RCK "H"
     210:	2a 9a       	sbi	0x05, 2	; 5
    PORT_SPI &= ~(1<<DD_RCK);   // Set RCK "L"
     212:	2a 98       	cbi	0x05, 2	; 5
}
     214:	08 95       	ret

00000216 <lcd_set_4bit>:

// fuction for sending control bitpattern
void lcd_set_4bit(unsigned char bitpattern){
	DATA    =   0x0f & bitpattern; // set sending data
     216:	48 2f       	mov	r20, r24
     218:	4f 70       	andi	r20, 0x0F	; 15
     21a:	40 93 f4 01 	sts	0x01F4, r20
	E       =   0;
     21e:	10 92 f5 01 	sts	0x01F5, r1
    send_bits_595(RS,E,DATA);
     222:	80 91 f6 01 	lds	r24, 0x01F6
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	e4 df       	rcall	.-56     	; 0x1f2 <send_bits_595>
//	_delay_us(20);
	E       =   1;
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	80 93 f5 01 	sts	0x01F5, r24
    send_bits_595(RS,E,DATA);
     230:	80 91 f6 01 	lds	r24, 0x01F6
     234:	61 e0       	ldi	r22, 0x01	; 1
     236:	40 91 f4 01 	lds	r20, 0x01F4
     23a:	db df       	rcall	.-74     	; 0x1f2 <send_bits_595>
//	_delay_us(20);
	E       =   0;
     23c:	10 92 f5 01 	sts	0x01F5, r1
    send_bits_595(RS,E,DATA);
     240:	80 91 f6 01 	lds	r24, 0x01F6
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	40 91 f4 01 	lds	r20, 0x01F4
     24a:	d3 df       	rcall	.-90     	; 0x1f2 <send_bits_595>
//	_delay_us(20);
}
     24c:	08 95       	ret

0000024e <lcd_init>:

// Initializing LCD
void lcd_init(void){

	// set enable "0"
    E       = 0;
     24e:	10 92 f5 01 	sts	0x01F5, r1
    // set instruction input mode
	RS      = 0;
     252:	10 92 f6 01 	sts	0x01F6, r1
	// initialize data port
	DATA	= 0x00;
     256:	10 92 f4 01 	sts	0x01F4, r1
    send_bits_595(RS,E,DATA);
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	c8 df       	rcall	.-112    	; 0x1f2 <send_bits_595>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     262:	8f e3       	ldi	r24, 0x3F	; 63
     264:	9c e9       	ldi	r25, 0x9C	; 156
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <lcd_init+0x18>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_init+0x1e>
     26c:	00 00       	nop
    
	// wait more than 15ms
	_delay_ms(20);

	// set 8-bit mode
	lcd_set_4bit(0x03);
     26e:	83 e0       	ldi	r24, 0x03	; 3
     270:	d2 df       	rcall	.-92     	; 0x216 <lcd_set_4bit>
     272:	8f e0       	ldi	r24, 0x0F	; 15
     274:	97 e2       	ldi	r25, 0x27	; 39
     276:	01 97       	sbiw	r24, 0x01	; 1
     278:	f1 f7       	brne	.-4      	; 0x276 <lcd_init+0x28>
     27a:	00 c0       	rjmp	.+0      	; 0x27c <lcd_init+0x2e>
     27c:	00 00       	nop
	_delay_ms(5);
	lcd_set_4bit(0x03);
     27e:	83 e0       	ldi	r24, 0x03	; 3
     280:	ca df       	rcall	.-108    	; 0x216 <lcd_set_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     282:	8b ed       	ldi	r24, 0xDB	; 219
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <lcd_init+0x38>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <lcd_init+0x3e>
     28c:	00 00       	nop
	_delay_us(110);
	lcd_set_4bit(0x03);
     28e:	83 e0       	ldi	r24, 0x03	; 3
     290:	c2 df       	rcall	.-124    	; 0x216 <lcd_set_4bit>
     292:	95 e8       	ldi	r25, 0x85	; 133
     294:	9a 95       	dec	r25
     296:	f1 f7       	brne	.-4      	; 0x294 <lcd_init+0x46>
     298:	00 00       	nop
	_delay_us(50);
	
	// set 4-bit mode
	lcd_set_4bit(0x02);
     29a:	82 e0       	ldi	r24, 0x02	; 2
     29c:	bc df       	rcall	.-136    	; 0x216 <lcd_set_4bit>
     29e:	85 e8       	ldi	r24, 0x85	; 133
     2a0:	8a 95       	dec	r24
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <lcd_init+0x52>
     2a4:	00 00       	nop
	_delay_us(50);

	// function setting
	lcd_set_4bit(0x02);
     2a6:	82 e0       	ldi	r24, 0x02	; 2
     2a8:	b6 df       	rcall	.-148    	; 0x216 <lcd_set_4bit>
	lcd_set_4bit(0x08);
     2aa:	88 e0       	ldi	r24, 0x08	; 8
     2ac:	b4 df       	rcall	.-152    	; 0x216 <lcd_set_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ae:	8f ec       	ldi	r24, 0xCF	; 207
     2b0:	97 e0       	ldi	r25, 0x07	; 7
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <lcd_init+0x64>
     2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <lcd_init+0x6a>
     2b8:	00 00       	nop
	_delay_ms(1);

	// set display on, cursol off and blink off
	lcd_set_4bit(0x00);
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	ac df       	rcall	.-168    	; 0x216 <lcd_set_4bit>
	lcd_set_4bit(0x0c);
     2be:	8c e0       	ldi	r24, 0x0C	; 12
     2c0:	aa df       	rcall	.-172    	; 0x216 <lcd_set_4bit>
     2c2:	8f ec       	ldi	r24, 0xCF	; 207
     2c4:	97 e0       	ldi	r25, 0x07	; 7
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <lcd_init+0x78>
     2ca:	00 c0       	rjmp	.+0      	; 0x2cc <lcd_init+0x7e>
     2cc:	00 00       	nop
	_delay_ms(1);

	// set entry mode (cursol direction : right, disable shift)
	lcd_set_4bit(0x00);
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	a2 df       	rcall	.-188    	; 0x216 <lcd_set_4bit>
	lcd_set_4bit(0x06);
     2d2:	86 e0       	ldi	r24, 0x06	; 6
     2d4:	a0 df       	rcall	.-192    	; 0x216 <lcd_set_4bit>
     2d6:	8f ec       	ldi	r24, 0xCF	; 207
     2d8:	97 e0       	ldi	r25, 0x07	; 7
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <lcd_init+0x8c>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <lcd_init+0x92>
     2e0:	00 00       	nop
	_delay_ms(1);

	// clear display
	lcd_set_4bit(0x00);
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	98 df       	rcall	.-208    	; 0x216 <lcd_set_4bit>
	lcd_set_4bit(0x01);
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	96 df       	rcall	.-212    	; 0x216 <lcd_set_4bit>
     2ea:	8f e9       	ldi	r24, 0x9F	; 159
     2ec:	9f e0       	ldi	r25, 0x0F	; 15
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <lcd_init+0xa0>
     2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <lcd_init+0xa6>
     2f4:	00 00       	nop
	_delay_ms(2);

	// clear cursol position
	lcd_set_4bit(0x00);
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	8e df       	rcall	.-228    	; 0x216 <lcd_set_4bit>
	lcd_set_4bit(0x02);
     2fa:	82 e0       	ldi	r24, 0x02	; 2
     2fc:	8c df       	rcall	.-232    	; 0x216 <lcd_set_4bit>
     2fe:	8f e9       	ldi	r24, 0x9F	; 159
     300:	9f e0       	ldi	r25, 0x0F	; 15
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <lcd_init+0xb4>
     306:	00 c0       	rjmp	.+0      	; 0x308 <lcd_init+0xba>
     308:	00 00       	nop
	_delay_ms(2);

	// set data input mode
    RS      =   1;
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	80 93 f6 01 	sts	0x01F6, r24
}
     310:	08 95       	ret

00000312 <lcd_set_char>:
    RS      =   1;
}

// LCD character (1 byte) sending
void lcd_set_char(unsigned char c)
{
     312:	cf 93       	push	r28
     314:	c8 2f       	mov	r28, r24
	lcd_set_4bit(c >> 4); // Upper Bit
     316:	82 95       	swap	r24
     318:	8f 70       	andi	r24, 0x0F	; 15
     31a:	7d df       	rcall	.-262    	; 0x216 <lcd_set_4bit>
	lcd_set_4bit(0x0f & c); // Lower Bit
     31c:	8c 2f       	mov	r24, r28
     31e:	8f 70       	andi	r24, 0x0F	; 15
     320:	7a df       	rcall	.-268    	; 0x216 <lcd_set_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     322:	85 e8       	ldi	r24, 0x85	; 133
     324:	8a 95       	dec	r24
     326:	f1 f7       	brne	.-4      	; 0x324 <lcd_set_char+0x12>
     328:	00 00       	nop
	_delay_us(50);
}
     32a:	cf 91       	pop	r28
     32c:	08 95       	ret

0000032e <lcd_locate>:

// LCD character allocation
void lcd_locate(unsigned char row, unsigned char col)
{
	// set instruction input mode
    RS      =   0;
     32e:	10 92 f6 01 	sts	0x01F6, r1
//	lcd_set_char(0x80 | col | (0x40 * row) );
	lcd_set_char(0x80 | ( col + 20*(unsigned int)(row/2) ) | ( 0x40 * (row%2) ) );
     332:	98 2f       	mov	r25, r24
     334:	91 70       	andi	r25, 0x01	; 1
     336:	92 95       	swap	r25
     338:	99 0f       	add	r25, r25
     33a:	99 0f       	add	r25, r25
     33c:	90 7c       	andi	r25, 0xC0	; 192
     33e:	90 68       	ori	r25, 0x80	; 128
     340:	86 95       	lsr	r24
     342:	24 e1       	ldi	r18, 0x14	; 20
     344:	82 9f       	mul	r24, r18
     346:	80 2d       	mov	r24, r0
     348:	11 24       	eor	r1, r1
     34a:	86 0f       	add	r24, r22
     34c:	89 2b       	or	r24, r25
     34e:	e1 df       	rcall	.-62     	; 0x312 <lcd_set_char>
	// set data input mode
    RS      =   1;
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	80 93 f6 01 	sts	0x01F6, r24
}
     356:	08 95       	ret

00000358 <lcd_set_str>:
	_delay_us(50);
}

// LCD String Sending
void lcd_set_str(unsigned char *s)
{
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	ec 01       	movw	r28, r24
	while (*s != 0) {
     35e:	01 c0       	rjmp	.+2      	; 0x362 <lcd_set_str+0xa>
		lcd_set_char(*s);
     360:	d8 df       	rcall	.-80     	; 0x312 <lcd_set_char>
}

// LCD String Sending
void lcd_set_str(unsigned char *s)
{
	while (*s != 0) {
     362:	89 91       	ld	r24, Y+
     364:	88 23       	and	r24, r24
     366:	e1 f7       	brne	.-8      	; 0x360 <lcd_set_str+0x8>
		lcd_set_char(*s);
		s++;
	} 
}
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	08 95       	ret

0000036e <lcd_set_numeric>:

// Display numeric on LCD display
void lcd_set_numeric(unsigned int num, unsigned int Nint, unsigned int Nfrac){
     36e:	4f 92       	push	r4
     370:	5f 92       	push	r5
     372:	6f 92       	push	r6
     374:	7f 92       	push	r7
     376:	8f 92       	push	r8
     378:	9f 92       	push	r9
     37a:	af 92       	push	r10
     37c:	bf 92       	push	r11
     37e:	cf 92       	push	r12
     380:	df 92       	push	r13
     382:	ef 92       	push	r14
     384:	ff 92       	push	r15
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	ec 01       	movw	r28, r24
    unsigned long int DivFactor = 1;
	unsigned int n, m;
	unsigned int d[10];
    unsigned int valid = 0;
    for(n=0;n<Nfrac;n++){
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	0c c0       	rjmp	.+24     	; 0x3ae <lcd_set_numeric+0x40>
        num = num * 10;
     396:	ce 01       	movw	r24, r28
     398:	88 0f       	add	r24, r24
     39a:	99 1f       	adc	r25, r25
     39c:	f3 e0       	ldi	r31, 0x03	; 3
     39e:	cc 0f       	add	r28, r28
     3a0:	dd 1f       	adc	r29, r29
     3a2:	fa 95       	dec	r31
     3a4:	e1 f7       	brne	.-8      	; 0x39e <lcd_set_numeric+0x30>
     3a6:	c8 0f       	add	r28, r24
     3a8:	d9 1f       	adc	r29, r25
void lcd_set_numeric(unsigned int num, unsigned int Nint, unsigned int Nfrac){
    unsigned long int DivFactor = 1;
	unsigned int n, m;
	unsigned int d[10];
    unsigned int valid = 0;
    for(n=0;n<Nfrac;n++){
     3aa:	2f 5f       	subi	r18, 0xFF	; 255
     3ac:	3f 4f       	sbci	r19, 0xFF	; 255
     3ae:	24 17       	cp	r18, r20
     3b0:	35 07       	cpc	r19, r21
     3b2:	89 f7       	brne	.-30     	; 0x396 <lcd_set_numeric+0x28>
     3b4:	aa 24       	eor	r10, r10
     3b6:	bb 24       	eor	r11, r11
     3b8:	88 24       	eor	r8, r8
     3ba:	99 24       	eor	r9, r9
        num = num * 10;
    }
    for(n=0;n<=Nint+Nfrac-1;n++){
     3bc:	39 01       	movw	r6, r18
     3be:	66 0e       	add	r6, r22
     3c0:	77 1e       	adc	r7, r23
     3c2:	23 01       	movw	r4, r6
     3c4:	08 94       	sec
     3c6:	41 08       	sbc	r4, r1
     3c8:	51 08       	sbc	r5, r1
     3ca:	3b c0       	rjmp	.+118    	; 0x442 <lcd_set_numeric+0xd4>
        
        DivFactor = 1;
        for(m=n+1;m<Nint+Nfrac;m++){
            DivFactor = DivFactor * 10;
     3cc:	c7 01       	movw	r24, r14
     3ce:	b6 01       	movw	r22, r12
     3d0:	2a e0       	ldi	r18, 0x0A	; 10
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	40 e0       	ldi	r20, 0x00	; 0
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	4c d7       	rcall	.+3736   	; 0x1272 <__mulsi3>
     3da:	6b 01       	movw	r12, r22
     3dc:	7c 01       	movw	r14, r24
     3de:	06 c0       	rjmp	.+12     	; 0x3ec <lcd_set_numeric+0x7e>
	unsigned int d[10];
    unsigned int valid = 0;
    for(n=0;n<Nfrac;n++){
        num = num * 10;
    }
    for(n=0;n<=Nint+Nfrac-1;n++){
     3e0:	85 01       	movw	r16, r10
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	c9 2e       	mov	r12, r25
     3e6:	d1 2c       	mov	r13, r1
     3e8:	e1 2c       	mov	r14, r1
     3ea:	f1 2c       	mov	r15, r1
        
        DivFactor = 1;
        for(m=n+1;m<Nint+Nfrac;m++){
            DivFactor = DivFactor * 10;
     3ec:	0f 5f       	subi	r16, 0xFF	; 255
     3ee:	1f 4f       	sbci	r17, 0xFF	; 255
        num = num * 10;
    }
    for(n=0;n<=Nint+Nfrac-1;n++){
        
        DivFactor = 1;
        for(m=n+1;m<Nint+Nfrac;m++){
     3f0:	06 15       	cp	r16, r6
     3f2:	17 05       	cpc	r17, r7
     3f4:	58 f3       	brcs	.-42     	; 0x3cc <lcd_set_numeric+0x5e>
            DivFactor = DivFactor * 10;
        }
        
        d[n] = (unsigned int)( num / DivFactor );
     3f6:	be 01       	movw	r22, r28
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	a7 01       	movw	r20, r14
     3fe:	96 01       	movw	r18, r12
     400:	6b d7       	rcall	.+3798   	; 0x12d8 <__udivmodsi4>
        if( (valid == 0) & (d[n]!=0) ) valid = 1;
     402:	21 15       	cp	r18, r1
     404:	31 05       	cpc	r19, r1
     406:	31 f0       	breq	.+12     	; 0x414 <lcd_set_numeric+0xa6>
     408:	81 14       	cp	r8, r1
     40a:	91 04       	cpc	r9, r1
     40c:	19 f4       	brne	.+6      	; 0x414 <lcd_set_numeric+0xa6>
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	88 2e       	mov	r8, r24
     412:	91 2c       	mov	r9, r1
        num = num - d[n]*DivFactor;
     414:	2c 9d       	mul	r18, r12
     416:	c0 01       	movw	r24, r0
     418:	2d 9d       	mul	r18, r13
     41a:	90 0d       	add	r25, r0
     41c:	3c 9d       	mul	r19, r12
     41e:	90 0d       	add	r25, r0
     420:	11 24       	eor	r1, r1
     422:	c8 1b       	sub	r28, r24
     424:	d9 0b       	sbc	r29, r25
        
        if( (valid == 1)|(n == (Nint+Nfrac-1)) ) lcd_set_char(0x30 + d[n]);
     426:	81 14       	cp	r8, r1
     428:	91 04       	cpc	r9, r1
     42a:	19 f4       	brne	.+6      	; 0x432 <lcd_set_numeric+0xc4>
     42c:	a4 14       	cp	r10, r4
     42e:	b5 04       	cpc	r11, r5
     430:	19 f4       	brne	.+6      	; 0x438 <lcd_set_numeric+0xca>
     432:	82 2f       	mov	r24, r18
     434:	80 5d       	subi	r24, 0xD0	; 208
     436:	01 c0       	rjmp	.+2      	; 0x43a <lcd_set_numeric+0xcc>
        else if( valid == 0 )                   lcd_set_char(0x20);
     438:	80 e2       	ldi	r24, 0x20	; 32
     43a:	6b df       	rcall	.-298    	; 0x312 <lcd_set_char>
     43c:	08 94       	sec
     43e:	a1 1c       	adc	r10, r1
     440:	b1 1c       	adc	r11, r1
	unsigned int d[10];
    unsigned int valid = 0;
    for(n=0;n<Nfrac;n++){
        num = num * 10;
    }
    for(n=0;n<=Nint+Nfrac-1;n++){
     442:	4a 14       	cp	r4, r10
     444:	5b 04       	cpc	r5, r11
     446:	60 f6       	brcc	.-104    	; 0x3e0 <lcd_set_numeric+0x72>
        
        if( (valid == 1)|(n == (Nint+Nfrac-1)) ) lcd_set_char(0x30 + d[n]);
        else if( valid == 0 )                   lcd_set_char(0x20);
        else                                    lcd_set_char(0xff);
    }
}
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	ff 90       	pop	r15
     452:	ef 90       	pop	r14
     454:	df 90       	pop	r13
     456:	cf 90       	pop	r12
     458:	bf 90       	pop	r11
     45a:	af 90       	pop	r10
     45c:	9f 90       	pop	r9
     45e:	8f 90       	pop	r8
     460:	7f 90       	pop	r7
     462:	6f 90       	pop	r6
     464:	5f 90       	pop	r5
     466:	4f 90       	pop	r4
     468:	08 95       	ret

0000046a <lcd_clear>:

// Clear LCD
void lcd_clear(){
	// clear display
    RS      =   0;
     46a:	10 92 f6 01 	sts	0x01F6, r1
	lcd_set_4bit(0x00);
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	d2 de       	rcall	.-604    	; 0x216 <lcd_set_4bit>
	lcd_set_4bit(0x01);
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	d0 de       	rcall	.-608    	; 0x216 <lcd_set_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     476:	8f ec       	ldi	r24, 0xCF	; 207
     478:	97 e0       	ldi	r25, 0x07	; 7
     47a:	01 97       	sbiw	r24, 0x01	; 1
     47c:	f1 f7       	brne	.-4      	; 0x47a <lcd_clear+0x10>
     47e:	00 c0       	rjmp	.+0      	; 0x480 <lcd_clear+0x16>
     480:	00 00       	nop
	_delay_ms(1);
    RS      =   1;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	80 93 f6 01 	sts	0x01F6, r24
	lcd_locate(0,0);
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	50 df       	rcall	.-352    	; 0x32e <lcd_locate>
}
     48e:	08 95       	ret

00000490 <lcd_set_CGRAMaddr>:

// Set CGRAM address
void lcd_set_CGRAMaddr(unsigned char code,unsigned char addr)
{
	// set instruction input mode
    RS      =   0;
     490:	10 92 f6 01 	sts	0x01F6, r1
    lcd_set_char(0x40 | code<<3 | addr );
     494:	60 64       	ori	r22, 0x40	; 64
     496:	88 0f       	add	r24, r24
     498:	88 0f       	add	r24, r24
     49a:	88 0f       	add	r24, r24
     49c:	86 2b       	or	r24, r22
     49e:	39 df       	rcall	.-398    	; 0x312 <lcd_set_char>
	// set data input mode
    RS      =   1;
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	80 93 f6 01 	sts	0x01F6, r24
}
     4a6:	08 95       	ret

000004a8 <set_initial_t_id>:
};

// Measure Tarfet ID Declarations
uint8_t     t_id[Ndata];
void set_initial_t_id(){
    t_id[0] = 3;
     4a8:	83 e0       	ldi	r24, 0x03	; 3
     4aa:	80 93 09 02 	sts	0x0209, r24
    t_id[1] = 0;
     4ae:	10 92 0a 02 	sts	0x020A, r1
    t_id[2] = 6;
     4b2:	86 e0       	ldi	r24, 0x06	; 6
     4b4:	80 93 0b 02 	sts	0x020B, r24
    t_id[3] = 5;
     4b8:	85 e0       	ldi	r24, 0x05	; 5
     4ba:	80 93 0c 02 	sts	0x020C, r24
}
     4be:	08 95       	ret

000004c0 <timer1_init>:
unsigned long int   proc_array[Nmed];
unsigned int        tacho_n = 0;

// 16-bit Counter intialazation
void timer1_init() {
	TCCR1A  = 0b00000000;	// Timer/Counter1 Control Register A
     4c0:	10 92 80 00 	sts	0x0080, r1
	TCCR1B  = 0b00000011;
     4c4:	83 e0       	ldi	r24, 0x03	; 3
     4c6:	80 93 81 00 	sts	0x0081, r24
	TCCR1C  = 0b00000000;
     4ca:	10 92 82 00 	sts	0x0082, r1
	TIMSK1  = 0b00000001;
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	80 93 6f 00 	sts	0x006F, r24
	TCNT1   = 0x0000;         // Initialize 16-bit counter bit
     4d4:	10 92 85 00 	sts	0x0085, r1
     4d8:	10 92 84 00 	sts	0x0084, r1
	OCR1A   = 0xffff;         // 16-bit register for compare
     4dc:	8f ef       	ldi	r24, 0xFF	; 255
     4de:	9f ef       	ldi	r25, 0xFF	; 255
     4e0:	90 93 89 00 	sts	0x0089, r25
     4e4:	80 93 88 00 	sts	0x0088, r24
}
     4e8:	08 95       	ret

000004ea <PWM_init>:

// 8-bit PWM timer intialazation
void PWM_init() {
	TCCR0A  = 0b10000001;	// Timer/Counter1 Control Register A
     4ea:	81 e8       	ldi	r24, 0x81	; 129
     4ec:	84 bd       	out	0x24, r24	; 36
	TCCR0B  = 0b00000101;
     4ee:	85 e0       	ldi	r24, 0x05	; 5
     4f0:	85 bd       	out	0x25, r24	; 37
	TIMSK0  = 0b00000000;
     4f2:	10 92 6e 00 	sts	0x006E, r1
	TCNT0   = 0x00;         // Initialize 8-bit counter bit
     4f6:	16 bc       	out	0x26, r1	; 38
	OCR0A   = 0x80;         // 8-bit register for compare
     4f8:	80 e8       	ldi	r24, 0x80	; 128
     4fa:	87 bd       	out	0x27, r24	; 39
}
     4fc:	08 95       	ret

000004fe <StrLength>:

// Count character length
int StrLength(const char *s){
     4fe:	fc 01       	movw	r30, r24
    int n = 0;
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
    while (*s++ != '\0')
     504:	02 c0       	rjmp	.+4      	; 0x50a <__stack+0xb>
        n++;
     506:	2f 5f       	subi	r18, 0xFF	; 255
     508:	3f 4f       	sbci	r19, 0xFF	; 255
}

// Count character length
int StrLength(const char *s){
    int n = 0;
    while (*s++ != '\0')
     50a:	81 91       	ld	r24, Z+
     50c:	88 23       	and	r24, r24
     50e:	d9 f7       	brne	.-10     	; 0x506 <__stack+0x7>
        n++;
    return (n);
}
     510:	c9 01       	movw	r24, r18
     512:	08 95       	ret

00000514 <BubbleSort>:

// Bubble Sort (min->max)
void BubbleSort(){
     514:	af 92       	push	r10
     516:	bf 92       	push	r11
     518:	cf 92       	push	r12
     51a:	df 92       	push	r13
     51c:	ef 92       	push	r14
     51e:	ff 92       	push	r15
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
	unsigned int tmp;
	unsigned int min;
	unsigned int min_index;
	unsigned int n,m;
	
	for(m=0;m<Nmed;m++){
     528:	9c e6       	ldi	r25, 0x6C	; 108
     52a:	e9 2e       	mov	r14, r25
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	f9 2e       	mov	r15, r25
     530:	cc 24       	eor	r12, r12
     532:	dd 24       	eor	r13, r13
     534:	39 c0       	rjmp	.+114    	; 0x5a8 <BubbleSort+0x94>
        n++;
    return (n);
}

// Bubble Sort (min->max)
void BubbleSort(){
     536:	f7 01       	movw	r30, r14
     538:	ec 0f       	add	r30, r28
     53a:	fd 1f       	adc	r31, r29
	unsigned int n,m;
	
	for(m=0;m<Nmed;m++){
		min = 0xffffffff;
		for(n=m;n<Nmed;n++){
			if( proc_array[n] < min ){
     53c:	80 81       	ld	r24, Z
     53e:	91 81       	ldd	r25, Z+1	; 0x01
     540:	a2 81       	ldd	r26, Z+2	; 0x02
     542:	b3 81       	ldd	r27, Z+3	; 0x03
     544:	a8 01       	movw	r20, r16
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	84 17       	cp	r24, r20
     54c:	95 07       	cpc	r25, r21
     54e:	a6 07       	cpc	r26, r22
     550:	b7 07       	cpc	r27, r23
     552:	10 f4       	brcc	.+4      	; 0x558 <BubbleSort+0x44>
				min = proc_array[n];
     554:	8c 01       	movw	r16, r24
     556:	59 01       	movw	r10, r18
	unsigned int min_index;
	unsigned int n,m;
	
	for(m=0;m<Nmed;m++){
		min = 0xffffffff;
		for(n=m;n<Nmed;n++){
     558:	2f 5f       	subi	r18, 0xFF	; 255
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
     55c:	24 96       	adiw	r28, 0x04	; 4
     55e:	29 30       	cpi	r18, 0x09	; 9
     560:	31 05       	cpc	r19, r1
     562:	49 f7       	brne	.-46     	; 0x536 <BubbleSort+0x22>
     564:	f5 01       	movw	r30, r10
			if( proc_array[n] < min ){
				min = proc_array[n];
				min_index = n;
			}
		}
		tmp                     = proc_array[m];
     566:	d7 01       	movw	r26, r14
     568:	2d 91       	ld	r18, X+
     56a:	3c 91       	ld	r19, X
		proc_array[m]           = proc_array[min_index];
     56c:	ee 0f       	add	r30, r30
     56e:	ff 1f       	adc	r31, r31
     570:	ee 0f       	add	r30, r30
     572:	ff 1f       	adc	r31, r31
     574:	e4 59       	subi	r30, 0x94	; 148
     576:	fd 4f       	sbci	r31, 0xFD	; 253
     578:	80 81       	ld	r24, Z
     57a:	91 81       	ldd	r25, Z+1	; 0x01
     57c:	a2 81       	ldd	r26, Z+2	; 0x02
     57e:	b3 81       	ldd	r27, Z+3	; 0x03
     580:	e7 01       	movw	r28, r14
     582:	89 93       	st	Y+, r24
     584:	99 93       	st	Y+, r25
     586:	a9 93       	st	Y+, r26
     588:	b9 93       	st	Y+, r27
     58a:	7e 01       	movw	r14, r28
		proc_array[min_index]   = tmp;
     58c:	c9 01       	movw	r24, r18
     58e:	a0 e0       	ldi	r26, 0x00	; 0
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	80 83       	st	Z, r24
     594:	91 83       	std	Z+1, r25	; 0x01
     596:	a2 83       	std	Z+2, r26	; 0x02
     598:	b3 83       	std	Z+3, r27	; 0x03
	unsigned int tmp;
	unsigned int min;
	unsigned int min_index;
	unsigned int n,m;
	
	for(m=0;m<Nmed;m++){
     59a:	08 94       	sec
     59c:	c1 1c       	adc	r12, r1
     59e:	d1 1c       	adc	r13, r1
     5a0:	d9 e0       	ldi	r29, 0x09	; 9
     5a2:	cd 16       	cp	r12, r29
     5a4:	d1 04       	cpc	r13, r1
     5a6:	31 f0       	breq	.+12     	; 0x5b4 <BubbleSort+0xa0>
        n++;
    return (n);
}

// Bubble Sort (min->max)
void BubbleSort(){
     5a8:	96 01       	movw	r18, r12
     5aa:	c0 e0       	ldi	r28, 0x00	; 0
     5ac:	d0 e0       	ldi	r29, 0x00	; 0
     5ae:	0f ef       	ldi	r16, 0xFF	; 255
     5b0:	1f ef       	ldi	r17, 0xFF	; 255
     5b2:	c1 cf       	rjmp	.-126    	; 0x536 <BubbleSort+0x22>
		}
		tmp                     = proc_array[m];
		proc_array[m]           = proc_array[min_index];
		proc_array[min_index]   = tmp;
	}
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	ff 90       	pop	r15
     5be:	ef 90       	pop	r14
     5c0:	df 90       	pop	r13
     5c2:	cf 90       	pop	r12
     5c4:	bf 90       	pop	r11
     5c6:	af 90       	pop	r10
     5c8:	08 95       	ret

000005ca <DisplayItemInfo>:

// Display
void DisplayItemInfo(void){
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
	int k;
	lcd_clear();
     5d0:	4c df       	rcall	.-360    	; 0x46a <lcd_clear>
     5d2:	c9 e0       	ldi	r28, 0x09	; 9
     5d4:	d2 e0       	ldi	r29, 0x02	; 2
     5d6:	10 e0       	ldi	r17, 0x00	; 0
	for(k=0;k<Ndata;k++){
//		lcd_locate((unsigned int)((LCD_W/2*k)/LCD_W),(LCD_W/2)*(k%2));
		lcd_locate(k,0);
     5d8:	81 2f       	mov	r24, r17
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	a8 de       	rcall	.-688    	; 0x32e <lcd_locate>
		lcd_set_str(RxName[t_id[k]]);
     5de:	e9 91       	ld	r30, Y+
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	ee 0f       	add	r30, r30
     5e4:	ff 1f       	adc	r31, r31
     5e6:	e9 50       	subi	r30, 0x09	; 9
     5e8:	fe 4f       	sbci	r31, 0xFE	; 254
     5ea:	80 81       	ld	r24, Z
     5ec:	91 81       	ldd	r25, Z+1	; 0x01
     5ee:	b4 de       	rcall	.-664    	; 0x358 <lcd_set_str>
     5f0:	1f 5f       	subi	r17, 0xFF	; 255

// Display
void DisplayItemInfo(void){
	int k;
	lcd_clear();
	for(k=0;k<Ndata;k++){
     5f2:	14 30       	cpi	r17, 0x04	; 4
     5f4:	89 f7       	brne	.-30     	; 0x5d8 <DisplayItemInfo+0xe>
//		lcd_locate((unsigned int)((LCD_W/2*k)/LCD_W),(LCD_W/2)*(k%2));
		lcd_locate(k,0);
		lcd_set_str(RxName[t_id[k]]);
	}
	
}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	08 95       	ret

000005fe <__vector_18>:

ISR(USART_RX_vect){
     5fe:	1f 92       	push	r1
     600:	0f 92       	push	r0
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	0f 92       	push	r0
     606:	11 24       	eor	r1, r1
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	2f 93       	push	r18
     60e:	3f 93       	push	r19
     610:	4f 93       	push	r20
     612:	5f 93       	push	r21
     614:	6f 93       	push	r22
     616:	7f 93       	push	r23
     618:	8f 93       	push	r24
     61a:	9f 93       	push	r25
     61c:	af 93       	push	r26
     61e:	bf 93       	push	r27
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	ef 93       	push	r30
     626:	ff 93       	push	r31
    unsigned int    ID;
    unsigned int    n, m;

    ID = USART_receive(); // Synchronize & Detect receiver ID
     628:	d9 d0       	rcall	.+434    	; 0x7dc <USART_receive>
     62a:	28 2f       	mov	r18, r24
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	a9 e0       	ldi	r26, 0x09	; 9
     630:	b2 e0       	ldi	r27, 0x02	; 2
    // Get 3-bit sngle data
    for(n=0;n<Ndata;n++){
     632:	c0 e0       	ldi	r28, 0x00	; 0
     634:	d0 e0       	ldi	r29, 0x00	; 0
        if ( ID == RxID[t_id[n]] ){
     636:	ed 91       	ld	r30, X+
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	ec 51       	subi	r30, 0x1C	; 28
     63c:	fe 4f       	sbci	r31, 0xFE	; 254
     63e:	80 81       	ld	r24, Z
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	28 17       	cp	r18, r24
     644:	39 07       	cpc	r19, r25
     646:	99 f4       	brne	.+38     	; 0x66e <__vector_18+0x70>
     648:	00 e0       	ldi	r16, 0x00	; 0
     64a:	10 e0       	ldi	r17, 0x00	; 0
		lcd_set_str(RxName[t_id[k]]);
	}
	
}

ISR(USART_RX_vect){
     64c:	cc 0f       	add	r28, r28
     64e:	dd 1f       	adc	r29, r29
     650:	cc 0f       	add	r28, r28
     652:	dd 1f       	adc	r29, r29
     654:	cd 5d       	subi	r28, 0xDD	; 221
     656:	dd 4f       	sbci	r29, 0xFD	; 253

    ID = USART_receive(); // Synchronize & Detect receiver ID
    // Get 3-bit sngle data
    for(n=0;n<Ndata;n++){
        if ( ID == RxID[t_id[n]] ){
            for(m=0;m<4;m++) data[n][m] = USART_receive();
     658:	c1 d0       	rcall	.+386    	; 0x7dc <USART_receive>
		lcd_set_str(RxName[t_id[k]]);
	}
	
}

ISR(USART_RX_vect){
     65a:	fe 01       	movw	r30, r28
     65c:	e0 0f       	add	r30, r16
     65e:	f1 1f       	adc	r31, r17

    ID = USART_receive(); // Synchronize & Detect receiver ID
    // Get 3-bit sngle data
    for(n=0;n<Ndata;n++){
        if ( ID == RxID[t_id[n]] ){
            for(m=0;m<4;m++) data[n][m] = USART_receive();
     660:	80 83       	st	Z, r24
     662:	0f 5f       	subi	r16, 0xFF	; 255
     664:	1f 4f       	sbci	r17, 0xFF	; 255
     666:	04 30       	cpi	r16, 0x04	; 4
     668:	11 05       	cpc	r17, r1
     66a:	b1 f7       	brne	.-20     	; 0x658 <__vector_18+0x5a>
     66c:	04 c0       	rjmp	.+8      	; 0x676 <__vector_18+0x78>
    unsigned int    ID;
    unsigned int    n, m;

    ID = USART_receive(); // Synchronize & Detect receiver ID
    // Get 3-bit sngle data
    for(n=0;n<Ndata;n++){
     66e:	21 96       	adiw	r28, 0x01	; 1
     670:	c4 30       	cpi	r28, 0x04	; 4
     672:	d1 05       	cpc	r29, r1
     674:	01 f7       	brne	.-64     	; 0x636 <__vector_18+0x38>
        if ( ID == RxID[t_id[n]] ){
            for(m=0;m<4;m++) data[n][m] = USART_receive();
            break;
        }
    }
}
     676:	ff 91       	pop	r31
     678:	ef 91       	pop	r30
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	bf 91       	pop	r27
     680:	af 91       	pop	r26
     682:	9f 91       	pop	r25
     684:	8f 91       	pop	r24
     686:	7f 91       	pop	r23
     688:	6f 91       	pop	r22
     68a:	5f 91       	pop	r21
     68c:	4f 91       	pop	r20
     68e:	3f 91       	pop	r19
     690:	2f 91       	pop	r18
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	0f 90       	pop	r0
     698:	0f be       	out	0x3f, r0	; 63
     69a:	0f 90       	pop	r0
     69c:	1f 90       	pop	r1
     69e:	18 95       	reti

000006a0 <__vector_1>:

ISR(INT0_vect){
     6a0:	1f 92       	push	r1
     6a2:	0f 92       	push	r0
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	0f 92       	push	r0
     6a8:	11 24       	eor	r1, r1
     6aa:	4f 93       	push	r20
     6ac:	5f 93       	push	r21
     6ae:	6f 93       	push	r22
     6b0:	7f 93       	push	r23
     6b2:	8f 93       	push	r24
     6b4:	9f 93       	push	r25
     6b6:	ef 93       	push	r30
     6b8:	ff 93       	push	r31
    meas_array[tacho_n] = TCNT1;
     6ba:	80 91 ee 01 	lds	r24, 0x01EE
     6be:	90 91 ef 01 	lds	r25, 0x01EF
     6c2:	40 91 84 00 	lds	r20, 0x0084
     6c6:	50 91 85 00 	lds	r21, 0x0085
     6ca:	fc 01       	movw	r30, r24
     6cc:	ee 0f       	add	r30, r30
     6ce:	ff 1f       	adc	r31, r31
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	ed 5c       	subi	r30, 0xCD	; 205
     6d6:	fd 4f       	sbci	r31, 0xFD	; 253
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	40 83       	st	Z, r20
     6de:	51 83       	std	Z+1, r21	; 0x01
     6e0:	62 83       	std	Z+2, r22	; 0x02
     6e2:	73 83       	std	Z+3, r23	; 0x03
    if( tacho_n == Nmed-1 ) tacho_n=0;
     6e4:	88 30       	cpi	r24, 0x08	; 8
     6e6:	91 05       	cpc	r25, r1
     6e8:	29 f4       	brne	.+10     	; 0x6f4 <__vector_1+0x54>
     6ea:	10 92 ef 01 	sts	0x01EF, r1
     6ee:	10 92 ee 01 	sts	0x01EE, r1
     6f2:	05 c0       	rjmp	.+10     	; 0x6fe <__vector_1+0x5e>
    else                    tacho_n++;
     6f4:	01 96       	adiw	r24, 0x01	; 1
     6f6:	90 93 ef 01 	sts	0x01EF, r25
     6fa:	80 93 ee 01 	sts	0x01EE, r24
    TCNT1 = 0;
     6fe:	10 92 85 00 	sts	0x0085, r1
     702:	10 92 84 00 	sts	0x0084, r1
}
     706:	ff 91       	pop	r31
     708:	ef 91       	pop	r30
     70a:	9f 91       	pop	r25
     70c:	8f 91       	pop	r24
     70e:	7f 91       	pop	r23
     710:	6f 91       	pop	r22
     712:	5f 91       	pop	r21
     714:	4f 91       	pop	r20
     716:	0f 90       	pop	r0
     718:	0f be       	out	0x3f, r0	; 63
     71a:	0f 90       	pop	r0
     71c:	1f 90       	pop	r1
     71e:	18 95       	reti

00000720 <__vector_13>:

// 16-bit Timer overflow
ISR(TIMER1_OVF_vect){
     720:	1f 92       	push	r1
     722:	0f 92       	push	r0
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	0f 92       	push	r0
     728:	11 24       	eor	r1, r1
     72a:	4f 93       	push	r20
     72c:	5f 93       	push	r21
     72e:	6f 93       	push	r22
     730:	7f 93       	push	r23
     732:	8f 93       	push	r24
     734:	9f 93       	push	r25
     736:	ef 93       	push	r30
     738:	ff 93       	push	r31
    meas_array[tacho_n] = 0xffffffff;
     73a:	80 91 ee 01 	lds	r24, 0x01EE
     73e:	90 91 ef 01 	lds	r25, 0x01EF
     742:	fc 01       	movw	r30, r24
     744:	ee 0f       	add	r30, r30
     746:	ff 1f       	adc	r31, r31
     748:	ee 0f       	add	r30, r30
     74a:	ff 1f       	adc	r31, r31
     74c:	ed 5c       	subi	r30, 0xCD	; 205
     74e:	fd 4f       	sbci	r31, 0xFD	; 253
     750:	4f ef       	ldi	r20, 0xFF	; 255
     752:	5f ef       	ldi	r21, 0xFF	; 255
     754:	ba 01       	movw	r22, r20
     756:	40 83       	st	Z, r20
     758:	51 83       	std	Z+1, r21	; 0x01
     75a:	62 83       	std	Z+2, r22	; 0x02
     75c:	73 83       	std	Z+3, r23	; 0x03
    if( tacho_n == Nmed-1 ) tacho_n=0;
     75e:	88 30       	cpi	r24, 0x08	; 8
     760:	91 05       	cpc	r25, r1
     762:	29 f4       	brne	.+10     	; 0x76e <__vector_13+0x4e>
     764:	10 92 ef 01 	sts	0x01EF, r1
     768:	10 92 ee 01 	sts	0x01EE, r1
     76c:	05 c0       	rjmp	.+10     	; 0x778 <__vector_13+0x58>
    else                    tacho_n++;
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	90 93 ef 01 	sts	0x01EF, r25
     774:	80 93 ee 01 	sts	0x01EE, r24
    TCNT1 = 0;
     778:	10 92 85 00 	sts	0x0085, r1
     77c:	10 92 84 00 	sts	0x0084, r1
}
     780:	ff 91       	pop	r31
     782:	ef 91       	pop	r30
     784:	9f 91       	pop	r25
     786:	8f 91       	pop	r24
     788:	7f 91       	pop	r23
     78a:	6f 91       	pop	r22
     78c:	5f 91       	pop	r21
     78e:	4f 91       	pop	r20
     790:	0f 90       	pop	r0
     792:	0f be       	out	0x3f, r0	; 63
     794:	0f 90       	pop	r0
     796:	1f 90       	pop	r1
     798:	18 95       	reti

0000079a <__vector_default>:

// Bad ISR interrput detector for debugging
ISR(BADISR_vect){
     79a:	1f 92       	push	r1
     79c:	0f 92       	push	r0
     79e:	0f b6       	in	r0, 0x3f	; 63
     7a0:	0f 92       	push	r0
     7a2:	11 24       	eor	r1, r1
    cli();    // これ以上割り込ませない
     7a4:	f8 94       	cli
    lcd_locate(0,0);
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	c1 dd       	rcall	.-1150   	; 0x32e <lcd_locate>
    lcd_set_str("BADISR ERROR");
     7ac:	82 e0       	ldi	r24, 0x02	; 2
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	d3 dd       	rcall	.-1114   	; 0x358 <lcd_set_str>
     7b2:	ff cf       	rjmp	.-2      	; 0x7b2 <__vector_default+0x18>

000007b4 <USARTinit>:
#define UBRR FOSC/16/BAUD-1 
*/

// USART initialize
void USARTinit(unsigned int ubrr){
	UBRR0H = (unsigned char)(ubrr>>8);
     7b4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     7b8:	80 93 c4 00 	sts	0x00C4, r24
								//   '000' : 5bit
								//   '001' : 6bit
								//   '010' : 7bit
								//   '011' : 8bit
	unsigned int U2X = 0;		// Over clocking operation
	UCSR0B = (RCIE<<7)|(TCIE<<6)|(TRIE<<5)|(RE<<4)|(TE<<3)|((Nb>>2)<<2);
     7bc:	80 e9       	ldi	r24, 0x90	; 144
     7be:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (Mode<<6)|(Pari<<4)|(STPB<<3)|(Nb<<1)|(CLKE);
     7c2:	86 e2       	ldi	r24, 0x26	; 38
     7c4:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0A = U2X<<1;
     7c8:	10 92 c0 00 	sts	0x00C0, r1
}
     7cc:	08 95       	ret

000007ce <USART_transmit>:

// USART transmit
void USART_transmit(unsigned char data){
	while(!(USART_STATUS & (1<<UDRE0)));	// Wait until tx buffer is empty
     7ce:	90 91 c0 00 	lds	r25, 0x00C0
     7d2:	95 ff       	sbrs	r25, 5
     7d4:	fc cf       	rjmp	.-8      	; 0x7ce <USART_transmit>
	UDR0 = data;
     7d6:	80 93 c6 00 	sts	0x00C6, r24
}
     7da:	08 95       	ret

000007dc <USART_receive>:


// USART receive without wait & Error rejection
unsigned char USART_receive(void){
	return UDR0;
     7dc:	80 91 c6 00 	lds	r24, 0x00C6
}
     7e0:	08 95       	ret

000007e2 <USART_receive_woTO>:

// USART receive w/o. Time-out
unsigned char USART_receive_woTO(void){
	unsigned char error_data;
	while(!(USART_STATUS & (1<<RXC0)));	// Wait receive process
     7e2:	80 91 c0 00 	lds	r24, 0x00C0
     7e6:	87 ff       	sbrs	r24, 7
     7e8:	fc cf       	rjmp	.-8      	; 0x7e2 <USART_receive_woTO>
	if ( !( ( USART_STATUS & (1<< FE0))
     7ea:	20 91 c0 00 	lds	r18, 0x00C0
	      | ( USART_STATUS & (1<<UPE0)) ) ){	// detect framing & parity error
     7ee:	80 91 c0 00 	lds	r24, 0x00C0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	84 70       	andi	r24, 0x04	; 4
     7f6:	90 70       	andi	r25, 0x00	; 0

// USART receive w/o. Time-out
unsigned char USART_receive_woTO(void){
	unsigned char error_data;
	while(!(USART_STATUS & (1<<RXC0)));	// Wait receive process
	if ( !( ( USART_STATUS & (1<< FE0))
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	20 71       	andi	r18, 0x10	; 16
     7fc:	30 70       	andi	r19, 0x00	; 0
	      | ( USART_STATUS & (1<<UPE0)) ) ){	// detect framing & parity error
     7fe:	82 2b       	or	r24, r18
     800:	93 2b       	or	r25, r19

// USART receive w/o. Time-out
unsigned char USART_receive_woTO(void){
	unsigned char error_data;
	while(!(USART_STATUS & (1<<RXC0)));	// Wait receive process
	if ( !( ( USART_STATUS & (1<< FE0))
     802:	00 97       	sbiw	r24, 0x00	; 0
     804:	19 f4       	brne	.+6      	; 0x80c <USART_receive_woTO+0x2a>
	      | ( USART_STATUS & (1<<UPE0)) ) ){	// detect framing & parity error
		return UDR0;
     806:	80 91 c6 00 	lds	r24, 0x00C6
     80a:	08 95       	ret
	}else{
		error_data = UDR0;
     80c:	80 91 c6 00 	lds	r24, 0x00C6
		return 0xff;
     810:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
     812:	08 95       	ret

00000814 <USART_receive_wTO>:
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	95 e0       	ldi	r25, 0x05	; 5
     818:	20 91 c0 00 	lds	r18, 0x00C0
     81c:	27 ff       	sbrs	r18, 7
     81e:	15 c0       	rjmp	.+42     	; 0x84a <USART_receive_wTO+0x36>
     820:	20 91 c0 00 	lds	r18, 0x00C0
     824:	80 91 c0 00 	lds	r24, 0x00C0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	84 70       	andi	r24, 0x04	; 4
     82c:	90 70       	andi	r25, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	20 71       	andi	r18, 0x10	; 16
     832:	30 70       	andi	r19, 0x00	; 0
     834:	82 2b       	or	r24, r18
     836:	93 2b       	or	r25, r19
     838:	00 97       	sbiw	r24, 0x00	; 0
     83a:	19 f4       	brne	.+6      	; 0x842 <USART_receive_wTO+0x2e>
     83c:	80 91 c6 00 	lds	r24, 0x00C6
     840:	08 95       	ret
     842:	80 91 c6 00 	lds	r24, 0x00C6
     846:	8f ef       	ldi	r24, 0xFF	; 255
     848:	08 95       	ret
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	29 f7       	brne	.-54     	; 0x818 <USART_receive_wTO+0x4>
     84e:	8f ef       	ldi	r24, 0xFF	; 255
     850:	08 95       	ret

00000852 <main>:
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
     85a:	ee 97       	sbiw	r28, 0x3e	; 62
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	f8 94       	cli
     860:	de bf       	out	0x3e, r29	; 62
     862:	0f be       	out	0x3f, r0	; 63
     864:	cd bf       	out	0x3d, r28	; 61
     866:	9d dc       	rcall	.-1734   	; 0x1a2 <SoftSPI_Init>
     868:	f2 dc       	rcall	.-1564   	; 0x24e <lcd_init>
     86a:	2a de       	rcall	.-940    	; 0x4c0 <timer1_init>
     86c:	89 e1       	ldi	r24, 0x19	; 25
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	a1 df       	rcall	.-190    	; 0x7b4 <USARTinit>
     872:	89 dc       	rcall	.-1774   	; 0x186 <ExtInterrupt_init>
     874:	fb db       	rcall	.-2058   	; 0x6c <BarMeter_init>
     876:	56 9a       	sbi	0x0a, 6	; 10
     878:	38 de       	rcall	.-912    	; 0x4ea <PWM_init>
     87a:	16 de       	rcall	.-980    	; 0x4a8 <set_initial_t_id>
     87c:	de 01       	movw	r26, r28
     87e:	9e 96       	adiw	r26, 0x2e	; 46
     880:	e5 eb       	ldi	r30, 0xB5	; 181
     882:	f1 e0       	ldi	r31, 0x01	; 1
     884:	8e e0       	ldi	r24, 0x0E	; 14
     886:	01 90       	ld	r0, Z+
     888:	0d 92       	st	X+, r0
     88a:	81 50       	subi	r24, 0x01	; 1
     88c:	e1 f7       	brne	.-8      	; 0x886 <main+0x34>
     88e:	de 01       	movw	r26, r28
     890:	90 96       	adiw	r26, 0x20	; 32
     892:	e3 ec       	ldi	r30, 0xC3	; 195
     894:	f1 e0       	ldi	r31, 0x01	; 1
     896:	8e e0       	ldi	r24, 0x0E	; 14
     898:	01 90       	ld	r0, Z+
     89a:	0d 92       	st	X+, r0
     89c:	81 50       	subi	r24, 0x01	; 1
     89e:	e1 f7       	brne	.-8      	; 0x898 <main+0x46>
     8a0:	de 01       	movw	r26, r28
     8a2:	59 96       	adiw	r26, 0x19	; 25
     8a4:	e1 ed       	ldi	r30, 0xD1	; 209
     8a6:	f1 e0       	ldi	r31, 0x01	; 1
     8a8:	87 e0       	ldi	r24, 0x07	; 7
     8aa:	01 90       	ld	r0, Z+
     8ac:	0d 92       	st	X+, r0
     8ae:	81 50       	subi	r24, 0x01	; 1
     8b0:	e1 f7       	brne	.-8      	; 0x8aa <main+0x58>
     8b2:	de 01       	movw	r26, r28
     8b4:	52 96       	adiw	r26, 0x12	; 18
     8b6:	e8 ed       	ldi	r30, 0xD8	; 216
     8b8:	f1 e0       	ldi	r31, 0x01	; 1
     8ba:	87 e0       	ldi	r24, 0x07	; 7
     8bc:	01 90       	ld	r0, Z+
     8be:	0d 92       	st	X+, r0
     8c0:	81 50       	subi	r24, 0x01	; 1
     8c2:	e1 f7       	brne	.-8      	; 0x8bc <main+0x6a>
     8c4:	89 e3       	ldi	r24, 0x39	; 57
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	90 93 f8 01 	sts	0x01F8, r25
     8cc:	80 93 f7 01 	sts	0x01F7, r24
     8d0:	2f e3       	ldi	r18, 0x3F	; 63
     8d2:	31 e0       	ldi	r19, 0x01	; 1
     8d4:	30 93 fa 01 	sts	0x01FA, r19
     8d8:	20 93 f9 01 	sts	0x01F9, r18
     8dc:	45 e4       	ldi	r20, 0x45	; 69
     8de:	51 e0       	ldi	r21, 0x01	; 1
     8e0:	50 93 fc 01 	sts	0x01FC, r21
     8e4:	40 93 fb 01 	sts	0x01FB, r20
     8e8:	4b e4       	ldi	r20, 0x4B	; 75
     8ea:	51 e0       	ldi	r21, 0x01	; 1
     8ec:	50 93 fe 01 	sts	0x01FE, r21
     8f0:	40 93 fd 01 	sts	0x01FD, r20
     8f4:	42 e5       	ldi	r20, 0x52	; 82
     8f6:	51 e0       	ldi	r21, 0x01	; 1
     8f8:	50 93 00 02 	sts	0x0200, r21
     8fc:	40 93 ff 01 	sts	0x01FF, r20
     900:	48 e5       	ldi	r20, 0x58	; 88
     902:	51 e0       	ldi	r21, 0x01	; 1
     904:	50 93 02 02 	sts	0x0202, r21
     908:	40 93 01 02 	sts	0x0201, r20
     90c:	4e e5       	ldi	r20, 0x5E	; 94
     90e:	51 e0       	ldi	r21, 0x01	; 1
     910:	50 93 04 02 	sts	0x0204, r21
     914:	40 93 03 02 	sts	0x0203, r20
     918:	46 e6       	ldi	r20, 0x66	; 102
     91a:	51 e0       	ldi	r21, 0x01	; 1
     91c:	50 93 5f 02 	sts	0x025F, r21
     920:	40 93 5e 02 	sts	0x025E, r20
     924:	49 e6       	ldi	r20, 0x69	; 105
     926:	51 e0       	ldi	r21, 0x01	; 1
     928:	50 93 61 02 	sts	0x0261, r21
     92c:	40 93 60 02 	sts	0x0260, r20
     930:	4c e6       	ldi	r20, 0x6C	; 108
     932:	51 e0       	ldi	r21, 0x01	; 1
     934:	50 93 63 02 	sts	0x0263, r21
     938:	40 93 62 02 	sts	0x0262, r20
     93c:	4f e6       	ldi	r20, 0x6F	; 111
     93e:	51 e0       	ldi	r21, 0x01	; 1
     940:	50 93 65 02 	sts	0x0265, r21
     944:	40 93 64 02 	sts	0x0264, r20
     948:	42 e7       	ldi	r20, 0x72	; 114
     94a:	51 e0       	ldi	r21, 0x01	; 1
     94c:	50 93 67 02 	sts	0x0267, r21
     950:	40 93 66 02 	sts	0x0266, r20
     954:	45 e7       	ldi	r20, 0x75	; 117
     956:	51 e0       	ldi	r21, 0x01	; 1
     958:	50 93 69 02 	sts	0x0269, r21
     95c:	40 93 68 02 	sts	0x0268, r20
     960:	48 e7       	ldi	r20, 0x78	; 120
     962:	51 e0       	ldi	r21, 0x01	; 1
     964:	50 93 6b 02 	sts	0x026B, r21
     968:	40 93 6a 02 	sts	0x026A, r20
     96c:	90 93 12 02 	sts	0x0212, r25
     970:	80 93 11 02 	sts	0x0211, r24
     974:	30 93 14 02 	sts	0x0214, r19
     978:	20 93 13 02 	sts	0x0213, r18
     97c:	8b e7       	ldi	r24, 0x7B	; 123
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	90 93 16 02 	sts	0x0216, r25
     984:	80 93 15 02 	sts	0x0215, r24
     988:	85 e8       	ldi	r24, 0x85	; 133
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	90 93 18 02 	sts	0x0218, r25
     990:	80 93 17 02 	sts	0x0217, r24
     994:	80 e9       	ldi	r24, 0x90	; 144
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	90 93 1a 02 	sts	0x021A, r25
     99c:	80 93 19 02 	sts	0x0219, r24
     9a0:	8b e9       	ldi	r24, 0x9B	; 155
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	90 93 1c 02 	sts	0x021C, r25
     9a8:	80 93 1b 02 	sts	0x021B, r24
     9ac:	85 ea       	ldi	r24, 0xA5	; 165
     9ae:	91 e0       	ldi	r25, 0x01	; 1
     9b0:	90 93 1e 02 	sts	0x021E, r25
     9b4:	80 93 1d 02 	sts	0x021D, r24
     9b8:	79 e1       	ldi	r23, 0x19	; 25
     9ba:	a7 2e       	mov	r10, r23
     9bc:	b1 2c       	mov	r11, r1
     9be:	ac 0e       	add	r10, r28
     9c0:	bd 1e       	adc	r11, r29
     9c2:	e2 e1       	ldi	r30, 0x12	; 18
     9c4:	8e 2e       	mov	r8, r30
     9c6:	91 2c       	mov	r9, r1
     9c8:	8c 0e       	add	r8, r28
     9ca:	9d 1e       	adc	r9, r29
     9cc:	00 e0       	ldi	r16, 0x00	; 0
     9ce:	10 e0       	ldi	r17, 0x00	; 0
     9d0:	fb e0       	ldi	r31, 0x0B	; 11
     9d2:	ef 2e       	mov	r14, r31
     9d4:	26 c0       	rjmp	.+76     	; 0xa22 <main+0x1d0>
     9d6:	4f 5f       	subi	r20, 0xFF	; 255
     9d8:	24 2f       	mov	r18, r20
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	28 17       	cp	r18, r24
     9de:	39 07       	cpc	r19, r25
     9e0:	d4 f3       	brlt	.-12     	; 0x9d6 <main+0x184>
     9e2:	f8 01       	movw	r30, r16
     9e4:	ee 0f       	add	r30, r30
     9e6:	ff 1f       	adc	r31, r31
     9e8:	e9 50       	subi	r30, 0x09	; 9
     9ea:	fe 4f       	sbci	r31, 0xFE	; 254
     9ec:	80 81       	ld	r24, Z
     9ee:	91 81       	ldd	r25, Z+1	; 0x01
     9f0:	86 dd       	rcall	.-1268   	; 0x4fe <StrLength>
     9f2:	f8 01       	movw	r30, r16
     9f4:	e9 5a       	subi	r30, 0xA9	; 169
     9f6:	fd 4f       	sbci	r31, 0xFD	; 253
     9f8:	80 83       	st	Z, r24
     9fa:	eb e0       	ldi	r30, 0x0B	; 11
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	ec 0f       	add	r30, r28
     a00:	fd 1f       	adc	r31, r29
     a02:	e0 0f       	add	r30, r16
     a04:	f1 1f       	adc	r31, r17
     a06:	9e 2d       	mov	r25, r14
     a08:	9c 19       	sub	r25, r12
     a0a:	21 e0       	ldi	r18, 0x01	; 1
     a0c:	cf 14       	cp	r12, r15
     a0e:	09 f4       	brne	.+2      	; 0xa12 <main+0x1c0>
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	92 1b       	sub	r25, r18
     a14:	98 1b       	sub	r25, r24
     a16:	90 83       	st	Z, r25
     a18:	0f 5f       	subi	r16, 0xFF	; 255
     a1a:	1f 4f       	sbci	r17, 0xFF	; 255
     a1c:	07 30       	cpi	r16, 0x07	; 7
     a1e:	11 05       	cpc	r17, r1
     a20:	61 f0       	breq	.+24     	; 0xa3a <main+0x1e8>
     a22:	d5 01       	movw	r26, r10
     a24:	cd 90       	ld	r12, X+
     a26:	5d 01       	movw	r10, r26
     a28:	f4 01       	movw	r30, r8
     a2a:	f1 90       	ld	r15, Z+
     a2c:	4f 01       	movw	r8, r30
     a2e:	8c 2d       	mov	r24, r12
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	8f 19       	sub	r24, r15
     a34:	91 09       	sbc	r25, r1
     a36:	40 e0       	ldi	r20, 0x00	; 0
     a38:	cf cf       	rjmp	.-98     	; 0x9d8 <main+0x186>
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	9e 83       	std	Y+6, r25	; 0x06
     a40:	8d 83       	std	Y+5, r24	; 0x05
     a42:	80 e1       	ldi	r24, 0x10	; 16
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	98 87       	std	Y+8, r25	; 0x08
     a48:	8f 83       	std	Y+7, r24	; 0x07
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	91 e0       	ldi	r25, 0x01	; 1
     a4e:	9a 87       	std	Y+10, r25	; 0x0a
     a50:	89 87       	std	Y+9, r24	; 0x09
     a52:	8f e7       	ldi	r24, 0x7F	; 127
     a54:	98 e3       	ldi	r25, 0x38	; 56
     a56:	a1 e0       	ldi	r26, 0x01	; 1
     a58:	81 50       	subi	r24, 0x01	; 1
     a5a:	90 40       	sbci	r25, 0x00	; 0
     a5c:	a0 40       	sbci	r26, 0x00	; 0
     a5e:	e1 f7       	brne	.-8      	; 0xa58 <main+0x206>
     a60:	00 c0       	rjmp	.+0      	; 0xa62 <main+0x210>
     a62:	00 00       	nop
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	62 dc       	rcall	.-1852   	; 0x32e <lcd_locate>
     a6a:	04 e2       	ldi	r16, 0x24	; 36
     a6c:	11 e0       	ldi	r17, 0x01	; 1
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	d8 01       	movw	r26, r16
     a72:	8d 91       	ld	r24, X+
     a74:	8d 01       	movw	r16, r26
     a76:	9e af       	sts	0x7e, r25
     a78:	4c dc       	rcall	.-1896   	; 0x312 <lcd_set_char>
     a7a:	ef e3       	ldi	r30, 0x3F	; 63
     a7c:	fc e9       	ldi	r31, 0x9C	; 156
     a7e:	31 97       	sbiw	r30, 0x01	; 1
     a80:	f1 f7       	brne	.-4      	; 0xa7e <main+0x22c>
     a82:	00 c0       	rjmp	.+0      	; 0xa84 <main+0x232>
     a84:	00 00       	nop
     a86:	9e ad       	sts	0x6e, r25
     a88:	9f 5f       	subi	r25, 0xFF	; 255
     a8a:	90 31       	cpi	r25, 0x10	; 16
     a8c:	89 f7       	brne	.-30     	; 0xa70 <main+0x21e>
     a8e:	82 e0       	ldi	r24, 0x02	; 2
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	4d dc       	rcall	.-1894   	; 0x32e <lcd_locate>
     a94:	0f e0       	ldi	r16, 0x0F	; 15
     a96:	11 e0       	ldi	r17, 0x01	; 1
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	d8 01       	movw	r26, r16
     a9c:	8d 91       	ld	r24, X+
     a9e:	8d 01       	movw	r16, r26
     aa0:	9e af       	sts	0x7e, r25
     aa2:	37 dc       	rcall	.-1938   	; 0x312 <lcd_set_char>
     aa4:	ef e3       	ldi	r30, 0x3F	; 63
     aa6:	fc e9       	ldi	r31, 0x9C	; 156
     aa8:	31 97       	sbiw	r30, 0x01	; 1
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <main+0x256>
     aac:	00 c0       	rjmp	.+0      	; 0xaae <main+0x25c>
     aae:	00 00       	nop
     ab0:	9e ad       	sts	0x6e, r25
     ab2:	9f 5f       	subi	r25, 0xFF	; 255
     ab4:	90 31       	cpi	r25, 0x10	; 16
     ab6:	89 f7       	brne	.-30     	; 0xa9a <main+0x248>
     ab8:	8f ef       	ldi	r24, 0xFF	; 255
     aba:	92 e5       	ldi	r25, 0x52	; 82
     abc:	a7 e0       	ldi	r26, 0x07	; 7
     abe:	81 50       	subi	r24, 0x01	; 1
     ac0:	90 40       	sbci	r25, 0x00	; 0
     ac2:	a0 40       	sbci	r26, 0x00	; 0
     ac4:	e1 f7       	brne	.-8      	; 0xabe <main+0x26c>
     ac6:	00 c0       	rjmp	.+0      	; 0xac8 <main+0x276>
     ac8:	00 00       	nop
     aca:	00 e0       	ldi	r16, 0x00	; 0
     acc:	80 2f       	mov	r24, r16
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	2e dc       	rcall	.-1956   	; 0x32e <lcd_locate>
     ad2:	10 e1       	ldi	r17, 0x10	; 16
     ad4:	80 e2       	ldi	r24, 0x20	; 32
     ad6:	1d dc       	rcall	.-1990   	; 0x312 <lcd_set_char>
     ad8:	af e3       	ldi	r26, 0x3F	; 63
     ada:	bc e9       	ldi	r27, 0x9C	; 156
     adc:	11 97       	sbiw	r26, 0x01	; 1
     ade:	f1 f7       	brne	.-4      	; 0xadc <main+0x28a>
     ae0:	00 c0       	rjmp	.+0      	; 0xae2 <main+0x290>
     ae2:	00 00       	nop
     ae4:	11 50       	subi	r17, 0x01	; 1
     ae6:	b1 f7       	brne	.-20     	; 0xad4 <main+0x282>
     ae8:	0f 5f       	subi	r16, 0xFF	; 255
     aea:	04 30       	cpi	r16, 0x04	; 4
     aec:	79 f7       	brne	.-34     	; 0xacc <main+0x27a>
     aee:	78 94       	sei
     af0:	5a e0       	ldi	r21, 0x0A	; 10
     af2:	25 2e       	mov	r2, r21
     af4:	31 2c       	mov	r3, r1
     af6:	fe 01       	movw	r30, r28
     af8:	35 96       	adiw	r30, 0x05	; 5
     afa:	fd af       	sts	0x7d, r31
     afc:	ec af       	sts	0x7c, r30
     afe:	80 91 e3 01 	lds	r24, 0x01E3
     b02:	88 23       	and	r24, r24
     b04:	89 f0       	breq	.+34     	; 0xb28 <main+0x2d6>
     b06:	61 dd       	rcall	.-1342   	; 0x5ca <DisplayItemInfo>
     b08:	20 91 ed 01 	lds	r18, 0x01ED
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	c9 01       	movw	r24, r18
     b10:	83 70       	andi	r24, 0x03	; 3
     b12:	90 70       	andi	r25, 0x00	; 0
     b14:	95 95       	asr	r25
     b16:	87 95       	ror	r24
     b18:	20 ff       	sbrs	r18, 0
     b1a:	02 c0       	rjmp	.+4      	; 0xb20 <main+0x2ce>
     b1c:	68 e0       	ldi	r22, 0x08	; 8
     b1e:	01 c0       	rjmp	.+2      	; 0xb22 <main+0x2d0>
     b20:	67 e0       	ldi	r22, 0x07	; 7
     b22:	05 dc       	rcall	.-2038   	; 0x32e <lcd_locate>
     b24:	10 92 e3 01 	sts	0x01E3, r1
     b28:	19 e0       	ldi	r17, 0x09	; 9
     b2a:	41 2e       	mov	r4, r17
     b2c:	12 e0       	ldi	r17, 0x02	; 2
     b2e:	51 2e       	mov	r5, r17
     b30:	03 e2       	ldi	r16, 0x23	; 35
     b32:	60 2e       	mov	r6, r16
     b34:	02 e0       	ldi	r16, 0x02	; 2
     b36:	70 2e       	mov	r7, r16
     b38:	88 24       	eor	r8, r8
     b3a:	99 24       	eor	r9, r9
     b3c:	f8 2c       	mov	r15, r8
     b3e:	d2 01       	movw	r26, r4
     b40:	ad 90       	ld	r10, X+
     b42:	2d 01       	movw	r4, r26
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	d3 01       	movw	r26, r6
     b4a:	a8 0f       	add	r26, r24
     b4c:	b9 1f       	adc	r27, r25
     b4e:	11 96       	adiw	r26, 0x01	; 1
     b50:	2c 91       	ld	r18, X
     b52:	11 97       	sbiw	r26, 0x01	; 1
     b54:	32 2f       	mov	r19, r18
     b56:	31 54       	subi	r19, 0x41	; 65
     b58:	36 30       	cpi	r19, 0x06	; 6
     b5a:	18 f0       	brcs	.+6      	; 0xb62 <main+0x310>
     b5c:	20 53       	subi	r18, 0x30	; 48
     b5e:	2a 30       	cpi	r18, 0x0A	; 10
     b60:	38 f4       	brcc	.+14     	; 0xb70 <main+0x31e>
     b62:	01 96       	adiw	r24, 0x01	; 1
     b64:	83 30       	cpi	r24, 0x03	; 3
     b66:	91 05       	cpc	r25, r1
     b68:	79 f7       	brne	.-34     	; 0xb48 <main+0x2f6>
     b6a:	ee 24       	eor	r14, r14
     b6c:	e3 94       	inc	r14
     b6e:	01 c0       	rjmp	.+2      	; 0xb72 <main+0x320>
     b70:	ee 24       	eor	r14, r14
     b72:	bb 24       	eor	r11, r11
     b74:	85 01       	movw	r16, r10
     b76:	09 5a       	subi	r16, 0xA9	; 169
     b78:	1d 4f       	sbci	r17, 0xFD	; 253
     b7a:	8f 2d       	mov	r24, r15
     b7c:	f8 01       	movw	r30, r16
     b7e:	60 81       	ld	r22, Z
     b80:	d6 db       	rcall	.-2132   	; 0x32e <lcd_locate>
     b82:	cc 24       	eor	r12, r12
     b84:	03 c0       	rjmp	.+6      	; 0xb8c <main+0x33a>
     b86:	80 e2       	ldi	r24, 0x20	; 32
     b88:	c4 db       	rcall	.-2168   	; 0x312 <lcd_set_char>
     b8a:	c3 94       	inc	r12
     b8c:	d8 01       	movw	r26, r16
     b8e:	6c 91       	ld	r22, X
     b90:	8c 2d       	mov	r24, r12
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	91 01       	movw	r18, r2
     b96:	26 1b       	sub	r18, r22
     b98:	31 09       	sbc	r19, r1
     b9a:	28 17       	cp	r18, r24
     b9c:	39 07       	cpc	r19, r25
     b9e:	9c f7       	brge	.-26     	; 0xb86 <main+0x334>
     ba0:	8f 2d       	mov	r24, r15
     ba2:	c5 db       	rcall	.-2166   	; 0x32e <lcd_locate>
     ba4:	00 e0       	ldi	r16, 0x00	; 0
     ba6:	bb e0       	ldi	r27, 0x0B	; 11
     ba8:	cb 2e       	mov	r12, r27
     baa:	d1 2c       	mov	r13, r1
     bac:	cc 0e       	add	r12, r28
     bae:	dd 1e       	adc	r13, r29
     bb0:	ca 0c       	add	r12, r10
     bb2:	db 1c       	adc	r13, r11
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <main+0x36a>
     bb6:	80 e2       	ldi	r24, 0x20	; 32
     bb8:	ac db       	rcall	.-2216   	; 0x312 <lcd_set_char>
     bba:	0f 5f       	subi	r16, 0xFF	; 255
     bbc:	20 2f       	mov	r18, r16
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	f6 01       	movw	r30, r12
     bc2:	80 81       	ld	r24, Z
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	28 17       	cp	r18, r24
     bca:	39 07       	cpc	r19, r25
     bcc:	a4 f3       	brlt	.-24     	; 0xbb6 <main+0x364>
     bce:	f1 e0       	ldi	r31, 0x01	; 1
     bd0:	ef 16       	cp	r14, r31
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <main+0x384>
     bd4:	a4 c0       	rjmp	.+328    	; 0xd1e <main+0x4cc>
     bd6:	74 01       	movw	r14, r8
     bd8:	ee 0c       	add	r14, r14
     bda:	ff 1c       	adc	r15, r15
     bdc:	ee 0c       	add	r14, r14
     bde:	ff 1c       	adc	r15, r15
     be0:	84 e2       	ldi	r24, 0x24	; 36
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	e8 0e       	add	r14, r24
     be6:	f9 1e       	adc	r15, r25
     be8:	de 01       	movw	r26, r28
     bea:	12 96       	adiw	r26, 0x02	; 2
     bec:	be 01       	movw	r22, r28
     bee:	65 5f       	subi	r22, 0xF5	; 245
     bf0:	7f 4f       	sbci	r23, 0xFF	; 255
     bf2:	00 e0       	ldi	r16, 0x00	; 0
     bf4:	10 e0       	ldi	r17, 0x00	; 0
     bf6:	f7 01       	movw	r30, r14
     bf8:	21 91       	ld	r18, Z+
     bfa:	7f 01       	movw	r14, r30
     bfc:	82 2f       	mov	r24, r18
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	80 7f       	andi	r24, 0xF0	; 240
     c02:	90 70       	andi	r25, 0x00	; 0
     c04:	80 33       	cpi	r24, 0x30	; 48
     c06:	91 05       	cpc	r25, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <main+0x3bc>
     c0a:	2f 70       	andi	r18, 0x0F	; 15
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <main+0x3c6>
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	b9 f4       	brne	.+46     	; 0xc42 <main+0x3f0>
     c14:	2f 70       	andi	r18, 0x0F	; 15
     c16:	27 5f       	subi	r18, 0xF7	; 247
     c18:	2c 93       	st	X, r18
     c1a:	8d 91       	ld	r24, X+
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	fb 01       	movw	r30, r22
     c20:	32 91       	ld	r19, -Z
     c22:	22 91       	ld	r18, -Z
     c24:	bf 01       	movw	r22, r30
     c26:	82 9f       	mul	r24, r18
     c28:	a0 01       	movw	r20, r0
     c2a:	83 9f       	mul	r24, r19
     c2c:	50 0d       	add	r21, r0
     c2e:	92 9f       	mul	r25, r18
     c30:	50 0d       	add	r21, r0
     c32:	11 24       	eor	r1, r1
     c34:	04 0f       	add	r16, r20
     c36:	15 1f       	adc	r17, r21
     c38:	8c ad       	sts	0x6c, r24
     c3a:	9d ad       	sts	0x6d, r25
     c3c:	e8 17       	cp	r30, r24
     c3e:	f9 07       	cpc	r31, r25
     c40:	d1 f6       	brne	.-76     	; 0xbf6 <main+0x3a4>
     c42:	b8 01       	movw	r22, r16
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	ff d1       	rcall	.+1022   	; 0x1048 <__floatunsisf>
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	43 e1       	ldi	r20, 0x13	; 19
     c50:	55 e4       	ldi	r21, 0x45	; 69
     c52:	66 d1       	rcall	.+716    	; 0xf20 <__divsf3>
     c54:	6b 01       	movw	r12, r22
     c56:	7c 01       	movw	r14, r24
     c58:	85 01       	movw	r16, r10
     c5a:	00 0f       	add	r16, r16
     c5c:	11 1f       	adc	r17, r17
     c5e:	a1 e0       	ldi	r26, 0x01	; 1
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	ac 0f       	add	r26, r28
     c64:	bd 1f       	adc	r27, r29
     c66:	0a 0f       	add	r16, r26
     c68:	1b 1f       	adc	r17, r27
     c6a:	f8 01       	movw	r30, r16
     c6c:	65 a5       	lds	r22, 0x65
     c6e:	76 a5       	lds	r23, 0x66
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	e9 d1       	rcall	.+978    	; 0x1048 <__floatunsisf>
     c76:	9b 01       	movw	r18, r22
     c78:	ac 01       	movw	r20, r24
     c7a:	c7 01       	movw	r24, r14
     c7c:	b6 01       	movw	r22, r12
     c7e:	96 d2       	rcall	.+1324   	; 0x11ac <__mulsf3>
     c80:	6b 01       	movw	r12, r22
     c82:	7c 01       	movw	r14, r24
     c84:	d8 01       	movw	r26, r16
     c86:	5f 96       	adiw	r26, 0x1f	; 31
     c88:	6d 91       	ld	r22, X+
     c8a:	7c 91       	ld	r23, X
     c8c:	90 97       	sbiw	r26, 0x20	; 32
     c8e:	88 27       	eor	r24, r24
     c90:	77 fd       	sbrc	r23, 7
     c92:	80 95       	com	r24
     c94:	98 2f       	mov	r25, r24
     c96:	da d1       	rcall	.+948    	; 0x104c <__floatsisf>
     c98:	9b 01       	movw	r18, r22
     c9a:	ac 01       	movw	r20, r24
     c9c:	c7 01       	movw	r24, r14
     c9e:	b6 01       	movw	r22, r12
     ca0:	d7 d0       	rcall	.+430    	; 0xe50 <__addsf3>
     ca2:	f6 2f       	mov	r31, r22
     ca4:	e7 2f       	mov	r30, r23
     ca6:	38 2f       	mov	r19, r24
     ca8:	29 2f       	mov	r18, r25
     caa:	46 2f       	mov	r20, r22
     cac:	57 2f       	mov	r21, r23
     cae:	68 2f       	mov	r22, r24
     cb0:	79 2f       	mov	r23, r25
     cb2:	6a 01       	movw	r12, r20
     cb4:	7b 01       	movw	r14, r22
     cb6:	8f 2f       	mov	r24, r31
     cb8:	9e 2f       	mov	r25, r30
     cba:	a3 2f       	mov	r26, r19
     cbc:	b2 2f       	mov	r27, r18
     cbe:	bc 01       	movw	r22, r24
     cc0:	cd 01       	movw	r24, r26
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	a9 01       	movw	r20, r18
     cc8:	27 d1       	rcall	.+590    	; 0xf18 <__cmpsf2>
     cca:	87 ff       	sbrs	r24, 7
     ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <main+0x484>
     cce:	f7 fa       	bst	r15, 7
     cd0:	f0 94       	com	r15
     cd2:	f7 f8       	bld	r15, 7
     cd4:	f0 94       	com	r15
     cd6:	e2 e1       	ldi	r30, 0x12	; 18
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	ec 0f       	add	r30, r28
     cdc:	fd 1f       	adc	r31, r29
     cde:	ea 0d       	add	r30, r10
     ce0:	fb 1d       	adc	r31, r11
     ce2:	00 81       	ld	r16, Z
     ce4:	c7 01       	movw	r24, r14
     ce6:	b6 01       	movw	r22, r12
     ce8:	83 d1       	rcall	.+774    	; 0xff0 <__fixunssfsi>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	e9 e1       	ldi	r30, 0x19	; 25
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	ec 0f       	add	r30, r28
     cf4:	fd 1f       	adc	r31, r29
     cf6:	ea 0d       	add	r30, r10
     cf8:	fb 1d       	adc	r31, r11
     cfa:	40 81       	ld	r20, Z
     cfc:	50 e0       	ldi	r21, 0x00	; 0
     cfe:	40 1b       	sub	r20, r16
     d00:	51 09       	sbc	r21, r1
     d02:	60 2f       	mov	r22, r16
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	33 db       	rcall	.-2458   	; 0x36e <lcd_set_numeric>
     d08:	ef e1       	ldi	r30, 0x1F	; 31
     d0a:	fe e4       	ldi	r31, 0x4E	; 78
     d0c:	31 97       	sbiw	r30, 0x01	; 1
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <main+0x4ba>
     d10:	00 c0       	rjmp	.+0      	; 0xd12 <main+0x4c0>
     d12:	00 00       	nop
     d14:	14 c0       	rjmp	.+40     	; 0xd3e <main+0x4ec>
     d16:	8d e2       	ldi	r24, 0x2D	; 45
     d18:	fc da       	rcall	.-2568   	; 0x312 <lcd_set_char>
     d1a:	0f 5f       	subi	r16, 0xFF	; 255
     d1c:	08 c0       	rjmp	.+16     	; 0xd2e <main+0x4dc>
     d1e:	00 e0       	ldi	r16, 0x00	; 0
     d20:	e9 e1       	ldi	r30, 0x19	; 25
     d22:	ee 2e       	mov	r14, r30
     d24:	f1 2c       	mov	r15, r1
     d26:	ec 0e       	add	r14, r28
     d28:	fd 1e       	adc	r15, r29
     d2a:	ea 0c       	add	r14, r10
     d2c:	fb 1c       	adc	r15, r11
     d2e:	d7 01       	movw	r26, r14
     d30:	8c 91       	ld	r24, X
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	20 2f       	mov	r18, r16
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	28 17       	cp	r18, r24
     d3a:	39 07       	cpc	r19, r25
     d3c:	64 f3       	brlt	.-40     	; 0xd16 <main+0x4c4>
     d3e:	08 94       	sec
     d40:	81 1c       	adc	r8, r1
     d42:	91 1c       	adc	r9, r1
     d44:	e4 e0       	ldi	r30, 0x04	; 4
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	6e 0e       	add	r6, r30
     d4a:	7f 1e       	adc	r7, r31
     d4c:	f4 e0       	ldi	r31, 0x04	; 4
     d4e:	8f 16       	cp	r8, r31
     d50:	91 04       	cpc	r9, r1
     d52:	09 f0       	breq	.+2      	; 0xd56 <main+0x504>
     d54:	f3 ce       	rjmp	.-538    	; 0xb3c <main+0x2ea>
     d56:	63 e3       	ldi	r22, 0x33	; 51
     d58:	72 e0       	ldi	r23, 0x02	; 2
     d5a:	2c e6       	ldi	r18, 0x6C	; 108
     d5c:	32 e0       	ldi	r19, 0x02	; 2
     d5e:	49 e0       	ldi	r20, 0x09	; 9
     d60:	fb 01       	movw	r30, r22
     d62:	81 91       	ld	r24, Z+
     d64:	91 91       	ld	r25, Z+
     d66:	a1 91       	ld	r26, Z+
     d68:	b1 91       	ld	r27, Z+
     d6a:	bf 01       	movw	r22, r30
     d6c:	f9 01       	movw	r30, r18
     d6e:	81 93       	st	Z+, r24
     d70:	91 93       	st	Z+, r25
     d72:	a1 93       	st	Z+, r26
     d74:	b1 93       	st	Z+, r27
     d76:	9f 01       	movw	r18, r30
     d78:	41 50       	subi	r20, 0x01	; 1
     d7a:	91 f7       	brne	.-28     	; 0xd60 <main+0x50e>
     d7c:	cb db       	rcall	.-2154   	; 0x514 <BubbleSort>
     d7e:	80 91 8c 02 	lds	r24, 0x028C
     d82:	90 91 8d 02 	lds	r25, 0x028D
     d86:	a0 91 8e 02 	lds	r26, 0x028E
     d8a:	b0 91 8f 02 	lds	r27, 0x028F
     d8e:	8f 3f       	cpi	r24, 0xFF	; 255
     d90:	ff ef       	ldi	r31, 0xFF	; 255
     d92:	9f 07       	cpc	r25, r31
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	af 07       	cpc	r26, r31
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	bf 07       	cpc	r27, r31
     d9c:	20 f0       	brcs	.+8      	; 0xda6 <main+0x554>
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	dc 01       	movw	r26, r24
     da4:	1a c0       	rjmp	.+52     	; 0xdda <main+0x588>
     da6:	60 91 7c 02 	lds	r22, 0x027C
     daa:	70 91 7d 02 	lds	r23, 0x027D
     dae:	80 91 7e 02 	lds	r24, 0x027E
     db2:	90 91 7f 02 	lds	r25, 0x027F
     db6:	60 93 0d 02 	sts	0x020D, r22
     dba:	70 93 0e 02 	sts	0x020E, r23
     dbe:	80 93 0f 02 	sts	0x020F, r24
     dc2:	90 93 10 02 	sts	0x0210, r25
     dc6:	40 d1       	rcall	.+640    	; 0x1048 <__floatunsisf>
     dc8:	9b 01       	movw	r18, r22
     dca:	ac 01       	movw	r20, r24
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	74 e2       	ldi	r23, 0x24	; 36
     dd0:	84 ef       	ldi	r24, 0xF4	; 244
     dd2:	97 e4       	ldi	r25, 0x47	; 71
     dd4:	a5 d0       	rcall	.+330    	; 0xf20 <__divsf3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	80 93 05 02 	sts	0x0205, r24
     dde:	90 93 06 02 	sts	0x0206, r25
     de2:	a0 93 07 02 	sts	0x0207, r26
     de6:	b0 93 08 02 	sts	0x0208, r27
     dea:	60 91 05 02 	lds	r22, 0x0205
     dee:	70 91 06 02 	lds	r23, 0x0206
     df2:	80 91 07 02 	lds	r24, 0x0207
     df6:	90 91 08 02 	lds	r25, 0x0208
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e7       	ldi	r20, 0x70	; 112
     e00:	52 e4       	ldi	r21, 0x42	; 66
     e02:	d4 d1       	rcall	.+936    	; 0x11ac <__mulsf3>
     e04:	f5 d0       	rcall	.+490    	; 0xff0 <__fixunssfsi>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	80 93 1f 02 	sts	0x021F, r24
     e0e:	90 93 20 02 	sts	0x0220, r25
     e12:	a0 93 21 02 	sts	0x0221, r26
     e16:	b0 93 22 02 	sts	0x0222, r27
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	87 bd       	out	0x27, r24	; 39
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	6c e0       	ldi	r22, 0x0C	; 12
     e22:	85 da       	rcall	.-2806   	; 0x32e <lcd_locate>
     e24:	80 91 1f 02 	lds	r24, 0x021F
     e28:	90 91 20 02 	lds	r25, 0x0220
     e2c:	65 e0       	ldi	r22, 0x05	; 5
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	50 e0       	ldi	r21, 0x00	; 0
     e34:	9c da       	rcall	.-2760   	; 0x36e <lcd_set_numeric>
     e36:	81 eb       	ldi	r24, 0xB1	; 177
     e38:	91 e0       	ldi	r25, 0x01	; 1
     e3a:	8e da       	rcall	.-2788   	; 0x358 <lcd_set_str>
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	6c e0       	ldi	r22, 0x0C	; 12
     e40:	76 da       	rcall	.-2836   	; 0x32e <lcd_locate>
     e42:	80 91 1f 02 	lds	r24, 0x021F
     e46:	90 91 20 02 	lds	r25, 0x0220
     e4a:	4f d9       	rcall	.-3426   	; 0xea <BarMeter_disp>
     e4c:	58 ce       	rjmp	.-848    	; 0xafe <main+0x2ac>

00000e4e <__subsf3>:
     e4e:	50 58       	subi	r21, 0x80	; 128

00000e50 <__addsf3>:
     e50:	bb 27       	eor	r27, r27
     e52:	aa 27       	eor	r26, r26
     e54:	0e d0       	rcall	.+28     	; 0xe72 <__addsf3x>
     e56:	70 c1       	rjmp	.+736    	; 0x1138 <__fp_round>
     e58:	61 d1       	rcall	.+706    	; 0x111c <__fp_pscA>
     e5a:	30 f0       	brcs	.+12     	; 0xe68 <__addsf3+0x18>
     e5c:	66 d1       	rcall	.+716    	; 0x112a <__fp_pscB>
     e5e:	20 f0       	brcs	.+8      	; 0xe68 <__addsf3+0x18>
     e60:	31 f4       	brne	.+12     	; 0xe6e <__addsf3+0x1e>
     e62:	9f 3f       	cpi	r25, 0xFF	; 255
     e64:	11 f4       	brne	.+4      	; 0xe6a <__addsf3+0x1a>
     e66:	1e f4       	brtc	.+6      	; 0xe6e <__addsf3+0x1e>
     e68:	56 c1       	rjmp	.+684    	; 0x1116 <__fp_nan>
     e6a:	0e f4       	brtc	.+2      	; 0xe6e <__addsf3+0x1e>
     e6c:	e0 95       	com	r30
     e6e:	e7 fb       	bst	r30, 7
     e70:	4c c1       	rjmp	.+664    	; 0x110a <__fp_inf>

00000e72 <__addsf3x>:
     e72:	e9 2f       	mov	r30, r25
     e74:	72 d1       	rcall	.+740    	; 0x115a <__fp_split3>
     e76:	80 f3       	brcs	.-32     	; 0xe58 <__addsf3+0x8>
     e78:	ba 17       	cp	r27, r26
     e7a:	62 07       	cpc	r22, r18
     e7c:	73 07       	cpc	r23, r19
     e7e:	84 07       	cpc	r24, r20
     e80:	95 07       	cpc	r25, r21
     e82:	18 f0       	brcs	.+6      	; 0xe8a <__addsf3x+0x18>
     e84:	71 f4       	brne	.+28     	; 0xea2 <__addsf3x+0x30>
     e86:	9e f5       	brtc	.+102    	; 0xeee <__addsf3x+0x7c>
     e88:	8a c1       	rjmp	.+788    	; 0x119e <__fp_zero>
     e8a:	0e f4       	brtc	.+2      	; 0xe8e <__addsf3x+0x1c>
     e8c:	e0 95       	com	r30
     e8e:	0b 2e       	mov	r0, r27
     e90:	ba 2f       	mov	r27, r26
     e92:	a0 2d       	mov	r26, r0
     e94:	0b 01       	movw	r0, r22
     e96:	b9 01       	movw	r22, r18
     e98:	90 01       	movw	r18, r0
     e9a:	0c 01       	movw	r0, r24
     e9c:	ca 01       	movw	r24, r20
     e9e:	a0 01       	movw	r20, r0
     ea0:	11 24       	eor	r1, r1
     ea2:	ff 27       	eor	r31, r31
     ea4:	59 1b       	sub	r21, r25
     ea6:	99 f0       	breq	.+38     	; 0xece <__addsf3x+0x5c>
     ea8:	59 3f       	cpi	r21, 0xF9	; 249
     eaa:	50 f4       	brcc	.+20     	; 0xec0 <__addsf3x+0x4e>
     eac:	50 3e       	cpi	r21, 0xE0	; 224
     eae:	68 f1       	brcs	.+90     	; 0xf0a <__addsf3x+0x98>
     eb0:	1a 16       	cp	r1, r26
     eb2:	f0 40       	sbci	r31, 0x00	; 0
     eb4:	a2 2f       	mov	r26, r18
     eb6:	23 2f       	mov	r18, r19
     eb8:	34 2f       	mov	r19, r20
     eba:	44 27       	eor	r20, r20
     ebc:	58 5f       	subi	r21, 0xF8	; 248
     ebe:	f3 cf       	rjmp	.-26     	; 0xea6 <__addsf3x+0x34>
     ec0:	46 95       	lsr	r20
     ec2:	37 95       	ror	r19
     ec4:	27 95       	ror	r18
     ec6:	a7 95       	ror	r26
     ec8:	f0 40       	sbci	r31, 0x00	; 0
     eca:	53 95       	inc	r21
     ecc:	c9 f7       	brne	.-14     	; 0xec0 <__addsf3x+0x4e>
     ece:	7e f4       	brtc	.+30     	; 0xeee <__addsf3x+0x7c>
     ed0:	1f 16       	cp	r1, r31
     ed2:	ba 0b       	sbc	r27, r26
     ed4:	62 0b       	sbc	r22, r18
     ed6:	73 0b       	sbc	r23, r19
     ed8:	84 0b       	sbc	r24, r20
     eda:	ba f0       	brmi	.+46     	; 0xf0a <__addsf3x+0x98>
     edc:	91 50       	subi	r25, 0x01	; 1
     ede:	a1 f0       	breq	.+40     	; 0xf08 <__addsf3x+0x96>
     ee0:	ff 0f       	add	r31, r31
     ee2:	bb 1f       	adc	r27, r27
     ee4:	66 1f       	adc	r22, r22
     ee6:	77 1f       	adc	r23, r23
     ee8:	88 1f       	adc	r24, r24
     eea:	c2 f7       	brpl	.-16     	; 0xedc <__addsf3x+0x6a>
     eec:	0e c0       	rjmp	.+28     	; 0xf0a <__addsf3x+0x98>
     eee:	ba 0f       	add	r27, r26
     ef0:	62 1f       	adc	r22, r18
     ef2:	73 1f       	adc	r23, r19
     ef4:	84 1f       	adc	r24, r20
     ef6:	48 f4       	brcc	.+18     	; 0xf0a <__addsf3x+0x98>
     ef8:	87 95       	ror	r24
     efa:	77 95       	ror	r23
     efc:	67 95       	ror	r22
     efe:	b7 95       	ror	r27
     f00:	f7 95       	ror	r31
     f02:	9e 3f       	cpi	r25, 0xFE	; 254
     f04:	08 f0       	brcs	.+2      	; 0xf08 <__addsf3x+0x96>
     f06:	b3 cf       	rjmp	.-154    	; 0xe6e <__addsf3+0x1e>
     f08:	93 95       	inc	r25
     f0a:	88 0f       	add	r24, r24
     f0c:	08 f0       	brcs	.+2      	; 0xf10 <__addsf3x+0x9e>
     f0e:	99 27       	eor	r25, r25
     f10:	ee 0f       	add	r30, r30
     f12:	97 95       	ror	r25
     f14:	87 95       	ror	r24
     f16:	08 95       	ret

00000f18 <__cmpsf2>:
     f18:	d4 d0       	rcall	.+424    	; 0x10c2 <__fp_cmp>
     f1a:	08 f4       	brcc	.+2      	; 0xf1e <__cmpsf2+0x6>
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	08 95       	ret

00000f20 <__divsf3>:
     f20:	0c d0       	rcall	.+24     	; 0xf3a <__divsf3x>
     f22:	0a c1       	rjmp	.+532    	; 0x1138 <__fp_round>
     f24:	02 d1       	rcall	.+516    	; 0x112a <__fp_pscB>
     f26:	40 f0       	brcs	.+16     	; 0xf38 <__divsf3+0x18>
     f28:	f9 d0       	rcall	.+498    	; 0x111c <__fp_pscA>
     f2a:	30 f0       	brcs	.+12     	; 0xf38 <__divsf3+0x18>
     f2c:	21 f4       	brne	.+8      	; 0xf36 <__divsf3+0x16>
     f2e:	5f 3f       	cpi	r21, 0xFF	; 255
     f30:	19 f0       	breq	.+6      	; 0xf38 <__divsf3+0x18>
     f32:	eb c0       	rjmp	.+470    	; 0x110a <__fp_inf>
     f34:	51 11       	cpse	r21, r1
     f36:	34 c1       	rjmp	.+616    	; 0x11a0 <__fp_szero>
     f38:	ee c0       	rjmp	.+476    	; 0x1116 <__fp_nan>

00000f3a <__divsf3x>:
     f3a:	0f d1       	rcall	.+542    	; 0x115a <__fp_split3>
     f3c:	98 f3       	brcs	.-26     	; 0xf24 <__divsf3+0x4>

00000f3e <__divsf3_pse>:
     f3e:	99 23       	and	r25, r25
     f40:	c9 f3       	breq	.-14     	; 0xf34 <__divsf3+0x14>
     f42:	55 23       	and	r21, r21
     f44:	b1 f3       	breq	.-20     	; 0xf32 <__divsf3+0x12>
     f46:	95 1b       	sub	r25, r21
     f48:	55 0b       	sbc	r21, r21
     f4a:	bb 27       	eor	r27, r27
     f4c:	aa 27       	eor	r26, r26
     f4e:	62 17       	cp	r22, r18
     f50:	73 07       	cpc	r23, r19
     f52:	84 07       	cpc	r24, r20
     f54:	38 f0       	brcs	.+14     	; 0xf64 <__divsf3_pse+0x26>
     f56:	9f 5f       	subi	r25, 0xFF	; 255
     f58:	5f 4f       	sbci	r21, 0xFF	; 255
     f5a:	22 0f       	add	r18, r18
     f5c:	33 1f       	adc	r19, r19
     f5e:	44 1f       	adc	r20, r20
     f60:	aa 1f       	adc	r26, r26
     f62:	a9 f3       	breq	.-22     	; 0xf4e <__divsf3_pse+0x10>
     f64:	33 d0       	rcall	.+102    	; 0xfcc <__divsf3_pse+0x8e>
     f66:	0e 2e       	mov	r0, r30
     f68:	3a f0       	brmi	.+14     	; 0xf78 <__divsf3_pse+0x3a>
     f6a:	e0 e8       	ldi	r30, 0x80	; 128
     f6c:	30 d0       	rcall	.+96     	; 0xfce <__divsf3_pse+0x90>
     f6e:	91 50       	subi	r25, 0x01	; 1
     f70:	50 40       	sbci	r21, 0x00	; 0
     f72:	e6 95       	lsr	r30
     f74:	00 1c       	adc	r0, r0
     f76:	ca f7       	brpl	.-14     	; 0xf6a <__divsf3_pse+0x2c>
     f78:	29 d0       	rcall	.+82     	; 0xfcc <__divsf3_pse+0x8e>
     f7a:	fe 2f       	mov	r31, r30
     f7c:	27 d0       	rcall	.+78     	; 0xfcc <__divsf3_pse+0x8e>
     f7e:	66 0f       	add	r22, r22
     f80:	77 1f       	adc	r23, r23
     f82:	88 1f       	adc	r24, r24
     f84:	bb 1f       	adc	r27, r27
     f86:	26 17       	cp	r18, r22
     f88:	37 07       	cpc	r19, r23
     f8a:	48 07       	cpc	r20, r24
     f8c:	ab 07       	cpc	r26, r27
     f8e:	b0 e8       	ldi	r27, 0x80	; 128
     f90:	09 f0       	breq	.+2      	; 0xf94 <__divsf3_pse+0x56>
     f92:	bb 0b       	sbc	r27, r27
     f94:	80 2d       	mov	r24, r0
     f96:	bf 01       	movw	r22, r30
     f98:	ff 27       	eor	r31, r31
     f9a:	93 58       	subi	r25, 0x83	; 131
     f9c:	5f 4f       	sbci	r21, 0xFF	; 255
     f9e:	2a f0       	brmi	.+10     	; 0xfaa <__divsf3_pse+0x6c>
     fa0:	9e 3f       	cpi	r25, 0xFE	; 254
     fa2:	51 05       	cpc	r21, r1
     fa4:	68 f0       	brcs	.+26     	; 0xfc0 <__divsf3_pse+0x82>
     fa6:	b1 c0       	rjmp	.+354    	; 0x110a <__fp_inf>
     fa8:	fb c0       	rjmp	.+502    	; 0x11a0 <__fp_szero>
     faa:	5f 3f       	cpi	r21, 0xFF	; 255
     fac:	ec f3       	brlt	.-6      	; 0xfa8 <__divsf3_pse+0x6a>
     fae:	98 3e       	cpi	r25, 0xE8	; 232
     fb0:	dc f3       	brlt	.-10     	; 0xfa8 <__divsf3_pse+0x6a>
     fb2:	86 95       	lsr	r24
     fb4:	77 95       	ror	r23
     fb6:	67 95       	ror	r22
     fb8:	b7 95       	ror	r27
     fba:	f7 95       	ror	r31
     fbc:	9f 5f       	subi	r25, 0xFF	; 255
     fbe:	c9 f7       	brne	.-14     	; 0xfb2 <__divsf3_pse+0x74>
     fc0:	88 0f       	add	r24, r24
     fc2:	91 1d       	adc	r25, r1
     fc4:	96 95       	lsr	r25
     fc6:	87 95       	ror	r24
     fc8:	97 f9       	bld	r25, 7
     fca:	08 95       	ret
     fcc:	e1 e0       	ldi	r30, 0x01	; 1
     fce:	66 0f       	add	r22, r22
     fd0:	77 1f       	adc	r23, r23
     fd2:	88 1f       	adc	r24, r24
     fd4:	bb 1f       	adc	r27, r27
     fd6:	62 17       	cp	r22, r18
     fd8:	73 07       	cpc	r23, r19
     fda:	84 07       	cpc	r24, r20
     fdc:	ba 07       	cpc	r27, r26
     fde:	20 f0       	brcs	.+8      	; 0xfe8 <__divsf3_pse+0xaa>
     fe0:	62 1b       	sub	r22, r18
     fe2:	73 0b       	sbc	r23, r19
     fe4:	84 0b       	sbc	r24, r20
     fe6:	ba 0b       	sbc	r27, r26
     fe8:	ee 1f       	adc	r30, r30
     fea:	88 f7       	brcc	.-30     	; 0xfce <__divsf3_pse+0x90>
     fec:	e0 95       	com	r30
     fee:	08 95       	ret

00000ff0 <__fixunssfsi>:
     ff0:	bc d0       	rcall	.+376    	; 0x116a <__fp_splitA>
     ff2:	88 f0       	brcs	.+34     	; 0x1016 <__fixunssfsi+0x26>
     ff4:	9f 57       	subi	r25, 0x7F	; 127
     ff6:	90 f0       	brcs	.+36     	; 0x101c <__fixunssfsi+0x2c>
     ff8:	b9 2f       	mov	r27, r25
     ffa:	99 27       	eor	r25, r25
     ffc:	b7 51       	subi	r27, 0x17	; 23
     ffe:	a0 f0       	brcs	.+40     	; 0x1028 <__fixunssfsi+0x38>
    1000:	d1 f0       	breq	.+52     	; 0x1036 <__fixunssfsi+0x46>
    1002:	66 0f       	add	r22, r22
    1004:	77 1f       	adc	r23, r23
    1006:	88 1f       	adc	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	1a f0       	brmi	.+6      	; 0x1012 <__fixunssfsi+0x22>
    100c:	ba 95       	dec	r27
    100e:	c9 f7       	brne	.-14     	; 0x1002 <__fixunssfsi+0x12>
    1010:	12 c0       	rjmp	.+36     	; 0x1036 <__fixunssfsi+0x46>
    1012:	b1 30       	cpi	r27, 0x01	; 1
    1014:	81 f0       	breq	.+32     	; 0x1036 <__fixunssfsi+0x46>
    1016:	c3 d0       	rcall	.+390    	; 0x119e <__fp_zero>
    1018:	b1 e0       	ldi	r27, 0x01	; 1
    101a:	08 95       	ret
    101c:	c0 c0       	rjmp	.+384    	; 0x119e <__fp_zero>
    101e:	67 2f       	mov	r22, r23
    1020:	78 2f       	mov	r23, r24
    1022:	88 27       	eor	r24, r24
    1024:	b8 5f       	subi	r27, 0xF8	; 248
    1026:	39 f0       	breq	.+14     	; 0x1036 <__fixunssfsi+0x46>
    1028:	b9 3f       	cpi	r27, 0xF9	; 249
    102a:	cc f3       	brlt	.-14     	; 0x101e <__fixunssfsi+0x2e>
    102c:	86 95       	lsr	r24
    102e:	77 95       	ror	r23
    1030:	67 95       	ror	r22
    1032:	b3 95       	inc	r27
    1034:	d9 f7       	brne	.-10     	; 0x102c <__fixunssfsi+0x3c>
    1036:	3e f4       	brtc	.+14     	; 0x1046 <__fixunssfsi+0x56>
    1038:	90 95       	com	r25
    103a:	80 95       	com	r24
    103c:	70 95       	com	r23
    103e:	61 95       	neg	r22
    1040:	7f 4f       	sbci	r23, 0xFF	; 255
    1042:	8f 4f       	sbci	r24, 0xFF	; 255
    1044:	9f 4f       	sbci	r25, 0xFF	; 255
    1046:	08 95       	ret

00001048 <__floatunsisf>:
    1048:	e8 94       	clt
    104a:	09 c0       	rjmp	.+18     	; 0x105e <__floatsisf+0x12>

0000104c <__floatsisf>:
    104c:	97 fb       	bst	r25, 7
    104e:	3e f4       	brtc	.+14     	; 0x105e <__floatsisf+0x12>
    1050:	90 95       	com	r25
    1052:	80 95       	com	r24
    1054:	70 95       	com	r23
    1056:	61 95       	neg	r22
    1058:	7f 4f       	sbci	r23, 0xFF	; 255
    105a:	8f 4f       	sbci	r24, 0xFF	; 255
    105c:	9f 4f       	sbci	r25, 0xFF	; 255
    105e:	99 23       	and	r25, r25
    1060:	a9 f0       	breq	.+42     	; 0x108c <__floatsisf+0x40>
    1062:	f9 2f       	mov	r31, r25
    1064:	96 e9       	ldi	r25, 0x96	; 150
    1066:	bb 27       	eor	r27, r27
    1068:	93 95       	inc	r25
    106a:	f6 95       	lsr	r31
    106c:	87 95       	ror	r24
    106e:	77 95       	ror	r23
    1070:	67 95       	ror	r22
    1072:	b7 95       	ror	r27
    1074:	f1 11       	cpse	r31, r1
    1076:	f8 cf       	rjmp	.-16     	; 0x1068 <__floatsisf+0x1c>
    1078:	fa f4       	brpl	.+62     	; 0x10b8 <__floatsisf+0x6c>
    107a:	bb 0f       	add	r27, r27
    107c:	11 f4       	brne	.+4      	; 0x1082 <__floatsisf+0x36>
    107e:	60 ff       	sbrs	r22, 0
    1080:	1b c0       	rjmp	.+54     	; 0x10b8 <__floatsisf+0x6c>
    1082:	6f 5f       	subi	r22, 0xFF	; 255
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	8f 4f       	sbci	r24, 0xFF	; 255
    1088:	9f 4f       	sbci	r25, 0xFF	; 255
    108a:	16 c0       	rjmp	.+44     	; 0x10b8 <__floatsisf+0x6c>
    108c:	88 23       	and	r24, r24
    108e:	11 f0       	breq	.+4      	; 0x1094 <__floatsisf+0x48>
    1090:	96 e9       	ldi	r25, 0x96	; 150
    1092:	11 c0       	rjmp	.+34     	; 0x10b6 <__floatsisf+0x6a>
    1094:	77 23       	and	r23, r23
    1096:	21 f0       	breq	.+8      	; 0x10a0 <__floatsisf+0x54>
    1098:	9e e8       	ldi	r25, 0x8E	; 142
    109a:	87 2f       	mov	r24, r23
    109c:	76 2f       	mov	r23, r22
    109e:	05 c0       	rjmp	.+10     	; 0x10aa <__floatsisf+0x5e>
    10a0:	66 23       	and	r22, r22
    10a2:	71 f0       	breq	.+28     	; 0x10c0 <__floatsisf+0x74>
    10a4:	96 e8       	ldi	r25, 0x86	; 134
    10a6:	86 2f       	mov	r24, r22
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	2a f0       	brmi	.+10     	; 0x10b8 <__floatsisf+0x6c>
    10ae:	9a 95       	dec	r25
    10b0:	66 0f       	add	r22, r22
    10b2:	77 1f       	adc	r23, r23
    10b4:	88 1f       	adc	r24, r24
    10b6:	da f7       	brpl	.-10     	; 0x10ae <__floatsisf+0x62>
    10b8:	88 0f       	add	r24, r24
    10ba:	96 95       	lsr	r25
    10bc:	87 95       	ror	r24
    10be:	97 f9       	bld	r25, 7
    10c0:	08 95       	ret

000010c2 <__fp_cmp>:
    10c2:	99 0f       	add	r25, r25
    10c4:	00 08       	sbc	r0, r0
    10c6:	55 0f       	add	r21, r21
    10c8:	aa 0b       	sbc	r26, r26
    10ca:	e0 e8       	ldi	r30, 0x80	; 128
    10cc:	fe ef       	ldi	r31, 0xFE	; 254
    10ce:	16 16       	cp	r1, r22
    10d0:	17 06       	cpc	r1, r23
    10d2:	e8 07       	cpc	r30, r24
    10d4:	f9 07       	cpc	r31, r25
    10d6:	c0 f0       	brcs	.+48     	; 0x1108 <__fp_cmp+0x46>
    10d8:	12 16       	cp	r1, r18
    10da:	13 06       	cpc	r1, r19
    10dc:	e4 07       	cpc	r30, r20
    10de:	f5 07       	cpc	r31, r21
    10e0:	98 f0       	brcs	.+38     	; 0x1108 <__fp_cmp+0x46>
    10e2:	62 1b       	sub	r22, r18
    10e4:	73 0b       	sbc	r23, r19
    10e6:	84 0b       	sbc	r24, r20
    10e8:	95 0b       	sbc	r25, r21
    10ea:	39 f4       	brne	.+14     	; 0x10fa <__fp_cmp+0x38>
    10ec:	0a 26       	eor	r0, r26
    10ee:	61 f0       	breq	.+24     	; 0x1108 <__fp_cmp+0x46>
    10f0:	23 2b       	or	r18, r19
    10f2:	24 2b       	or	r18, r20
    10f4:	25 2b       	or	r18, r21
    10f6:	21 f4       	brne	.+8      	; 0x1100 <__fp_cmp+0x3e>
    10f8:	08 95       	ret
    10fa:	0a 26       	eor	r0, r26
    10fc:	09 f4       	brne	.+2      	; 0x1100 <__fp_cmp+0x3e>
    10fe:	a1 40       	sbci	r26, 0x01	; 1
    1100:	a6 95       	lsr	r26
    1102:	8f ef       	ldi	r24, 0xFF	; 255
    1104:	81 1d       	adc	r24, r1
    1106:	81 1d       	adc	r24, r1
    1108:	08 95       	ret

0000110a <__fp_inf>:
    110a:	97 f9       	bld	r25, 7
    110c:	9f 67       	ori	r25, 0x7F	; 127
    110e:	80 e8       	ldi	r24, 0x80	; 128
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	08 95       	ret

00001116 <__fp_nan>:
    1116:	9f ef       	ldi	r25, 0xFF	; 255
    1118:	80 ec       	ldi	r24, 0xC0	; 192
    111a:	08 95       	ret

0000111c <__fp_pscA>:
    111c:	00 24       	eor	r0, r0
    111e:	0a 94       	dec	r0
    1120:	16 16       	cp	r1, r22
    1122:	17 06       	cpc	r1, r23
    1124:	18 06       	cpc	r1, r24
    1126:	09 06       	cpc	r0, r25
    1128:	08 95       	ret

0000112a <__fp_pscB>:
    112a:	00 24       	eor	r0, r0
    112c:	0a 94       	dec	r0
    112e:	12 16       	cp	r1, r18
    1130:	13 06       	cpc	r1, r19
    1132:	14 06       	cpc	r1, r20
    1134:	05 06       	cpc	r0, r21
    1136:	08 95       	ret

00001138 <__fp_round>:
    1138:	09 2e       	mov	r0, r25
    113a:	03 94       	inc	r0
    113c:	00 0c       	add	r0, r0
    113e:	11 f4       	brne	.+4      	; 0x1144 <__fp_round+0xc>
    1140:	88 23       	and	r24, r24
    1142:	52 f0       	brmi	.+20     	; 0x1158 <__fp_round+0x20>
    1144:	bb 0f       	add	r27, r27
    1146:	40 f4       	brcc	.+16     	; 0x1158 <__fp_round+0x20>
    1148:	bf 2b       	or	r27, r31
    114a:	11 f4       	brne	.+4      	; 0x1150 <__fp_round+0x18>
    114c:	60 ff       	sbrs	r22, 0
    114e:	04 c0       	rjmp	.+8      	; 0x1158 <__fp_round+0x20>
    1150:	6f 5f       	subi	r22, 0xFF	; 255
    1152:	7f 4f       	sbci	r23, 0xFF	; 255
    1154:	8f 4f       	sbci	r24, 0xFF	; 255
    1156:	9f 4f       	sbci	r25, 0xFF	; 255
    1158:	08 95       	ret

0000115a <__fp_split3>:
    115a:	57 fd       	sbrc	r21, 7
    115c:	90 58       	subi	r25, 0x80	; 128
    115e:	44 0f       	add	r20, r20
    1160:	55 1f       	adc	r21, r21
    1162:	59 f0       	breq	.+22     	; 0x117a <__fp_splitA+0x10>
    1164:	5f 3f       	cpi	r21, 0xFF	; 255
    1166:	71 f0       	breq	.+28     	; 0x1184 <__fp_splitA+0x1a>
    1168:	47 95       	ror	r20

0000116a <__fp_splitA>:
    116a:	88 0f       	add	r24, r24
    116c:	97 fb       	bst	r25, 7
    116e:	99 1f       	adc	r25, r25
    1170:	61 f0       	breq	.+24     	; 0x118a <__fp_splitA+0x20>
    1172:	9f 3f       	cpi	r25, 0xFF	; 255
    1174:	79 f0       	breq	.+30     	; 0x1194 <__fp_splitA+0x2a>
    1176:	87 95       	ror	r24
    1178:	08 95       	ret
    117a:	12 16       	cp	r1, r18
    117c:	13 06       	cpc	r1, r19
    117e:	14 06       	cpc	r1, r20
    1180:	55 1f       	adc	r21, r21
    1182:	f2 cf       	rjmp	.-28     	; 0x1168 <__fp_split3+0xe>
    1184:	46 95       	lsr	r20
    1186:	f1 df       	rcall	.-30     	; 0x116a <__fp_splitA>
    1188:	08 c0       	rjmp	.+16     	; 0x119a <__fp_splitA+0x30>
    118a:	16 16       	cp	r1, r22
    118c:	17 06       	cpc	r1, r23
    118e:	18 06       	cpc	r1, r24
    1190:	99 1f       	adc	r25, r25
    1192:	f1 cf       	rjmp	.-30     	; 0x1176 <__fp_splitA+0xc>
    1194:	86 95       	lsr	r24
    1196:	71 05       	cpc	r23, r1
    1198:	61 05       	cpc	r22, r1
    119a:	08 94       	sec
    119c:	08 95       	ret

0000119e <__fp_zero>:
    119e:	e8 94       	clt

000011a0 <__fp_szero>:
    11a0:	bb 27       	eor	r27, r27
    11a2:	66 27       	eor	r22, r22
    11a4:	77 27       	eor	r23, r23
    11a6:	cb 01       	movw	r24, r22
    11a8:	97 f9       	bld	r25, 7
    11aa:	08 95       	ret

000011ac <__mulsf3>:
    11ac:	0b d0       	rcall	.+22     	; 0x11c4 <__mulsf3x>
    11ae:	c4 cf       	rjmp	.-120    	; 0x1138 <__fp_round>
    11b0:	b5 df       	rcall	.-150    	; 0x111c <__fp_pscA>
    11b2:	28 f0       	brcs	.+10     	; 0x11be <__mulsf3+0x12>
    11b4:	ba df       	rcall	.-140    	; 0x112a <__fp_pscB>
    11b6:	18 f0       	brcs	.+6      	; 0x11be <__mulsf3+0x12>
    11b8:	95 23       	and	r25, r21
    11ba:	09 f0       	breq	.+2      	; 0x11be <__mulsf3+0x12>
    11bc:	a6 cf       	rjmp	.-180    	; 0x110a <__fp_inf>
    11be:	ab cf       	rjmp	.-170    	; 0x1116 <__fp_nan>
    11c0:	11 24       	eor	r1, r1
    11c2:	ee cf       	rjmp	.-36     	; 0x11a0 <__fp_szero>

000011c4 <__mulsf3x>:
    11c4:	ca df       	rcall	.-108    	; 0x115a <__fp_split3>
    11c6:	a0 f3       	brcs	.-24     	; 0x11b0 <__mulsf3+0x4>

000011c8 <__mulsf3_pse>:
    11c8:	95 9f       	mul	r25, r21
    11ca:	d1 f3       	breq	.-12     	; 0x11c0 <__mulsf3+0x14>
    11cc:	95 0f       	add	r25, r21
    11ce:	50 e0       	ldi	r21, 0x00	; 0
    11d0:	55 1f       	adc	r21, r21
    11d2:	62 9f       	mul	r22, r18
    11d4:	f0 01       	movw	r30, r0
    11d6:	72 9f       	mul	r23, r18
    11d8:	bb 27       	eor	r27, r27
    11da:	f0 0d       	add	r31, r0
    11dc:	b1 1d       	adc	r27, r1
    11de:	63 9f       	mul	r22, r19
    11e0:	aa 27       	eor	r26, r26
    11e2:	f0 0d       	add	r31, r0
    11e4:	b1 1d       	adc	r27, r1
    11e6:	aa 1f       	adc	r26, r26
    11e8:	64 9f       	mul	r22, r20
    11ea:	66 27       	eor	r22, r22
    11ec:	b0 0d       	add	r27, r0
    11ee:	a1 1d       	adc	r26, r1
    11f0:	66 1f       	adc	r22, r22
    11f2:	82 9f       	mul	r24, r18
    11f4:	22 27       	eor	r18, r18
    11f6:	b0 0d       	add	r27, r0
    11f8:	a1 1d       	adc	r26, r1
    11fa:	62 1f       	adc	r22, r18
    11fc:	73 9f       	mul	r23, r19
    11fe:	b0 0d       	add	r27, r0
    1200:	a1 1d       	adc	r26, r1
    1202:	62 1f       	adc	r22, r18
    1204:	83 9f       	mul	r24, r19
    1206:	a0 0d       	add	r26, r0
    1208:	61 1d       	adc	r22, r1
    120a:	22 1f       	adc	r18, r18
    120c:	74 9f       	mul	r23, r20
    120e:	33 27       	eor	r19, r19
    1210:	a0 0d       	add	r26, r0
    1212:	61 1d       	adc	r22, r1
    1214:	23 1f       	adc	r18, r19
    1216:	84 9f       	mul	r24, r20
    1218:	60 0d       	add	r22, r0
    121a:	21 1d       	adc	r18, r1
    121c:	82 2f       	mov	r24, r18
    121e:	76 2f       	mov	r23, r22
    1220:	6a 2f       	mov	r22, r26
    1222:	11 24       	eor	r1, r1
    1224:	9f 57       	subi	r25, 0x7F	; 127
    1226:	50 40       	sbci	r21, 0x00	; 0
    1228:	8a f0       	brmi	.+34     	; 0x124c <__mulsf3_pse+0x84>
    122a:	e1 f0       	breq	.+56     	; 0x1264 <__mulsf3_pse+0x9c>
    122c:	88 23       	and	r24, r24
    122e:	4a f0       	brmi	.+18     	; 0x1242 <__mulsf3_pse+0x7a>
    1230:	ee 0f       	add	r30, r30
    1232:	ff 1f       	adc	r31, r31
    1234:	bb 1f       	adc	r27, r27
    1236:	66 1f       	adc	r22, r22
    1238:	77 1f       	adc	r23, r23
    123a:	88 1f       	adc	r24, r24
    123c:	91 50       	subi	r25, 0x01	; 1
    123e:	50 40       	sbci	r21, 0x00	; 0
    1240:	a9 f7       	brne	.-22     	; 0x122c <__mulsf3_pse+0x64>
    1242:	9e 3f       	cpi	r25, 0xFE	; 254
    1244:	51 05       	cpc	r21, r1
    1246:	70 f0       	brcs	.+28     	; 0x1264 <__mulsf3_pse+0x9c>
    1248:	60 cf       	rjmp	.-320    	; 0x110a <__fp_inf>
    124a:	aa cf       	rjmp	.-172    	; 0x11a0 <__fp_szero>
    124c:	5f 3f       	cpi	r21, 0xFF	; 255
    124e:	ec f3       	brlt	.-6      	; 0x124a <__mulsf3_pse+0x82>
    1250:	98 3e       	cpi	r25, 0xE8	; 232
    1252:	dc f3       	brlt	.-10     	; 0x124a <__mulsf3_pse+0x82>
    1254:	86 95       	lsr	r24
    1256:	77 95       	ror	r23
    1258:	67 95       	ror	r22
    125a:	b7 95       	ror	r27
    125c:	f7 95       	ror	r31
    125e:	e7 95       	ror	r30
    1260:	9f 5f       	subi	r25, 0xFF	; 255
    1262:	c1 f7       	brne	.-16     	; 0x1254 <__mulsf3_pse+0x8c>
    1264:	fe 2b       	or	r31, r30
    1266:	88 0f       	add	r24, r24
    1268:	91 1d       	adc	r25, r1
    126a:	96 95       	lsr	r25
    126c:	87 95       	ror	r24
    126e:	97 f9       	bld	r25, 7
    1270:	08 95       	ret

00001272 <__mulsi3>:
    1272:	62 9f       	mul	r22, r18
    1274:	d0 01       	movw	r26, r0
    1276:	73 9f       	mul	r23, r19
    1278:	f0 01       	movw	r30, r0
    127a:	82 9f       	mul	r24, r18
    127c:	e0 0d       	add	r30, r0
    127e:	f1 1d       	adc	r31, r1
    1280:	64 9f       	mul	r22, r20
    1282:	e0 0d       	add	r30, r0
    1284:	f1 1d       	adc	r31, r1
    1286:	92 9f       	mul	r25, r18
    1288:	f0 0d       	add	r31, r0
    128a:	83 9f       	mul	r24, r19
    128c:	f0 0d       	add	r31, r0
    128e:	74 9f       	mul	r23, r20
    1290:	f0 0d       	add	r31, r0
    1292:	65 9f       	mul	r22, r21
    1294:	f0 0d       	add	r31, r0
    1296:	99 27       	eor	r25, r25
    1298:	72 9f       	mul	r23, r18
    129a:	b0 0d       	add	r27, r0
    129c:	e1 1d       	adc	r30, r1
    129e:	f9 1f       	adc	r31, r25
    12a0:	63 9f       	mul	r22, r19
    12a2:	b0 0d       	add	r27, r0
    12a4:	e1 1d       	adc	r30, r1
    12a6:	f9 1f       	adc	r31, r25
    12a8:	bd 01       	movw	r22, r26
    12aa:	cf 01       	movw	r24, r30
    12ac:	11 24       	eor	r1, r1
    12ae:	08 95       	ret

000012b0 <__udivmodhi4>:
    12b0:	aa 1b       	sub	r26, r26
    12b2:	bb 1b       	sub	r27, r27
    12b4:	51 e1       	ldi	r21, 0x11	; 17
    12b6:	07 c0       	rjmp	.+14     	; 0x12c6 <__udivmodhi4_ep>

000012b8 <__udivmodhi4_loop>:
    12b8:	aa 1f       	adc	r26, r26
    12ba:	bb 1f       	adc	r27, r27
    12bc:	a6 17       	cp	r26, r22
    12be:	b7 07       	cpc	r27, r23
    12c0:	10 f0       	brcs	.+4      	; 0x12c6 <__udivmodhi4_ep>
    12c2:	a6 1b       	sub	r26, r22
    12c4:	b7 0b       	sbc	r27, r23

000012c6 <__udivmodhi4_ep>:
    12c6:	88 1f       	adc	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	5a 95       	dec	r21
    12cc:	a9 f7       	brne	.-22     	; 0x12b8 <__udivmodhi4_loop>
    12ce:	80 95       	com	r24
    12d0:	90 95       	com	r25
    12d2:	bc 01       	movw	r22, r24
    12d4:	cd 01       	movw	r24, r26
    12d6:	08 95       	ret

000012d8 <__udivmodsi4>:
    12d8:	a1 e2       	ldi	r26, 0x21	; 33
    12da:	1a 2e       	mov	r1, r26
    12dc:	aa 1b       	sub	r26, r26
    12de:	bb 1b       	sub	r27, r27
    12e0:	fd 01       	movw	r30, r26
    12e2:	0d c0       	rjmp	.+26     	; 0x12fe <__udivmodsi4_ep>

000012e4 <__udivmodsi4_loop>:
    12e4:	aa 1f       	adc	r26, r26
    12e6:	bb 1f       	adc	r27, r27
    12e8:	ee 1f       	adc	r30, r30
    12ea:	ff 1f       	adc	r31, r31
    12ec:	a2 17       	cp	r26, r18
    12ee:	b3 07       	cpc	r27, r19
    12f0:	e4 07       	cpc	r30, r20
    12f2:	f5 07       	cpc	r31, r21
    12f4:	20 f0       	brcs	.+8      	; 0x12fe <__udivmodsi4_ep>
    12f6:	a2 1b       	sub	r26, r18
    12f8:	b3 0b       	sbc	r27, r19
    12fa:	e4 0b       	sbc	r30, r20
    12fc:	f5 0b       	sbc	r31, r21

000012fe <__udivmodsi4_ep>:
    12fe:	66 1f       	adc	r22, r22
    1300:	77 1f       	adc	r23, r23
    1302:	88 1f       	adc	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	1a 94       	dec	r1
    1308:	69 f7       	brne	.-38     	; 0x12e4 <__udivmodsi4_loop>
    130a:	60 95       	com	r22
    130c:	70 95       	com	r23
    130e:	80 95       	com	r24
    1310:	90 95       	com	r25
    1312:	9b 01       	movw	r18, r22
    1314:	ac 01       	movw	r20, r24
    1316:	bd 01       	movw	r22, r26
    1318:	cf 01       	movw	r24, r30
    131a:	08 95       	ret

0000131c <_exit>:
    131c:	f8 94       	cli

0000131e <__stop_program>:
    131e:	ff cf       	rjmp	.-2      	; 0x131e <__stop_program>
