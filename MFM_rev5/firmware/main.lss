
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800100  00001c24  00001cb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000186  008001ba  008001ba  00001d72  2**0
                  ALLOC
  3 .stab         0000651c  00000000  00000000  00001d74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ce5  00000000  00000000  00008290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00009f78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003c0  00000000  00000000  0000a018  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000064  00000000  00000000  0000a3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000218  00000000  00000000  0000a43c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	24 c1       	rjmp	.+584    	; 0x24c <__vector_1>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	5f c1       	rjmp	.+702    	; 0x2da <__vector_13>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	b9 c6       	rjmp	.+3442   	; 0xd94 <__vector_16>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	56 c6       	rjmp	.+3244   	; 0xcd2 <__vector_18>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d4 e0       	ldi	r29, 0x04	; 4
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
      40:	11 e0       	ldi	r17, 0x01	; 1
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	b1 e0       	ldi	r27, 0x01	; 1
      46:	e4 e2       	ldi	r30, 0x24	; 36
      48:	fc e1       	ldi	r31, 0x1C	; 28
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	aa 3b       	cpi	r26, 0xBA	; 186
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	13 e0       	ldi	r17, 0x03	; 3
      58:	aa eb       	ldi	r26, 0xBA	; 186
      5a:	b1 e0       	ldi	r27, 0x01	; 1
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a0 34       	cpi	r26, 0x40	; 64
      62:	b1 07       	cpc	r27, r17
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	68 d7       	rcall	.+3792   	; 0xf38 <main>
      68:	db cd       	rjmp	.-1098   	; 0xfffffc20 <__eeprom_end+0xff7efc20>

0000006a <__bad_interrupt>:
      6a:	71 c5       	rjmp	.+2786   	; 0xb4e <__vector_default>

0000006c <BarMeter_init>:
#define         BarMeter_MIN        0.0
#define         BarMeter_MAX        8000

float    BarMeter_INTG = (BarMeter_MAX-BarMeter_MIN)/BarMeter_N;

void BarMeter_init(void){
      6c:	df 92       	push	r13
      6e:	ef 92       	push	r14
      70:	ff 92       	push	r15
      72:	0f 93       	push	r16
      74:	1f 93       	push	r17
      76:	cf 93       	push	r28
      78:	df 93       	push	r29
    unsigned int code;
    unsigned int addr;
    
    for(code=0;code<6;code++){
      7a:	00 e0       	ldi	r16, 0x00	; 0
      7c:	10 e0       	ldi	r17, 0x00	; 0
        for(addr=0;addr<8;addr++){
            lcd_set_CGRAMaddr(code,addr);
            if( (addr > 1) & (addr < 6) )
                lcd_set_char(~(0x1f>>code));
      7e:	8f e1       	ldi	r24, 0x1F	; 31
      80:	e8 2e       	mov	r14, r24
      82:	f1 2c       	mov	r15, r1
      84:	1e c0       	rjmp	.+60     	; 0xc2 <BarMeter_init+0x56>
    unsigned int code;
    unsigned int addr;
    
    for(code=0;code<6;code++){
        for(addr=0;addr<8;addr++){
            lcd_set_CGRAMaddr(code,addr);
      86:	80 2f       	mov	r24, r16
      88:	6c 2f       	mov	r22, r28
      8a:	12 d5       	rcall	.+2596   	; 0xab0 <lcd_set_CGRAMaddr>
            if( (addr > 1) & (addr < 6) )
      8c:	9e 01       	movw	r18, r28
      8e:	22 50       	subi	r18, 0x02	; 2
      90:	30 40       	sbci	r19, 0x00	; 0
      92:	24 30       	cpi	r18, 0x04	; 4
      94:	31 05       	cpc	r19, r1
      96:	10 f4       	brcc	.+4      	; 0x9c <BarMeter_init+0x30>
                lcd_set_char(~(0x1f>>code));
      98:	8d 2d       	mov	r24, r13
      9a:	09 c0       	rjmp	.+18     	; 0xae <BarMeter_init+0x42>
            else if( (addr == 6) | (addr == 1) ) lcd_set_char(0x00);
      9c:	c1 30       	cpi	r28, 0x01	; 1
      9e:	d1 05       	cpc	r29, r1
      a0:	19 f0       	breq	.+6      	; 0xa8 <BarMeter_init+0x3c>
      a2:	c6 30       	cpi	r28, 0x06	; 6
      a4:	d1 05       	cpc	r29, r1
      a6:	11 f4       	brne	.+4      	; 0xac <BarMeter_init+0x40>
      a8:	80 e0       	ldi	r24, 0x00	; 0
      aa:	01 c0       	rjmp	.+2      	; 0xae <BarMeter_init+0x42>
            else                                 lcd_set_char(0x10);
      ac:	80 e1       	ldi	r24, 0x10	; 16
      ae:	e2 d3       	rcall	.+1988   	; 0x874 <lcd_set_char>
void BarMeter_init(void){
    unsigned int code;
    unsigned int addr;
    
    for(code=0;code<6;code++){
        for(addr=0;addr<8;addr++){
      b0:	21 96       	adiw	r28, 0x01	; 1
      b2:	c8 30       	cpi	r28, 0x08	; 8
      b4:	d1 05       	cpc	r29, r1
      b6:	39 f7       	brne	.-50     	; 0x86 <BarMeter_init+0x1a>

void BarMeter_init(void){
    unsigned int code;
    unsigned int addr;
    
    for(code=0;code<6;code++){
      b8:	0f 5f       	subi	r16, 0xFF	; 255
      ba:	1f 4f       	sbci	r17, 0xFF	; 255
      bc:	06 30       	cpi	r16, 0x06	; 6
      be:	11 05       	cpc	r17, r1
      c0:	61 f0       	breq	.+24     	; 0xda <BarMeter_init+0x6e>
        for(addr=0;addr<8;addr++){
            lcd_set_CGRAMaddr(code,addr);
            if( (addr > 1) & (addr < 6) )
                lcd_set_char(~(0x1f>>code));
      c2:	c7 01       	movw	r24, r14
      c4:	00 2e       	mov	r0, r16
      c6:	02 c0       	rjmp	.+4      	; 0xcc <BarMeter_init+0x60>
      c8:	95 95       	asr	r25
      ca:	87 95       	ror	r24
      cc:	0a 94       	dec	r0
      ce:	e2 f7       	brpl	.-8      	; 0xc8 <BarMeter_init+0x5c>
      d0:	d8 2e       	mov	r13, r24
      d2:	d0 94       	com	r13
      d4:	c0 e0       	ldi	r28, 0x00	; 0
      d6:	d0 e0       	ldi	r29, 0x00	; 0
      d8:	d6 cf       	rjmp	.-84     	; 0x86 <BarMeter_init+0x1a>
            else if( (addr == 6) | (addr == 1) ) lcd_set_char(0x00);
            else                                 lcd_set_char(0x10);
        }
    }
}
      da:	df 91       	pop	r29
      dc:	cf 91       	pop	r28
      de:	1f 91       	pop	r17
      e0:	0f 91       	pop	r16
      e2:	ff 90       	pop	r15
      e4:	ef 90       	pop	r14
      e6:	df 90       	pop	r13
      e8:	08 95       	ret

000000ea <BarMeter_disp>:

void BarMeter_disp(unsigned int data){
      ea:	4f 92       	push	r4
      ec:	5f 92       	push	r5
      ee:	7f 92       	push	r7
      f0:	8f 92       	push	r8
      f2:	9f 92       	push	r9
      f4:	af 92       	push	r10
      f6:	bf 92       	push	r11
      f8:	cf 92       	push	r12
      fa:	df 92       	push	r13
      fc:	ef 92       	push	r14
      fe:	ff 92       	push	r15
     100:	0f 93       	push	r16
     102:	1f 93       	push	r17
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
        data = BarMeter_MAX;
    }else if( data < BarMeter_MIN ){
        data = BarMeter_MIN;
    }
    
    conv_data = data - BarMeter_MIN;
     108:	bc 01       	movw	r22, r24
     10a:	8f e1       	ldi	r24, 0x1F	; 31
     10c:	61 34       	cpi	r22, 0x41	; 65
     10e:	78 07       	cpc	r23, r24
     110:	10 f0       	brcs	.+4      	; 0x116 <BarMeter_disp+0x2c>
     112:	60 e4       	ldi	r22, 0x40	; 64
     114:	7f e1       	ldi	r23, 0x1F	; 31
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	2c dc       	rcall	.-1960   	; 0xfffff974 <__eeprom_end+0xff7ef974>
     11c:	ff db       	rcall	.-2050   	; 0xfffff91c <__eeprom_end+0xff7ef91c>
    INTG = (unsigned int)(conv_data/BarMeter_INTG);
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	28 dc       	rcall	.-1968   	; 0xfffff974 <__eeprom_end+0xff7ef974>
     124:	4b 01       	movw	r8, r22
     126:	5c 01       	movw	r10, r24
     128:	c0 90 00 01 	lds	r12, 0x0100
     12c:	d0 90 01 01 	lds	r13, 0x0101
     130:	e0 90 02 01 	lds	r14, 0x0102
     134:	f0 90 03 01 	lds	r15, 0x0103
     138:	a7 01       	movw	r20, r14
     13a:	96 01       	movw	r18, r12
     13c:	82 db       	rcall	.-2300   	; 0xfffff842 <__eeprom_end+0xff7ef842>
     13e:	ee db       	rcall	.-2084   	; 0xfffff91c <__eeprom_end+0xff7ef91c>
     140:	76 2e       	mov	r7, r22
    FRAC = (unsigned int)((conv_data - BarMeter_INTG*INTG)*1.0/BarMeter_INTG * 5);
     142:	06 2f       	mov	r16, r22
     144:	10 e0       	ldi	r17, 0x00	; 0

    for(n=0;n<INTG;n++){
     146:	c0 e0       	ldi	r28, 0x00	; 0
     148:	d0 e0       	ldi	r29, 0x00	; 0
     14a:	28 01       	movw	r4, r16
     14c:	03 c0       	rjmp	.+6      	; 0x154 <BarMeter_disp+0x6a>
        lcd_set_char(0x5);
     14e:	85 e0       	ldi	r24, 0x05	; 5
     150:	91 d3       	rcall	.+1826   	; 0x874 <lcd_set_char>
    
    conv_data = data - BarMeter_MIN;
    INTG = (unsigned int)(conv_data/BarMeter_INTG);
    FRAC = (unsigned int)((conv_data - BarMeter_INTG*INTG)*1.0/BarMeter_INTG * 5);

    for(n=0;n<INTG;n++){
     152:	21 96       	adiw	r28, 0x01	; 1
     154:	c4 15       	cp	r28, r4
     156:	d5 05       	cpc	r29, r5
     158:	d0 f3       	brcs	.-12     	; 0x14e <BarMeter_disp+0x64>
        lcd_set_char(0x5);
    }
    if( INTG != BarMeter_N ) lcd_set_char(FRAC);
     15a:	88 e0       	ldi	r24, 0x08	; 8
     15c:	78 16       	cp	r7, r24
     15e:	d9 f0       	breq	.+54     	; 0x196 <BarMeter_disp+0xac>
        data = BarMeter_MIN;
    }
    
    conv_data = data - BarMeter_MIN;
    INTG = (unsigned int)(conv_data/BarMeter_INTG);
    FRAC = (unsigned int)((conv_data - BarMeter_INTG*INTG)*1.0/BarMeter_INTG * 5);
     160:	b8 01       	movw	r22, r16
     162:	88 27       	eor	r24, r24
     164:	77 fd       	sbrc	r23, 7
     166:	80 95       	com	r24
     168:	98 2f       	mov	r25, r24
     16a:	06 dc       	rcall	.-2036   	; 0xfffff978 <__eeprom_end+0xff7ef978>
     16c:	9b 01       	movw	r18, r22
     16e:	ac 01       	movw	r20, r24
     170:	c7 01       	movw	r24, r14
     172:	b6 01       	movw	r22, r12
     174:	b1 dc       	rcall	.-1694   	; 0xfffffad8 <__eeprom_end+0xff7efad8>
     176:	9b 01       	movw	r18, r22
     178:	ac 01       	movw	r20, r24
     17a:	c5 01       	movw	r24, r10
     17c:	b4 01       	movw	r22, r8
     17e:	f8 da       	rcall	.-2576   	; 0xfffff770 <__eeprom_end+0xff7ef770>
     180:	a7 01       	movw	r20, r14
     182:	96 01       	movw	r18, r12
     184:	5e db       	rcall	.-2372   	; 0xfffff842 <__eeprom_end+0xff7ef842>
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	40 ea       	ldi	r20, 0xA0	; 160
     18c:	50 e4       	ldi	r21, 0x40	; 64
     18e:	a4 dc       	rcall	.-1720   	; 0xfffffad8 <__eeprom_end+0xff7efad8>
     190:	c5 db       	rcall	.-2166   	; 0xfffff91c <__eeprom_end+0xff7ef91c>

    for(n=0;n<INTG;n++){
        lcd_set_char(0x5);
    }
    if( INTG != BarMeter_N ) lcd_set_char(FRAC);
     192:	86 2f       	mov	r24, r22
     194:	6f d3       	rcall	.+1758   	; 0x874 <lcd_set_char>
    for(n=INTG+1;n<BarMeter_N;n++){
     196:	c0 e0       	ldi	r28, 0x00	; 0
     198:	d0 e0       	ldi	r29, 0x00	; 0
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <BarMeter_disp+0xb6>
        lcd_set_char(0x0);
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	6a d3       	rcall	.+1748   	; 0x874 <lcd_set_char>
     1a0:	21 96       	adiw	r28, 0x01	; 1

    for(n=0;n<INTG;n++){
        lcd_set_char(0x5);
    }
    if( INTG != BarMeter_N ) lcd_set_char(FRAC);
    for(n=INTG+1;n<BarMeter_N;n++){
     1a2:	ce 01       	movw	r24, r28
     1a4:	84 0d       	add	r24, r4
     1a6:	95 1d       	adc	r25, r5
     1a8:	88 30       	cpi	r24, 0x08	; 8
     1aa:	91 05       	cpc	r25, r1
     1ac:	b8 f3       	brcs	.-18     	; 0x19c <BarMeter_disp+0xb2>
        lcd_set_char(0x0);
    }

}
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	1f 91       	pop	r17
     1b4:	0f 91       	pop	r16
     1b6:	ff 90       	pop	r15
     1b8:	ef 90       	pop	r14
     1ba:	df 90       	pop	r13
     1bc:	cf 90       	pop	r12
     1be:	bf 90       	pop	r11
     1c0:	af 90       	pop	r10
     1c2:	9f 90       	pop	r9
     1c4:	8f 90       	pop	r8
     1c6:	7f 90       	pop	r7
     1c8:	5f 90       	pop	r5
     1ca:	4f 90       	pop	r4
     1cc:	08 95       	ret

000001ce <ExtInterrupt_init>:
#include "ExtInterrupt.h"

void ExtInterrupt_init(void) {

   // INT0, INT1 Pin change interrupt enable
	EIMSK = 0b00000001;
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	8d bb       	out	0x1d, r24	; 29
	// bit 7-2 : not valid ,  bit 1 : INT1 ,  bit 0 : INT0 
	
   // INT0, INT1 Pin change interrupt mode setting
	EICRA = 0b00000011;
     1d2:	83 e0       	ldi	r24, 0x03	; 3
     1d4:	80 93 69 00 	sts	0x0069, r24
	//		10 ... Negative edge
	//		11 ... Positive edge


	// Pin group mask
	PCICR = 0b00000000;
     1d8:	10 92 68 00 	sts	0x0068, r1
	// bit 2 : PCINT 16 - 23

	// Pin mask
	// PCMSK2 is valid, when bit 2 of PCICR is setted 
	// PCINT23, PCINT22, PCINT21, PCINT20, PCINT19, PCINT18, PCINT17, PCINT16
	PCMSK2 = 0b00000000;
     1dc:	10 92 6d 00 	sts	0x006D, r1
	// PCMSK1 is valid, when bit 1 of PCICR is setted 
	//  ----- , PCINT14, PCINT13, PCINT12, PCINT11, PCINT10,  PCINT9,  PCINT8
	PCMSK1 = 0b00000000;
     1e0:	10 92 6c 00 	sts	0x006C, r1
	// PCMSK0 is valid, when bit 0 of PCICR is setted 
	//  PCINT7,  PCINT6,  PCINT5,  PCINT4,  PCINT3,  PCINT2,  PCINT1,  PCINT0
	PCMSK0 = 0b00000000;
     1e4:	10 92 6b 00 	sts	0x006B, r1
     1e8:	08 95       	ret

000001ea <LEDarray>:
// LED Array Variables Declaration
int                 LED_scale;

void  LEDarray(unsigned int rpm){

    if( rpm < RPM_LOW ){
     1ea:	8a 30       	cpi	r24, 0x0A	; 10
     1ec:	91 05       	cpc	r25, r1
     1ee:	28 f4       	brcc	.+10     	; 0x1fa <LEDarray+0x10>
        LED_scale = 0;
     1f0:	10 92 bf 01 	sts	0x01BF, r1
     1f4:	10 92 be 01 	sts	0x01BE, r1
     1f8:	1d c0       	rjmp	.+58     	; 0x234 <LEDarray+0x4a>
    }else if( rpm > RPM_HIGH ){
     1fa:	23 e2       	ldi	r18, 0x23	; 35
     1fc:	89 32       	cpi	r24, 0x29	; 41
     1fe:	92 07       	cpc	r25, r18
     200:	18 f0       	brcs	.+6      	; 0x208 <LEDarray+0x1e>
        LED_scale = 8;
     202:	88 e0       	ldi	r24, 0x08	; 8
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	12 c0       	rjmp	.+36     	; 0x22c <LEDarray+0x42>
    }else{
        LED_scale = 8.0*( rpm - RPM_LOW )/( RPM_HIGH - RPM_LOW );
     208:	0a 97       	sbiw	r24, 0x0a	; 10
     20a:	bc 01       	movw	r22, r24
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	b1 db       	rcall	.-2206   	; 0xfffff974 <__eeprom_end+0xff7ef974>
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	40 e0       	ldi	r20, 0x00	; 0
     218:	51 e4       	ldi	r21, 0x41	; 65
     21a:	5e dc       	rcall	.-1860   	; 0xfffffad8 <__eeprom_end+0xff7efad8>
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	38 e7       	ldi	r19, 0x78	; 120
     220:	4c e0       	ldi	r20, 0x0C	; 12
     222:	56 e4       	ldi	r21, 0x46	; 70
     224:	0e db       	rcall	.-2532   	; 0xfffff842 <__eeprom_end+0xff7ef842>
     226:	75 db       	rcall	.-2326   	; 0xfffff912 <__eeprom_end+0xff7ef912>
     228:	dc 01       	movw	r26, r24
     22a:	cb 01       	movw	r24, r22
     22c:	90 93 bf 01 	sts	0x01BF, r25
     230:	80 93 be 01 	sts	0x01BE, r24
    }
    send_bits_595_LED(~( 0xff << (int)LED_scale ));
     234:	8f ef       	ldi	r24, 0xFF	; 255
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	00 90 be 01 	lds	r0, 0x01BE
     23c:	02 c0       	rjmp	.+4      	; 0x242 <LEDarray+0x58>
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	0a 94       	dec	r0
     244:	e2 f7       	brpl	.-8      	; 0x23e <LEDarray+0x54>
     246:	80 95       	com	r24
     248:	6d d4       	rcall	.+2266   	; 0xb24 <send_bits_595_LED>
    
     24a:	08 95       	ret

0000024c <__vector_1>:

// for debug
unsigned long int   cnt_min;
unsigned long int   cnt_max;

ISR(INT0_vect){
     24c:	1f 92       	push	r1
     24e:	0f 92       	push	r0
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	0f 92       	push	r0
     254:	11 24       	eor	r1, r1
     256:	4f 93       	push	r20
     258:	5f 93       	push	r21
     25a:	6f 93       	push	r22
     25c:	7f 93       	push	r23
     25e:	8f 93       	push	r24
     260:	9f 93       	push	r25
     262:	ef 93       	push	r30
     264:	ff 93       	push	r31
    if( TCNT1 > TCNT_LIM ){
     266:	80 91 84 00 	lds	r24, 0x0084
     26a:	90 91 85 00 	lds	r25, 0x0085
     26e:	8b 3f       	cpi	r24, 0xFB	; 251
     270:	91 05       	cpc	r25, r1
     272:	30 f1       	brcs	.+76     	; 0x2c0 <__vector_1+0x74>
        meas_array[tacho_n] = TCNT1;
     274:	80 91 ba 01 	lds	r24, 0x01BA
     278:	90 91 bb 01 	lds	r25, 0x01BB
     27c:	40 91 84 00 	lds	r20, 0x0084
     280:	50 91 85 00 	lds	r21, 0x0085
     284:	fc 01       	movw	r30, r24
     286:	ee 0f       	add	r30, r30
     288:	ff 1f       	adc	r31, r31
     28a:	ee 0f       	add	r30, r30
     28c:	ff 1f       	adc	r31, r31
     28e:	e8 52       	subi	r30, 0x28	; 40
     290:	fe 4f       	sbci	r31, 0xFE	; 254
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	40 83       	st	Z, r20
     298:	51 83       	std	Z+1, r21	; 0x01
     29a:	62 83       	std	Z+2, r22	; 0x02
     29c:	73 83       	std	Z+3, r23	; 0x03
        if( tacho_n == Nmed-1 ) tacho_n=0;
     29e:	8f 31       	cpi	r24, 0x1F	; 31
     2a0:	91 05       	cpc	r25, r1
     2a2:	29 f4       	brne	.+10     	; 0x2ae <__vector_1+0x62>
     2a4:	10 92 bb 01 	sts	0x01BB, r1
     2a8:	10 92 ba 01 	sts	0x01BA, r1
     2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <__vector_1+0x6c>
        else                    tacho_n++;
     2ae:	01 96       	adiw	r24, 0x01	; 1
     2b0:	90 93 bb 01 	sts	0x01BB, r25
     2b4:	80 93 ba 01 	sts	0x01BA, r24
        TCNT1 = 0;
     2b8:	10 92 85 00 	sts	0x0085, r1
     2bc:	10 92 84 00 	sts	0x0084, r1
    }
}
     2c0:	ff 91       	pop	r31
     2c2:	ef 91       	pop	r30
     2c4:	9f 91       	pop	r25
     2c6:	8f 91       	pop	r24
     2c8:	7f 91       	pop	r23
     2ca:	6f 91       	pop	r22
     2cc:	5f 91       	pop	r21
     2ce:	4f 91       	pop	r20
     2d0:	0f 90       	pop	r0
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	0f 90       	pop	r0
     2d6:	1f 90       	pop	r1
     2d8:	18 95       	reti

000002da <__vector_13>:

// 16-bit Timer overflow
ISR(TIMER1_OVF_vect){
     2da:	1f 92       	push	r1
     2dc:	0f 92       	push	r0
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	0f 92       	push	r0
     2e2:	11 24       	eor	r1, r1
     2e4:	4f 93       	push	r20
     2e6:	5f 93       	push	r21
     2e8:	6f 93       	push	r22
     2ea:	7f 93       	push	r23
     2ec:	8f 93       	push	r24
     2ee:	9f 93       	push	r25
     2f0:	ef 93       	push	r30
     2f2:	ff 93       	push	r31
    meas_array[tacho_n] = 0xffffffff;
     2f4:	80 91 ba 01 	lds	r24, 0x01BA
     2f8:	90 91 bb 01 	lds	r25, 0x01BB
     2fc:	fc 01       	movw	r30, r24
     2fe:	ee 0f       	add	r30, r30
     300:	ff 1f       	adc	r31, r31
     302:	ee 0f       	add	r30, r30
     304:	ff 1f       	adc	r31, r31
     306:	e8 52       	subi	r30, 0x28	; 40
     308:	fe 4f       	sbci	r31, 0xFE	; 254
     30a:	4f ef       	ldi	r20, 0xFF	; 255
     30c:	5f ef       	ldi	r21, 0xFF	; 255
     30e:	ba 01       	movw	r22, r20
     310:	40 83       	st	Z, r20
     312:	51 83       	std	Z+1, r21	; 0x01
     314:	62 83       	std	Z+2, r22	; 0x02
     316:	73 83       	std	Z+3, r23	; 0x03
    if( tacho_n == Nmed-1 ) tacho_n=0;
     318:	8f 31       	cpi	r24, 0x1F	; 31
     31a:	91 05       	cpc	r25, r1
     31c:	29 f4       	brne	.+10     	; 0x328 <__vector_13+0x4e>
     31e:	10 92 bb 01 	sts	0x01BB, r1
     322:	10 92 ba 01 	sts	0x01BA, r1
     326:	05 c0       	rjmp	.+10     	; 0x332 <__vector_13+0x58>
    else                    tacho_n++;
     328:	01 96       	adiw	r24, 0x01	; 1
     32a:	90 93 bb 01 	sts	0x01BB, r25
     32e:	80 93 ba 01 	sts	0x01BA, r24
    TCNT1 = 0;
     332:	10 92 85 00 	sts	0x0085, r1
     336:	10 92 84 00 	sts	0x0084, r1
}
     33a:	ff 91       	pop	r31
     33c:	ef 91       	pop	r30
     33e:	9f 91       	pop	r25
     340:	8f 91       	pop	r24
     342:	7f 91       	pop	r23
     344:	6f 91       	pop	r22
     346:	5f 91       	pop	r21
     348:	4f 91       	pop	r20
     34a:	0f 90       	pop	r0
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	0f 90       	pop	r0
     350:	1f 90       	pop	r1
     352:	18 95       	reti

00000354 <BubbleSort>:

// Bubble Sort (min->max)
void BubbleSort(void){
     354:	af 92       	push	r10
     356:	bf 92       	push	r11
     358:	cf 92       	push	r12
     35a:	df 92       	push	r13
     35c:	ef 92       	push	r14
     35e:	ff 92       	push	r15
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
    unsigned int tmp;
    unsigned int min;
    unsigned int min_index = 0;
    unsigned int n,m;
    
    for(m=0;m<Nmed;m++){
     368:	00 e6       	ldi	r16, 0x60	; 96
     36a:	12 e0       	ldi	r17, 0x02	; 2
     36c:	cc 24       	eor	r12, r12
     36e:	dd 24       	eor	r13, r13

// Bubble Sort (min->max)
void BubbleSort(void){
    unsigned int tmp;
    unsigned int min;
    unsigned int min_index = 0;
     370:	aa 24       	eor	r10, r10
     372:	bb 24       	eor	r11, r11
     374:	38 c0       	rjmp	.+112    	; 0x3e6 <BubbleSort+0x92>
    else                    tacho_n++;
    TCNT1 = 0;
}

// Bubble Sort (min->max)
void BubbleSort(void){
     376:	f8 01       	movw	r30, r16
     378:	ec 0f       	add	r30, r28
     37a:	fd 1f       	adc	r31, r29
    unsigned int n,m;
    
    for(m=0;m<Nmed;m++){
        min = 0xffffffff;
        for(n=m;n<Nmed;n++){
            if( proc_array[n] < min ){
     37c:	80 81       	ld	r24, Z
     37e:	91 81       	ldd	r25, Z+1	; 0x01
     380:	a2 81       	ldd	r26, Z+2	; 0x02
     382:	b3 81       	ldd	r27, Z+3	; 0x03
     384:	a7 01       	movw	r20, r14
     386:	60 e0       	ldi	r22, 0x00	; 0
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	84 17       	cp	r24, r20
     38c:	95 07       	cpc	r25, r21
     38e:	a6 07       	cpc	r26, r22
     390:	b7 07       	cpc	r27, r23
     392:	10 f4       	brcc	.+4      	; 0x398 <BubbleSort+0x44>
                min = proc_array[n];
     394:	7c 01       	movw	r14, r24
     396:	59 01       	movw	r10, r18
    unsigned int min_index = 0;
    unsigned int n,m;
    
    for(m=0;m<Nmed;m++){
        min = 0xffffffff;
        for(n=m;n<Nmed;n++){
     398:	2f 5f       	subi	r18, 0xFF	; 255
     39a:	3f 4f       	sbci	r19, 0xFF	; 255
     39c:	24 96       	adiw	r28, 0x04	; 4
     39e:	20 32       	cpi	r18, 0x20	; 32
     3a0:	31 05       	cpc	r19, r1
     3a2:	49 f7       	brne	.-46     	; 0x376 <BubbleSort+0x22>
            if( proc_array[n] < min ){
                min = proc_array[n];
                min_index = n;
            }
        }
        tmp                     = proc_array[m];
     3a4:	d8 01       	movw	r26, r16
     3a6:	8d 91       	ld	r24, X+
     3a8:	9c 91       	ld	r25, X
     3aa:	11 97       	sbiw	r26, 0x01	; 1
        proc_array[m]           = proc_array[min_index];
     3ac:	f5 01       	movw	r30, r10
     3ae:	ee 0f       	add	r30, r30
     3b0:	ff 1f       	adc	r31, r31
     3b2:	ee 0f       	add	r30, r30
     3b4:	ff 1f       	adc	r31, r31
     3b6:	e0 5a       	subi	r30, 0xA0	; 160
     3b8:	fd 4f       	sbci	r31, 0xFD	; 253
     3ba:	40 81       	ld	r20, Z
     3bc:	51 81       	ldd	r21, Z+1	; 0x01
     3be:	62 81       	ldd	r22, Z+2	; 0x02
     3c0:	73 81       	ldd	r23, Z+3	; 0x03
     3c2:	4d 93       	st	X+, r20
     3c4:	5d 93       	st	X+, r21
     3c6:	6d 93       	st	X+, r22
     3c8:	7d 93       	st	X+, r23
     3ca:	8d 01       	movw	r16, r26
        proc_array[min_index]   = tmp;
     3cc:	a0 e0       	ldi	r26, 0x00	; 0
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
     3d0:	80 83       	st	Z, r24
     3d2:	91 83       	std	Z+1, r25	; 0x01
     3d4:	a2 83       	std	Z+2, r26	; 0x02
     3d6:	b3 83       	std	Z+3, r27	; 0x03
    unsigned int tmp;
    unsigned int min;
    unsigned int min_index = 0;
    unsigned int n,m;
    
    for(m=0;m<Nmed;m++){
     3d8:	08 94       	sec
     3da:	c1 1c       	adc	r12, r1
     3dc:	d1 1c       	adc	r13, r1
     3de:	b0 e2       	ldi	r27, 0x20	; 32
     3e0:	cb 16       	cp	r12, r27
     3e2:	d1 04       	cpc	r13, r1
     3e4:	39 f0       	breq	.+14     	; 0x3f4 <BubbleSort+0xa0>
    else                    tacho_n++;
    TCNT1 = 0;
}

// Bubble Sort (min->max)
void BubbleSort(void){
     3e6:	96 01       	movw	r18, r12
     3e8:	c0 e0       	ldi	r28, 0x00	; 0
     3ea:	d0 e0       	ldi	r29, 0x00	; 0
     3ec:	ee 24       	eor	r14, r14
     3ee:	ea 94       	dec	r14
     3f0:	fe 2c       	mov	r15, r14
     3f2:	c1 cf       	rjmp	.-126    	; 0x376 <BubbleSort+0x22>
        }
        tmp                     = proc_array[m];
        proc_array[m]           = proc_array[min_index];
        proc_array[min_index]   = tmp;
    }
}
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	1f 91       	pop	r17
     3fa:	0f 91       	pop	r16
     3fc:	ff 90       	pop	r15
     3fe:	ef 90       	pop	r14
     400:	df 90       	pop	r13
     402:	cf 90       	pop	r12
     404:	bf 90       	pop	r11
     406:	af 90       	pop	r10
     408:	08 95       	ret

0000040a <TachoMeter_init>:

void TachoMeter_init(unsigned long int FOSC_in,unsigned long int Ndiv_in){
     40a:	dc 01       	movw	r26, r24
     40c:	cb 01       	movw	r24, r22
    
    FOSC = FOSC_in;
     40e:	80 93 d4 01 	sts	0x01D4, r24
     412:	90 93 d5 01 	sts	0x01D5, r25
     416:	a0 93 d6 01 	sts	0x01D6, r26
     41a:	b0 93 d7 01 	sts	0x01D7, r27
    Ndiv = Ndiv_in;
     41e:	20 93 c8 01 	sts	0x01C8, r18
     422:	30 93 c9 01 	sts	0x01C9, r19
     426:	40 93 ca 01 	sts	0x01CA, r20
     42a:	50 93 cb 01 	sts	0x01CB, r21
    
}
     42e:	08 95       	ret

00000430 <TachoMeter>:


unsigned long int TachoMeter(void){
     430:	cf 92       	push	r12
     432:	df 92       	push	r13
     434:	ef 92       	push	r14
     436:	ff 92       	push	r15
     438:	e8 ed       	ldi	r30, 0xD8	; 216
     43a:	f1 e0       	ldi	r31, 0x01	; 1
     43c:	a0 e6       	ldi	r26, 0x60	; 96
     43e:	b2 e0       	ldi	r27, 0x02	; 2
    unsigned int n;
    
    // Tacho Meter
    //Median Filter
    for(n=0;n<Nmed;n++){
        proc_array[n] = meas_array[n];
     440:	41 91       	ld	r20, Z+
     442:	51 91       	ld	r21, Z+
     444:	61 91       	ld	r22, Z+
     446:	71 91       	ld	r23, Z+
     448:	4d 93       	st	X+, r20
     44a:	5d 93       	st	X+, r21
     44c:	6d 93       	st	X+, r22
     44e:	7d 93       	st	X+, r23
    
    unsigned int n;
    
    // Tacho Meter
    //Median Filter
    for(n=0;n<Nmed;n++){
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	e8 35       	cpi	r30, 0x58	; 88
     454:	f8 07       	cpc	r31, r24
     456:	a1 f7       	brne	.-24     	; 0x440 <TachoMeter+0x10>
        proc_array[n] = meas_array[n];
    }
    BubbleSort();
     458:	7d df       	rcall	.-262    	; 0x354 <BubbleSort>
    
    // Calculate frequency
    if(meas_array[tacho_n] >= 0xffff){          // Too Long Gap Pulse
     45a:	e0 91 ba 01 	lds	r30, 0x01BA
     45e:	f0 91 bb 01 	lds	r31, 0x01BB
     462:	ee 0f       	add	r30, r30
     464:	ff 1f       	adc	r31, r31
     466:	ee 0f       	add	r30, r30
     468:	ff 1f       	adc	r31, r31
     46a:	e8 52       	subi	r30, 0x28	; 40
     46c:	fe 4f       	sbci	r31, 0xFE	; 254
     46e:	c0 80       	ld	r12, Z
     470:	d1 80       	ldd	r13, Z+1	; 0x01
     472:	e2 80       	ldd	r14, Z+2	; 0x02
     474:	f3 80       	ldd	r15, Z+3	; 0x03
     476:	8f ef       	ldi	r24, 0xFF	; 255
     478:	c8 16       	cp	r12, r24
     47a:	8f ef       	ldi	r24, 0xFF	; 255
     47c:	d8 06       	cpc	r13, r24
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	e8 06       	cpc	r14, r24
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	f8 06       	cpc	r15, r24
     486:	20 f0       	brcs	.+8      	; 0x490 <TachoMeter+0x60>
        freq = 0;
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	dc 01       	movw	r26, r24
     48e:	1b c0       	rjmp	.+54     	; 0x4c6 <TachoMeter+0x96>
    }else{                                      // Last Pulse
        freq = FOSC / Ndiv / meas_array[tacho_n];
     490:	60 91 d4 01 	lds	r22, 0x01D4
     494:	70 91 d5 01 	lds	r23, 0x01D5
     498:	80 91 d6 01 	lds	r24, 0x01D6
     49c:	90 91 d7 01 	lds	r25, 0x01D7
     4a0:	20 91 c8 01 	lds	r18, 0x01C8
     4a4:	30 91 c9 01 	lds	r19, 0x01C9
     4a8:	40 91 ca 01 	lds	r20, 0x01CA
     4ac:	50 91 cb 01 	lds	r21, 0x01CB
     4b0:	95 db       	rcall	.-2262   	; 0xfffffbdc <__eeprom_end+0xff7efbdc>
     4b2:	ca 01       	movw	r24, r20
     4b4:	b9 01       	movw	r22, r18
     4b6:	a7 01       	movw	r20, r14
     4b8:	96 01       	movw	r18, r12
     4ba:	90 db       	rcall	.-2272   	; 0xfffffbdc <__eeprom_end+0xff7efbdc>
     4bc:	ca 01       	movw	r24, r20
     4be:	b9 01       	movw	r22, r18
     4c0:	59 da       	rcall	.-2894   	; 0xfffff974 <__eeprom_end+0xff7ef974>
     4c2:	dc 01       	movw	r26, r24
     4c4:	cb 01       	movw	r24, r22
     4c6:	80 93 c0 01 	sts	0x01C0, r24
     4ca:	90 93 c1 01 	sts	0x01C1, r25
     4ce:	a0 93 c2 01 	sts	0x01C2, r26
     4d2:	b0 93 c3 01 	sts	0x01C3, r27
    }
    
    // Decide measured frequency is valid or invalid
    
    if( ( freq - freq_cur ) < RPM_DIFF/60.0 ){  // Tracking
     4d6:	c0 90 c0 01 	lds	r12, 0x01C0
     4da:	d0 90 c1 01 	lds	r13, 0x01C1
     4de:	e0 90 c2 01 	lds	r14, 0x01C2
     4e2:	f0 90 c3 01 	lds	r15, 0x01C3
     4e6:	c7 01       	movw	r24, r14
     4e8:	b6 01       	movw	r22, r12
     4ea:	20 91 cc 01 	lds	r18, 0x01CC
     4ee:	30 91 cd 01 	lds	r19, 0x01CD
     4f2:	40 91 ce 01 	lds	r20, 0x01CE
     4f6:	50 91 cf 01 	lds	r21, 0x01CF
     4fa:	3a d9       	rcall	.-3468   	; 0xfffff770 <__eeprom_end+0xff7ef770>
     4fc:	25 e5       	ldi	r18, 0x55	; 85
     4fe:	35 e5       	ldi	r19, 0x55	; 85
     500:	45 e0       	ldi	r20, 0x05	; 5
     502:	51 e4       	ldi	r21, 0x41	; 65
     504:	9a d9       	rcall	.-3276   	; 0xfffff83a <__eeprom_end+0xff7ef83a>
     506:	87 ff       	sbrs	r24, 7
     508:	09 c0       	rjmp	.+18     	; 0x51c <__stack+0x1d>
        freq_cur = freq;
     50a:	c0 92 cc 01 	sts	0x01CC, r12
     50e:	d0 92 cd 01 	sts	0x01CD, r13
     512:	e0 92 ce 01 	sts	0x01CE, r14
     516:	f0 92 cf 01 	sts	0x01CF, r15
     51a:	53 c0       	rjmp	.+166    	; 0x5c2 <__stack+0xc3>
    }else{                                      // Force Track
        cnt_min = proc_array[0];
     51c:	80 91 60 02 	lds	r24, 0x0260
     520:	90 91 61 02 	lds	r25, 0x0261
     524:	a0 91 62 02 	lds	r26, 0x0262
     528:	b0 91 63 02 	lds	r27, 0x0263
     52c:	80 93 5c 02 	sts	0x025C, r24
     530:	90 93 5d 02 	sts	0x025D, r25
     534:	a0 93 5e 02 	sts	0x025E, r26
     538:	b0 93 5f 02 	sts	0x025F, r27
        cnt_max = proc_array[Nmed-1];
     53c:	80 91 dc 02 	lds	r24, 0x02DC
     540:	90 91 dd 02 	lds	r25, 0x02DD
     544:	a0 91 de 02 	lds	r26, 0x02DE
     548:	b0 91 df 02 	lds	r27, 0x02DF
     54c:	80 93 58 02 	sts	0x0258, r24
     550:	90 93 59 02 	sts	0x0259, r25
     554:	a0 93 5a 02 	sts	0x025A, r26
     558:	b0 93 5b 02 	sts	0x025B, r27
        cnt = proc_array[Nmed>>1]; // 最新カウント値をセット
     55c:	c0 90 a0 02 	lds	r12, 0x02A0
     560:	d0 90 a1 02 	lds	r13, 0x02A1
     564:	e0 90 a2 02 	lds	r14, 0x02A2
     568:	f0 90 a3 02 	lds	r15, 0x02A3
     56c:	c0 92 c4 01 	sts	0x01C4, r12
     570:	d0 92 c5 01 	sts	0x01C5, r13
     574:	e0 92 c6 01 	sts	0x01C6, r14
     578:	f0 92 c7 01 	sts	0x01C7, r15
        freq_cur = FOSC / Ndiv / cnt;
     57c:	60 91 d4 01 	lds	r22, 0x01D4
     580:	70 91 d5 01 	lds	r23, 0x01D5
     584:	80 91 d6 01 	lds	r24, 0x01D6
     588:	90 91 d7 01 	lds	r25, 0x01D7
     58c:	20 91 c8 01 	lds	r18, 0x01C8
     590:	30 91 c9 01 	lds	r19, 0x01C9
     594:	40 91 ca 01 	lds	r20, 0x01CA
     598:	50 91 cb 01 	lds	r21, 0x01CB
     59c:	1f db       	rcall	.-2498   	; 0xfffffbdc <__eeprom_end+0xff7efbdc>
     59e:	ca 01       	movw	r24, r20
     5a0:	b9 01       	movw	r22, r18
     5a2:	a7 01       	movw	r20, r14
     5a4:	96 01       	movw	r18, r12
     5a6:	1a db       	rcall	.-2508   	; 0xfffffbdc <__eeprom_end+0xff7efbdc>
     5a8:	ca 01       	movw	r24, r20
     5aa:	b9 01       	movw	r22, r18
     5ac:	e3 d9       	rcall	.-3130   	; 0xfffff974 <__eeprom_end+0xff7ef974>
     5ae:	dc 01       	movw	r26, r24
     5b0:	cb 01       	movw	r24, r22
     5b2:	80 93 cc 01 	sts	0x01CC, r24
     5b6:	90 93 cd 01 	sts	0x01CD, r25
     5ba:	a0 93 ce 01 	sts	0x01CE, r26
     5be:	b0 93 cf 01 	sts	0x01CF, r27
    }
    
    // Calcurate RPM
    rpm = (unsigned long int)( 60.0 * freq_cur / Npulse );
     5c2:	60 91 cc 01 	lds	r22, 0x01CC
     5c6:	70 91 cd 01 	lds	r23, 0x01CD
     5ca:	80 91 ce 01 	lds	r24, 0x01CE
     5ce:	90 91 cf 01 	lds	r25, 0x01CF
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	40 e7       	ldi	r20, 0x70	; 112
     5d8:	52 e4       	ldi	r21, 0x42	; 66
     5da:	7e da       	rcall	.-2820   	; 0xfffffad8 <__eeprom_end+0xff7efad8>
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	40 e0       	ldi	r20, 0x00	; 0
     5e2:	5f e3       	ldi	r21, 0x3F	; 63
     5e4:	79 da       	rcall	.-2830   	; 0xfffffad8 <__eeprom_end+0xff7efad8>
     5e6:	9a d9       	rcall	.-3276   	; 0xfffff91c <__eeprom_end+0xff7ef91c>
     5e8:	60 93 d0 01 	sts	0x01D0, r22
     5ec:	70 93 d1 01 	sts	0x01D1, r23
     5f0:	80 93 d2 01 	sts	0x01D2, r24
     5f4:	90 93 d3 01 	sts	0x01D3, r25
    
    return rpm;
    
}
     5f8:	ff 90       	pop	r15
     5fa:	ef 90       	pop	r14
     5fc:	df 90       	pop	r13
     5fe:	cf 90       	pop	r12
     600:	08 95       	ret

00000602 <FaceMark_init>:
    
    //code 0-5 is used in "BarMeter"
    // "ω"
    code = 6;
    addr = 0;
    lcd_set_CGRAMaddr(code,addr);
     602:	86 e0       	ldi	r24, 0x06	; 6
     604:	60 e0       	ldi	r22, 0x00	; 0
     606:	54 d2       	rcall	.+1192   	; 0xab0 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00000000);
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	34 d1       	rcall	.+616    	; 0x874 <lcd_set_char>
    addr = 1;
    lcd_set_CGRAMaddr(code,addr);
     60c:	86 e0       	ldi	r24, 0x06	; 6
     60e:	61 e0       	ldi	r22, 0x01	; 1
     610:	4f d2       	rcall	.+1182   	; 0xab0 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00000000);
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	2f d1       	rcall	.+606    	; 0x874 <lcd_set_char>
    addr = 2;
    lcd_set_CGRAMaddr(code,addr);
     616:	86 e0       	ldi	r24, 0x06	; 6
     618:	62 e0       	ldi	r22, 0x02	; 2
     61a:	4a d2       	rcall	.+1172   	; 0xab0 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00000000);
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	2a d1       	rcall	.+596    	; 0x874 <lcd_set_char>
    addr = 3;
    lcd_set_CGRAMaddr(code,addr);
     620:	86 e0       	ldi	r24, 0x06	; 6
     622:	63 e0       	ldi	r22, 0x03	; 3
     624:	45 d2       	rcall	.+1162   	; 0xab0 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00000000);
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	25 d1       	rcall	.+586    	; 0x874 <lcd_set_char>
    addr = 4;
    lcd_set_CGRAMaddr(code,addr);
     62a:	86 e0       	ldi	r24, 0x06	; 6
     62c:	64 e0       	ldi	r22, 0x04	; 4
     62e:	40 d2       	rcall	.+1152   	; 0xab0 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010001);
     630:	81 e1       	ldi	r24, 0x11	; 17
     632:	20 d1       	rcall	.+576    	; 0x874 <lcd_set_char>
    addr = 5;
    lcd_set_CGRAMaddr(code,addr);
     634:	86 e0       	ldi	r24, 0x06	; 6
     636:	65 e0       	ldi	r22, 0x05	; 5
     638:	3b d2       	rcall	.+1142   	; 0xab0 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010101);
     63a:	85 e1       	ldi	r24, 0x15	; 21
     63c:	1b d1       	rcall	.+566    	; 0x874 <lcd_set_char>
    addr = 6;
    lcd_set_CGRAMaddr(code,addr);
     63e:	86 e0       	ldi	r24, 0x06	; 6
     640:	66 e0       	ldi	r22, 0x06	; 6
     642:	36 d2       	rcall	.+1132   	; 0xab0 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010101);
     644:	85 e1       	ldi	r24, 0x15	; 21
     646:	16 d1       	rcall	.+556    	; 0x874 <lcd_set_char>
    addr = 7;
    lcd_set_CGRAMaddr(code,addr);
     648:	86 e0       	ldi	r24, 0x06	; 6
     64a:	67 e0       	ldi	r22, 0x07	; 7
     64c:	31 d2       	rcall	.+1122   	; 0xab0 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00001010);
     64e:	8a e0       	ldi	r24, 0x0A	; 10
     650:	11 d1       	rcall	.+546    	; 0x874 <lcd_set_char>
    
    // "Д"
    code = 7;
    addr = 0;
    lcd_set_CGRAMaddr(code,addr);
     652:	87 e0       	ldi	r24, 0x07	; 7
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	2c d2       	rcall	.+1112   	; 0xab0 <lcd_set_CGRAMaddr>
    lcd_set_char(0x00);
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	0c d1       	rcall	.+536    	; 0x874 <lcd_set_char>
    addr = 1;
    lcd_set_CGRAMaddr(code,addr);
     65c:	87 e0       	ldi	r24, 0x07	; 7
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	27 d2       	rcall	.+1102   	; 0xab0 <lcd_set_CGRAMaddr>
    lcd_set_char(0x00);
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	07 d1       	rcall	.+526    	; 0x874 <lcd_set_char>
    addr = 2;
    lcd_set_CGRAMaddr(code,addr);
     666:	87 e0       	ldi	r24, 0x07	; 7
     668:	62 e0       	ldi	r22, 0x02	; 2
     66a:	22 d2       	rcall	.+1092   	; 0xab0 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00011100);
     66c:	8c e1       	ldi	r24, 0x1C	; 28
     66e:	02 d1       	rcall	.+516    	; 0x874 <lcd_set_char>
    addr = 3;
    lcd_set_CGRAMaddr(code,addr);
     670:	87 e0       	ldi	r24, 0x07	; 7
     672:	63 e0       	ldi	r22, 0x03	; 3
     674:	1d d2       	rcall	.+1082   	; 0xab0 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010100);
     676:	84 e1       	ldi	r24, 0x14	; 20
     678:	fd d0       	rcall	.+506    	; 0x874 <lcd_set_char>
    addr = 4;
    lcd_set_CGRAMaddr(code,addr);
     67a:	87 e0       	ldi	r24, 0x07	; 7
     67c:	64 e0       	ldi	r22, 0x04	; 4
     67e:	18 d2       	rcall	.+1072   	; 0xab0 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010100);
     680:	84 e1       	ldi	r24, 0x14	; 20
     682:	f8 d0       	rcall	.+496    	; 0x874 <lcd_set_char>
    addr = 5;
    lcd_set_CGRAMaddr(code,addr);
     684:	87 e0       	ldi	r24, 0x07	; 7
     686:	65 e0       	ldi	r22, 0x05	; 5
     688:	13 d2       	rcall	.+1062   	; 0xab0 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010010);
     68a:	82 e1       	ldi	r24, 0x12	; 18
     68c:	f3 d0       	rcall	.+486    	; 0x874 <lcd_set_char>
    addr = 6;
    lcd_set_CGRAMaddr(code,addr);
     68e:	87 e0       	ldi	r24, 0x07	; 7
     690:	66 e0       	ldi	r22, 0x06	; 6
     692:	0e d2       	rcall	.+1052   	; 0xab0 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00011111);
     694:	8f e1       	ldi	r24, 0x1F	; 31
     696:	ee d0       	rcall	.+476    	; 0x874 <lcd_set_char>
    addr = 7;
    lcd_set_CGRAMaddr(code,addr);
     698:	87 e0       	ldi	r24, 0x07	; 7
     69a:	67 e0       	ldi	r22, 0x07	; 7
     69c:	09 d2       	rcall	.+1042   	; 0xab0 <lcd_set_CGRAMaddr>
    lcd_set_char(0b00010001);
     69e:	81 e1       	ldi	r24, 0x11	; 17
     6a0:	e9 d0       	rcall	.+466    	; 0x874 <lcd_set_char>
    
}
     6a2:	08 95       	ret

000006a4 <shobon>:

void shobon(void){
    lcd_set_char('(');
     6a4:	88 e2       	ldi	r24, 0x28	; 40
     6a6:	e6 d0       	rcall	.+460    	; 0x874 <lcd_set_char>
    lcd_set_char(0x27);
     6a8:	87 e2       	ldi	r24, 0x27	; 39
     6aa:	e4 d0       	rcall	.+456    	; 0x874 <lcd_set_char>
    lcd_set_char(0xa5);
     6ac:	85 ea       	ldi	r24, 0xA5	; 165
     6ae:	e2 d0       	rcall	.+452    	; 0x874 <lcd_set_char>
    lcd_set_char(0x06); // "ω"
     6b0:	86 e0       	ldi	r24, 0x06	; 6
     6b2:	e0 d0       	rcall	.+448    	; 0x874 <lcd_set_char>
    lcd_set_char(0xa5);
     6b4:	85 ea       	ldi	r24, 0xA5	; 165
     6b6:	de d0       	rcall	.+444    	; 0x874 <lcd_set_char>
    lcd_set_char(0x60);
     6b8:	80 e6       	ldi	r24, 0x60	; 96
     6ba:	dc d0       	rcall	.+440    	; 0x874 <lcd_set_char>
    lcd_set_char(')');
     6bc:	89 e2       	ldi	r24, 0x29	; 41
     6be:	da d0       	rcall	.+436    	; 0x874 <lcd_set_char>
}
     6c0:	08 95       	ret

000006c2 <shakin>:

void shakin(void){
    lcd_set_char('(');
     6c2:	88 e2       	ldi	r24, 0x28	; 40
     6c4:	d7 d0       	rcall	.+430    	; 0x874 <lcd_set_char>
    lcd_set_char(0x60);
     6c6:	80 e6       	ldi	r24, 0x60	; 96
     6c8:	d5 d0       	rcall	.+426    	; 0x874 <lcd_set_char>
    lcd_set_char(0xa5);
     6ca:	85 ea       	ldi	r24, 0xA5	; 165
     6cc:	d3 d0       	rcall	.+422    	; 0x874 <lcd_set_char>
    lcd_set_char(0x06); // "ω"
     6ce:	86 e0       	ldi	r24, 0x06	; 6
     6d0:	d1 d0       	rcall	.+418    	; 0x874 <lcd_set_char>
    lcd_set_char(0xa5);
     6d2:	85 ea       	ldi	r24, 0xA5	; 165
     6d4:	cf d0       	rcall	.+414    	; 0x874 <lcd_set_char>
    lcd_set_char(0x27);
     6d6:	87 e2       	ldi	r24, 0x27	; 39
     6d8:	cd d0       	rcall	.+410    	; 0x874 <lcd_set_char>
    lcd_set_char(')');
     6da:	89 e2       	ldi	r24, 0x29	; 41
     6dc:	cb d0       	rcall	.+406    	; 0x874 <lcd_set_char>
}
     6de:	08 95       	ret

000006e0 <kuwa>:

void kuwa(void){
    lcd_set_char('(');
     6e0:	88 e2       	ldi	r24, 0x28	; 40
     6e2:	c8 d0       	rcall	.+400    	; 0x874 <lcd_set_char>
    lcd_set_char(0xdf);
     6e4:	8f ed       	ldi	r24, 0xDF	; 223
     6e6:	c6 d0       	rcall	.+396    	; 0x874 <lcd_set_char>
    lcd_set_char(0x07); // "Д"
     6e8:	87 e0       	ldi	r24, 0x07	; 7
     6ea:	c4 d0       	rcall	.+392    	; 0x874 <lcd_set_char>
    lcd_set_char(0xdf);
     6ec:	8f ed       	ldi	r24, 0xDF	; 223
     6ee:	c2 d0       	rcall	.+388    	; 0x874 <lcd_set_char>
    lcd_set_char(')');
     6f0:	89 e2       	ldi	r24, 0x29	; 41
     6f2:	c0 d0       	rcall	.+384    	; 0x874 <lcd_set_char>
}
     6f4:	08 95       	ret

000006f6 <SoftSPI_Init>:
unsigned char RS;
unsigned char DATA;

void SoftSPI_Init(void){
    /*MOSI,SCK=出力、他は入力に設定 */
    DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RCK);
     6f6:	84 b1       	in	r24, 0x04	; 4
     6f8:	87 60       	ori	r24, 0x07	; 7
     6fa:	84 b9       	out	0x04, r24	; 4
}
     6fc:	08 95       	ret

000006fe <SoftSPI_TX>:

void SoftSPI_TX(unsigned char cData){
     6fe:	27 e0       	ldi	r18, 0x07	; 7
     700:	30 e0       	ldi	r19, 0x00	; 0
    unsigned int n;
    for(n=0;n<8;n++){
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
        _delay_us(1);
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
     702:	90 e0       	ldi	r25, 0x00	; 0
}

void SoftSPI_TX(unsigned char cData){
    unsigned int n;
    for(n=0;n<8;n++){
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
     704:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     706:	45 e0       	ldi	r20, 0x05	; 5
     708:	4a 95       	dec	r20
     70a:	f1 f7       	brne	.-4      	; 0x708 <SoftSPI_TX+0xa>
     70c:	00 00       	nop
        _delay_us(1);
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
     70e:	28 98       	cbi	0x05, 0	; 5
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
     710:	65 b1       	in	r22, 0x05	; 5
     712:	ac 01       	movw	r20, r24
     714:	02 2e       	mov	r0, r18
     716:	02 c0       	rjmp	.+4      	; 0x71c <SoftSPI_TX+0x1e>
     718:	55 95       	asr	r21
     71a:	47 95       	ror	r20
     71c:	0a 94       	dec	r0
     71e:	e2 f7       	brpl	.-8      	; 0x718 <SoftSPI_TX+0x1a>
     720:	41 70       	andi	r20, 0x01	; 1
     722:	46 2b       	or	r20, r22
     724:	45 b9       	out	0x05, r20	; 5
     726:	45 e0       	ldi	r20, 0x05	; 5
     728:	4a 95       	dec	r20
     72a:	f1 f7       	brne	.-4      	; 0x728 <SoftSPI_TX+0x2a>
     72c:	00 00       	nop
        _delay_us(1);
        PORT_SPI |= (1<<DD_SCK);                // Set SCK "H"
     72e:	29 9a       	sbi	0x05, 1	; 5
     730:	45 e0       	ldi	r20, 0x05	; 5
     732:	4a 95       	dec	r20
     734:	f1 f7       	brne	.-4      	; 0x732 <SoftSPI_TX+0x34>
     736:	00 00       	nop
     738:	21 50       	subi	r18, 0x01	; 1
     73a:	30 40       	sbci	r19, 0x00	; 0
    DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RCK);
}

void SoftSPI_TX(unsigned char cData){
    unsigned int n;
    for(n=0;n<8;n++){
     73c:	4f ef       	ldi	r20, 0xFF	; 255
     73e:	2f 3f       	cpi	r18, 0xFF	; 255
     740:	34 07       	cpc	r19, r20
     742:	01 f7       	brne	.-64     	; 0x704 <SoftSPI_TX+0x6>
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
        _delay_us(1);
        PORT_SPI |= (1<<DD_SCK);                // Set SCK "H"
        _delay_us(1);
    }
}
     744:	08 95       	ret

00000746 <send_bits_595>:

void send_bits_595(unsigned char RS, unsigned char E, unsigned char DATA){
    unsigned char bits;
    bits = 0x3f & ( (RS<<5)|(E<<4)|DATA );
     746:	82 95       	swap	r24
     748:	88 0f       	add	r24, r24
     74a:	80 7e       	andi	r24, 0xE0	; 224
     74c:	84 2b       	or	r24, r20
     74e:	62 95       	swap	r22
     750:	60 7f       	andi	r22, 0xF0	; 240
     752:	68 2b       	or	r22, r24
    SoftSPI_TX(bits);
     754:	86 2f       	mov	r24, r22
     756:	8f 73       	andi	r24, 0x3F	; 63
     758:	d2 df       	rcall	.-92     	; 0x6fe <SoftSPI_TX>
     75a:	85 e3       	ldi	r24, 0x35	; 53
     75c:	8a 95       	dec	r24
     75e:	f1 f7       	brne	.-4      	; 0x75c <send_bits_595+0x16>
     760:	00 00       	nop
    _delay_us(10);
    PORT_SPI &= ~(1<<DD_RCK);   // Set RCK "L"
     762:	2a 98       	cbi	0x05, 2	; 5
    PORT_SPI |=  (1<<DD_RCK);   // Set RCK "H"
     764:	2a 9a       	sbi	0x05, 2	; 5
    PORT_SPI &= ~(1<<DD_RCK);   // Set RCK "L"
     766:	2a 98       	cbi	0x05, 2	; 5
}
     768:	08 95       	ret

0000076a <lcd_set_4bit>:

// fuction for sending control bitpattern
void lcd_set_4bit(unsigned char bitpattern){
	DATA    =   0x0f & bitpattern; // set sending data
     76a:	48 2f       	mov	r20, r24
     76c:	4f 70       	andi	r20, 0x0F	; 15
     76e:	40 93 e0 02 	sts	0x02E0, r20
	E       =   0;
     772:	10 92 e1 02 	sts	0x02E1, r1
    send_bits_595(RS,E,DATA);
     776:	80 91 e2 02 	lds	r24, 0x02E2
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	e4 df       	rcall	.-56     	; 0x746 <send_bits_595>
//	_delay_us(20);
	E       =   1;
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	80 93 e1 02 	sts	0x02E1, r24
    send_bits_595(RS,E,DATA);
     784:	80 91 e2 02 	lds	r24, 0x02E2
     788:	61 e0       	ldi	r22, 0x01	; 1
     78a:	40 91 e0 02 	lds	r20, 0x02E0
     78e:	db df       	rcall	.-74     	; 0x746 <send_bits_595>
//	_delay_us(20);
	E       =   0;
     790:	10 92 e1 02 	sts	0x02E1, r1
    send_bits_595(RS,E,DATA);
     794:	80 91 e2 02 	lds	r24, 0x02E2
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	40 91 e0 02 	lds	r20, 0x02E0
     79e:	d3 df       	rcall	.-90     	; 0x746 <send_bits_595>
//	_delay_us(20);
}
     7a0:	08 95       	ret

000007a2 <lcd_init>:

// Initializing LCD
void lcd_init(void){

	// set enable "0"
    E       = 0;
     7a2:	10 92 e1 02 	sts	0x02E1, r1
    // set instruction input mode
	RS      = 0;
     7a6:	10 92 e2 02 	sts	0x02E2, r1
	// initialize data port
	DATA	= 0x00;
     7aa:	10 92 e0 02 	sts	0x02E0, r1
    send_bits_595(RS,E,DATA);
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	c8 df       	rcall	.-112    	; 0x746 <send_bits_595>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7b6:	8f ef       	ldi	r24, 0xFF	; 255
     7b8:	99 ef       	ldi	r25, 0xF9	; 249
     7ba:	a0 e0       	ldi	r26, 0x00	; 0
     7bc:	81 50       	subi	r24, 0x01	; 1
     7be:	90 40       	sbci	r25, 0x00	; 0
     7c0:	a0 40       	sbci	r26, 0x00	; 0
     7c2:	e1 f7       	brne	.-8      	; 0x7bc <lcd_init+0x1a>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <lcd_init+0x24>
     7c6:	00 00       	nop
    
	// wait more than 15ms
	_delay_ms(20);

	// set 8-bit mode
	lcd_set_4bit(0x03);
     7c8:	83 e0       	ldi	r24, 0x03	; 3
     7ca:	cf df       	rcall	.-98     	; 0x76a <lcd_set_4bit>
     7cc:	af e1       	ldi	r26, 0x1F	; 31
     7ce:	be e4       	ldi	r27, 0x4E	; 78
     7d0:	11 97       	sbiw	r26, 0x01	; 1
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <lcd_init+0x2e>
     7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <lcd_init+0x34>
     7d6:	00 00       	nop
	_delay_ms(5);
	lcd_set_4bit(0x03);
     7d8:	83 e0       	ldi	r24, 0x03	; 3
     7da:	c7 df       	rcall	.-114    	; 0x76a <lcd_set_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7dc:	87 eb       	ldi	r24, 0xB7	; 183
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	f1 f7       	brne	.-4      	; 0x7e0 <lcd_init+0x3e>
     7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <lcd_init+0x44>
     7e6:	00 00       	nop
	_delay_us(110);
	lcd_set_4bit(0x03);
     7e8:	83 e0       	ldi	r24, 0x03	; 3
     7ea:	bf df       	rcall	.-130    	; 0x76a <lcd_set_4bit>
     7ec:	a7 ec       	ldi	r26, 0xC7	; 199
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	11 97       	sbiw	r26, 0x01	; 1
     7f2:	f1 f7       	brne	.-4      	; 0x7f0 <lcd_init+0x4e>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <lcd_init+0x54>
     7f6:	00 00       	nop
	_delay_us(50);
	
	// set 4-bit mode
	lcd_set_4bit(0x02);
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	b7 df       	rcall	.-146    	; 0x76a <lcd_set_4bit>
     7fc:	87 ec       	ldi	r24, 0xC7	; 199
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	01 97       	sbiw	r24, 0x01	; 1
     802:	f1 f7       	brne	.-4      	; 0x800 <lcd_init+0x5e>
     804:	00 c0       	rjmp	.+0      	; 0x806 <lcd_init+0x64>
     806:	00 00       	nop
	_delay_us(50);

	// function setting
	lcd_set_4bit(0x02);
     808:	82 e0       	ldi	r24, 0x02	; 2
     80a:	af df       	rcall	.-162    	; 0x76a <lcd_set_4bit>
	lcd_set_4bit(0x08);
     80c:	88 e0       	ldi	r24, 0x08	; 8
     80e:	ad df       	rcall	.-166    	; 0x76a <lcd_set_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     810:	af e9       	ldi	r26, 0x9F	; 159
     812:	bf e0       	ldi	r27, 0x0F	; 15
     814:	11 97       	sbiw	r26, 0x01	; 1
     816:	f1 f7       	brne	.-4      	; 0x814 <lcd_init+0x72>
     818:	00 c0       	rjmp	.+0      	; 0x81a <lcd_init+0x78>
     81a:	00 00       	nop
	_delay_ms(1);

	// set display on, cursol off and blink off
	lcd_set_4bit(0x00);
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	a5 df       	rcall	.-182    	; 0x76a <lcd_set_4bit>
	lcd_set_4bit(0x0c);
     820:	8c e0       	ldi	r24, 0x0C	; 12
     822:	a3 df       	rcall	.-186    	; 0x76a <lcd_set_4bit>
     824:	8f e9       	ldi	r24, 0x9F	; 159
     826:	9f e0       	ldi	r25, 0x0F	; 15
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	f1 f7       	brne	.-4      	; 0x828 <lcd_init+0x86>
     82c:	00 c0       	rjmp	.+0      	; 0x82e <lcd_init+0x8c>
     82e:	00 00       	nop
	_delay_ms(1);

	// set entry mode (cursol direction : right, disable shift)
	lcd_set_4bit(0x00);
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	9b df       	rcall	.-202    	; 0x76a <lcd_set_4bit>
	lcd_set_4bit(0x06);
     834:	86 e0       	ldi	r24, 0x06	; 6
     836:	99 df       	rcall	.-206    	; 0x76a <lcd_set_4bit>
     838:	af e9       	ldi	r26, 0x9F	; 159
     83a:	bf e0       	ldi	r27, 0x0F	; 15
     83c:	11 97       	sbiw	r26, 0x01	; 1
     83e:	f1 f7       	brne	.-4      	; 0x83c <lcd_init+0x9a>
     840:	00 c0       	rjmp	.+0      	; 0x842 <lcd_init+0xa0>
     842:	00 00       	nop
	_delay_ms(1);

	// clear display
	lcd_set_4bit(0x00);
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	91 df       	rcall	.-222    	; 0x76a <lcd_set_4bit>
	lcd_set_4bit(0x01);
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	8f df       	rcall	.-226    	; 0x76a <lcd_set_4bit>
     84c:	8f e3       	ldi	r24, 0x3F	; 63
     84e:	9f e1       	ldi	r25, 0x1F	; 31
     850:	01 97       	sbiw	r24, 0x01	; 1
     852:	f1 f7       	brne	.-4      	; 0x850 <lcd_init+0xae>
     854:	00 c0       	rjmp	.+0      	; 0x856 <lcd_init+0xb4>
     856:	00 00       	nop
	_delay_ms(2);

	// clear cursol position
	lcd_set_4bit(0x00);
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	87 df       	rcall	.-242    	; 0x76a <lcd_set_4bit>
	lcd_set_4bit(0x02);
     85c:	82 e0       	ldi	r24, 0x02	; 2
     85e:	85 df       	rcall	.-246    	; 0x76a <lcd_set_4bit>
     860:	af e3       	ldi	r26, 0x3F	; 63
     862:	bf e1       	ldi	r27, 0x1F	; 31
     864:	11 97       	sbiw	r26, 0x01	; 1
     866:	f1 f7       	brne	.-4      	; 0x864 <lcd_init+0xc2>
     868:	00 c0       	rjmp	.+0      	; 0x86a <lcd_init+0xc8>
     86a:	00 00       	nop
	_delay_ms(2);

	// set data input mode
    RS      =   1;
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	80 93 e2 02 	sts	0x02E2, r24
}
     872:	08 95       	ret

00000874 <lcd_set_char>:
    RS      =   1;
}

// LCD character (1 byte) sending
void lcd_set_char(unsigned char c)
{
     874:	cf 93       	push	r28
     876:	c8 2f       	mov	r28, r24
	lcd_set_4bit(c >> 4); // Upper Bit
     878:	82 95       	swap	r24
     87a:	8f 70       	andi	r24, 0x0F	; 15
     87c:	76 df       	rcall	.-276    	; 0x76a <lcd_set_4bit>
	lcd_set_4bit(0x0f & c); // Lower Bit
     87e:	8c 2f       	mov	r24, r28
     880:	8f 70       	andi	r24, 0x0F	; 15
     882:	73 df       	rcall	.-282    	; 0x76a <lcd_set_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     884:	87 ec       	ldi	r24, 0xC7	; 199
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	f1 f7       	brne	.-4      	; 0x888 <lcd_set_char+0x14>
     88c:	00 c0       	rjmp	.+0      	; 0x88e <lcd_set_char+0x1a>
     88e:	00 00       	nop
	_delay_us(50);
}
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <lcd_locate>:

// LCD character allocation
void lcd_locate(unsigned char row, unsigned char col)
{
	// set instruction input mode
    RS      =   0;
     894:	10 92 e2 02 	sts	0x02E2, r1
//	lcd_set_char(0x80 | col | (0x40 * row) );
	lcd_set_char(0x80 | ( col + 20*(unsigned int)(row/2) ) | ( 0x40 * (row%2) ) );
     898:	98 2f       	mov	r25, r24
     89a:	91 70       	andi	r25, 0x01	; 1
     89c:	92 95       	swap	r25
     89e:	99 0f       	add	r25, r25
     8a0:	99 0f       	add	r25, r25
     8a2:	90 7c       	andi	r25, 0xC0	; 192
     8a4:	90 68       	ori	r25, 0x80	; 128
     8a6:	86 95       	lsr	r24
     8a8:	24 e1       	ldi	r18, 0x14	; 20
     8aa:	82 9f       	mul	r24, r18
     8ac:	80 2d       	mov	r24, r0
     8ae:	11 24       	eor	r1, r1
     8b0:	86 0f       	add	r24, r22
     8b2:	89 2b       	or	r24, r25
     8b4:	df df       	rcall	.-66     	; 0x874 <lcd_set_char>
	// set data input mode
    RS      =   1;
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	80 93 e2 02 	sts	0x02E2, r24
}
     8bc:	08 95       	ret

000008be <lcd_set_str>:
	_delay_us(50);
}

// LCD String Sending
void lcd_set_str(unsigned char *s)
{
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	ec 01       	movw	r28, r24
	while (*s != 0) {
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <lcd_set_str+0xa>
		lcd_set_char(*s);
     8c6:	d6 df       	rcall	.-84     	; 0x874 <lcd_set_char>
}

// LCD String Sending
void lcd_set_str(unsigned char *s)
{
	while (*s != 0) {
     8c8:	89 91       	ld	r24, Y+
     8ca:	88 23       	and	r24, r24
     8cc:	e1 f7       	brne	.-8      	; 0x8c6 <lcd_set_str+0x8>
		lcd_set_char(*s);
		s++;
	} 
}
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <lcd_set_numeric>:

// Display numeric on LCD display
void lcd_set_numeric(float num, unsigned int Nint, unsigned int Nfrac, unsigned int sign){
     8d4:	2f 92       	push	r2
     8d6:	3f 92       	push	r3
     8d8:	4f 92       	push	r4
     8da:	5f 92       	push	r5
     8dc:	6f 92       	push	r6
     8de:	7f 92       	push	r7
     8e0:	8f 92       	push	r8
     8e2:	9f 92       	push	r9
     8e4:	af 92       	push	r10
     8e6:	bf 92       	push	r11
     8e8:	cf 92       	push	r12
     8ea:	df 92       	push	r13
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	28 97       	sbiw	r28, 0x08	; 8
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	de bf       	out	0x3e, r29	; 62
     904:	0f be       	out	0x3f, r0	; 63
     906:	cd bf       	out	0x3d, r28	; 61
     908:	6b 01       	movw	r12, r22
     90a:	7c 01       	movw	r14, r24
     90c:	1a 01       	movw	r2, r20
     90e:	29 01       	movw	r4, r18
    unsigned long int DivFactor = 1;
	unsigned int n, m;
	unsigned int d[10];
    unsigned int valid = 0;
    
    for(n=0;n<Nfrac;n++){
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	4c 01       	movw	r8, r24
     916:	0e c0       	rjmp	.+28     	; 0x934 <lcd_set_numeric+0x60>
        num = num * 10;
     918:	c7 01       	movw	r24, r14
     91a:	b6 01       	movw	r22, r12
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	40 e2       	ldi	r20, 0x20	; 32
     922:	51 e4       	ldi	r21, 0x41	; 65
     924:	d9 d8       	rcall	.-3662   	; 0xfffffad8 <__eeprom_end+0xff7efad8>
     926:	c6 2e       	mov	r12, r22
     928:	d7 2e       	mov	r13, r23
     92a:	e8 2e       	mov	r14, r24
     92c:	f9 2e       	mov	r15, r25
    unsigned long int DivFactor = 1;
	unsigned int n, m;
	unsigned int d[10];
    unsigned int valid = 0;
    
    for(n=0;n<Nfrac;n++){
     92e:	08 94       	sec
     930:	81 1c       	adc	r8, r1
     932:	91 1c       	adc	r9, r1
     934:	84 14       	cp	r8, r4
     936:	95 04       	cpc	r9, r5
     938:	79 f7       	brne	.-34     	; 0x918 <lcd_set_numeric+0x44>
        num = num * 10;
    }
    
    // Detect sign
    if( sign == 1){
     93a:	01 30       	cpi	r16, 0x01	; 1
     93c:	11 05       	cpc	r17, r1
     93e:	71 f4       	brne	.+28     	; 0x95c <lcd_set_numeric+0x88>
        if( num < 0 ){
     940:	c7 01       	movw	r24, r14
     942:	b6 01       	movw	r22, r12
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	a9 01       	movw	r20, r18
     94a:	77 d7       	rcall	.+3822   	; 0x183a <__cmpsf2>
     94c:	87 ff       	sbrs	r24, 7
     94e:	1a c0       	rjmp	.+52     	; 0x984 <lcd_set_numeric+0xb0>
            lcd_set_char('-');
     950:	8d e2       	ldi	r24, 0x2D	; 45
     952:	90 df       	rcall	.-224    	; 0x874 <lcd_set_char>
            num = -num;
     954:	f7 fa       	bst	r15, 7
     956:	f0 94       	com	r15
     958:	f7 f8       	bld	r15, 7
     95a:	f0 94       	com	r15
        for(m=n+1;m<Nint+Nfrac;m++){
            DivFactor = DivFactor * 10;
        }
        
        d[n] = (unsigned int)( num / DivFactor );
        if( (valid == 0) && ( d[n]!=0 || n==Nint-1) ) valid = 1;
     95c:	00 e0       	ldi	r16, 0x00	; 0
     95e:	10 e0       	ldi	r17, 0x00	; 0
     960:	66 24       	eor	r6, r6
     962:	77 24       	eor	r7, r7
            lcd_set_char('+');
        }
    }
    // end of
				
    for(n=0;n<=Nint+Nfrac-1;n++){
     964:	92 01       	movw	r18, r4
     966:	22 0d       	add	r18, r2
     968:	33 1d       	adc	r19, r3
     96a:	3a 83       	std	Y+2, r19	; 0x02
     96c:	29 83       	std	Y+1, r18	; 0x01
     96e:	21 50       	subi	r18, 0x01	; 1
     970:	30 40       	sbci	r19, 0x00	; 0
     972:	3c 83       	std	Y+4, r19	; 0x04
     974:	2b 83       	std	Y+3, r18	; 0x03
        for(m=n+1;m<Nint+Nfrac;m++){
            DivFactor = DivFactor * 10;
        }
        
        d[n] = (unsigned int)( num / DivFactor );
        if( (valid == 0) && ( d[n]!=0 || n==Nint-1) ) valid = 1;
     976:	c1 01       	movw	r24, r2
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	9e 83       	std	Y+6, r25	; 0x06
     97c:	8d 83       	std	Y+5, r24	; 0x05
     97e:	78 86       	std	Y+8, r7	; 0x08
     980:	6f 82       	std	Y+7, r6	; 0x07
     982:	64 c0       	rjmp	.+200    	; 0xa4c <lcd_set_numeric+0x178>
    if( sign == 1){
        if( num < 0 ){
            lcd_set_char('-');
            num = -num;
        }else{
            lcd_set_char('+');
     984:	8b e2       	ldi	r24, 0x2B	; 43
     986:	76 df       	rcall	.-276    	; 0x874 <lcd_set_char>
     988:	e9 cf       	rjmp	.-46     	; 0x95c <lcd_set_numeric+0x88>
    }
    // end of
				
    for(n=0;n<=Nint+Nfrac-1;n++){
        
        if( ( n== Nint ) && ( Nfrac!=0 )){
     98a:	02 15       	cp	r16, r2
     98c:	13 05       	cpc	r17, r3
     98e:	29 f4       	brne	.+10     	; 0x99a <lcd_set_numeric+0xc6>
     990:	41 14       	cp	r4, r1
     992:	51 04       	cpc	r5, r1
     994:	11 f0       	breq	.+4      	; 0x99a <lcd_set_numeric+0xc6>
            lcd_set_char('.');
     996:	8e e2       	ldi	r24, 0x2E	; 46
     998:	6d df       	rcall	.-294    	; 0x874 <lcd_set_char>
        }
        
        DivFactor = 1;
        for(m=n+1;m<Nint+Nfrac;m++){
     99a:	38 01       	movw	r6, r16
        
        if( ( n== Nint ) && ( Nfrac!=0 )){
            lcd_set_char('.');
        }
        
        DivFactor = 1;
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	88 2e       	mov	r8, r24
     9a0:	91 2c       	mov	r9, r1
     9a2:	a1 2c       	mov	r10, r1
     9a4:	b1 2c       	mov	r11, r1
     9a6:	c5 01       	movw	r24, r10
     9a8:	b4 01       	movw	r22, r8
        for(m=n+1;m<Nint+Nfrac;m++){
     9aa:	05 c0       	rjmp	.+10     	; 0x9b6 <lcd_set_numeric+0xe2>
            DivFactor = DivFactor * 10;
     9ac:	2a e0       	ldi	r18, 0x0A	; 10
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	f4 d8       	rcall	.-3608   	; 0xfffffb9e <__eeprom_end+0xff7efb9e>
     9b6:	08 94       	sec
     9b8:	61 1c       	adc	r6, r1
     9ba:	71 1c       	adc	r7, r1
        if( ( n== Nint ) && ( Nfrac!=0 )){
            lcd_set_char('.');
        }
        
        DivFactor = 1;
        for(m=n+1;m<Nint+Nfrac;m++){
     9bc:	e9 81       	ldd	r30, Y+1	; 0x01
     9be:	fa 81       	ldd	r31, Y+2	; 0x02
     9c0:	6e 16       	cp	r6, r30
     9c2:	7f 06       	cpc	r7, r31
     9c4:	98 f3       	brcs	.-26     	; 0x9ac <lcd_set_numeric+0xd8>
     9c6:	4b 01       	movw	r8, r22
     9c8:	5c 01       	movw	r10, r24
            DivFactor = DivFactor * 10;
        }
        
        d[n] = (unsigned int)( num / DivFactor );
     9ca:	d4 d7       	rcall	.+4008   	; 0x1974 <__floatunsisf>
     9cc:	9b 01       	movw	r18, r22
     9ce:	ac 01       	movw	r20, r24
     9d0:	c7 01       	movw	r24, r14
     9d2:	b6 01       	movw	r22, r12
     9d4:	36 d7       	rcall	.+3692   	; 0x1842 <__divsf3>
     9d6:	a2 d7       	rcall	.+3908   	; 0x191c <__fixunssfsi>
     9d8:	dc 01       	movw	r26, r24
     9da:	cb 01       	movw	r24, r22
     9dc:	3c 01       	movw	r6, r24
        if( (valid == 0) && ( d[n]!=0 || n==Nint-1) ) valid = 1;
     9de:	2f 81       	ldd	r18, Y+7	; 0x07
     9e0:	38 85       	ldd	r19, Y+8	; 0x08
     9e2:	21 15       	cp	r18, r1
     9e4:	31 05       	cpc	r19, r1
     9e6:	79 f4       	brne	.+30     	; 0xa06 <lcd_set_numeric+0x132>
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	98 87       	std	Y+8, r25	; 0x08
     9ee:	8f 83       	std	Y+7, r24	; 0x07
     9f0:	61 14       	cp	r6, r1
     9f2:	71 04       	cpc	r7, r1
     9f4:	61 f4       	brne	.+24     	; 0xa0e <lcd_set_numeric+0x13a>
     9f6:	ed 81       	ldd	r30, Y+5	; 0x05
     9f8:	fe 81       	ldd	r31, Y+6	; 0x06
     9fa:	0e 17       	cp	r16, r30
     9fc:	1f 07       	cpc	r17, r31
     9fe:	39 f0       	breq	.+14     	; 0xa0e <lcd_set_numeric+0x13a>
     a00:	18 86       	std	Y+8, r1	; 0x08
     a02:	1f 82       	std	Y+7, r1	; 0x07
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <lcd_set_numeric+0x13a>
     a06:	21 e0       	ldi	r18, 0x01	; 1
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	38 87       	std	Y+8, r19	; 0x08
     a0c:	2f 83       	std	Y+7, r18	; 0x07
        num = num - d[n]*DivFactor;
     a0e:	b3 01       	movw	r22, r6
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	a5 01       	movw	r20, r10
     a16:	94 01       	movw	r18, r8
     a18:	c2 d8       	rcall	.-3708   	; 0xfffffb9e <__eeprom_end+0xff7efb9e>
     a1a:	ac d7       	rcall	.+3928   	; 0x1974 <__floatunsisf>
     a1c:	9b 01       	movw	r18, r22
     a1e:	ac 01       	movw	r20, r24
     a20:	c7 01       	movw	r24, r14
     a22:	b6 01       	movw	r22, r12
     a24:	a5 d6       	rcall	.+3402   	; 0x1770 <__subsf3>
     a26:	6b 01       	movw	r12, r22
     a28:	e8 2e       	mov	r14, r24
     a2a:	f9 2e       	mov	r15, r25
        
        if( (valid == 1)|(n == (Nint+Nfrac-1)) ) lcd_set_char(0x30 + d[n]);
     a2c:	ef 81       	ldd	r30, Y+7	; 0x07
     a2e:	f8 85       	ldd	r31, Y+8	; 0x08
     a30:	30 97       	sbiw	r30, 0x00	; 0
     a32:	29 f4       	brne	.+10     	; 0xa3e <lcd_set_numeric+0x16a>
     a34:	2b 81       	ldd	r18, Y+3	; 0x03
     a36:	3c 81       	ldd	r19, Y+4	; 0x04
     a38:	02 17       	cp	r16, r18
     a3a:	13 07       	cpc	r17, r19
     a3c:	19 f4       	brne	.+6      	; 0xa44 <lcd_set_numeric+0x170>
     a3e:	86 2d       	mov	r24, r6
     a40:	80 5d       	subi	r24, 0xD0	; 208
     a42:	01 c0       	rjmp	.+2      	; 0xa46 <lcd_set_numeric+0x172>
        else if( valid == 0 )                   lcd_set_char(0x20);
     a44:	80 e2       	ldi	r24, 0x20	; 32
     a46:	16 df       	rcall	.-468    	; 0x874 <lcd_set_char>
     a48:	0f 5f       	subi	r16, 0xFF	; 255
     a4a:	1f 4f       	sbci	r17, 0xFF	; 255
            lcd_set_char('+');
        }
    }
    // end of
				
    for(n=0;n<=Nint+Nfrac-1;n++){
     a4c:	8b 81       	ldd	r24, Y+3	; 0x03
     a4e:	9c 81       	ldd	r25, Y+4	; 0x04
     a50:	80 17       	cp	r24, r16
     a52:	91 07       	cpc	r25, r17
     a54:	08 f0       	brcs	.+2      	; 0xa58 <lcd_set_numeric+0x184>
     a56:	99 cf       	rjmp	.-206    	; 0x98a <lcd_set_numeric+0xb6>
        
        if( (valid == 1)|(n == (Nint+Nfrac-1)) ) lcd_set_char(0x30 + d[n]);
        else if( valid == 0 )                   lcd_set_char(0x20);
        else                                    lcd_set_char(0xff);
    }
}
     a58:	28 96       	adiw	r28, 0x08	; 8
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	cd bf       	out	0x3d, r28	; 61
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	cf 90       	pop	r12
     a74:	bf 90       	pop	r11
     a76:	af 90       	pop	r10
     a78:	9f 90       	pop	r9
     a7a:	8f 90       	pop	r8
     a7c:	7f 90       	pop	r7
     a7e:	6f 90       	pop	r6
     a80:	5f 90       	pop	r5
     a82:	4f 90       	pop	r4
     a84:	3f 90       	pop	r3
     a86:	2f 90       	pop	r2
     a88:	08 95       	ret

00000a8a <lcd_clear>:

// Clear LCD
void lcd_clear(void){
	// clear display
    RS      =   0;
     a8a:	10 92 e2 02 	sts	0x02E2, r1
	lcd_set_4bit(0x00);
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	6c de       	rcall	.-808    	; 0x76a <lcd_set_4bit>
	lcd_set_4bit(0x01);
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	6a de       	rcall	.-812    	; 0x76a <lcd_set_4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a96:	8f e9       	ldi	r24, 0x9F	; 159
     a98:	9f e0       	ldi	r25, 0x0F	; 15
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	f1 f7       	brne	.-4      	; 0xa9a <lcd_clear+0x10>
     a9e:	00 c0       	rjmp	.+0      	; 0xaa0 <lcd_clear+0x16>
     aa0:	00 00       	nop
	_delay_ms(1);
    RS      =   1;
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	80 93 e2 02 	sts	0x02E2, r24
	lcd_locate(0,0);
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	f3 de       	rcall	.-538    	; 0x894 <lcd_locate>
}
     aae:	08 95       	ret

00000ab0 <lcd_set_CGRAMaddr>:

// Set CGRAM address
void lcd_set_CGRAMaddr(unsigned char code,unsigned char addr)
{
	// set instruction input mode
    RS      =   0;
     ab0:	10 92 e2 02 	sts	0x02E2, r1
    lcd_set_char(0x40 | code<<3 | addr );
     ab4:	60 64       	ori	r22, 0x40	; 64
     ab6:	88 0f       	add	r24, r24
     ab8:	88 0f       	add	r24, r24
     aba:	88 0f       	add	r24, r24
     abc:	86 2b       	or	r24, r22
     abe:	da de       	rcall	.-588    	; 0x874 <lcd_set_char>
	// set data input mode
    RS      =   1;
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	80 93 e2 02 	sts	0x02E2, r24
}
     ac6:	08 95       	ret

00000ac8 <SoftSPI_LED_Init>:
unsigned char RS;
unsigned char DATA;

void SoftSPI_LED_Init(void){
    /*MOSI,SCK=出力、他は入力に設定 */
    DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RCK);
     ac8:	84 b1       	in	r24, 0x04	; 4
     aca:	88 63       	ori	r24, 0x38	; 56
     acc:	84 b9       	out	0x04, r24	; 4
}
     ace:	08 95       	ret

00000ad0 <SoftSPI_LED_TX>:

void SoftSPI_LED_TX(unsigned char cData){
     ad0:	27 e0       	ldi	r18, 0x07	; 7
     ad2:	30 e0       	ldi	r19, 0x00	; 0
    unsigned int n;
    for(n=0;n<8;n++){
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
        _delay_us(1);
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
     ad4:	90 e0       	ldi	r25, 0x00	; 0
}

void SoftSPI_LED_TX(unsigned char cData){
    unsigned int n;
    for(n=0;n<8;n++){
        PORT_SPI &= ~(1<<DD_SCK);               // Set SCK "L"
     ad6:	2c 98       	cbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ad8:	45 e0       	ldi	r20, 0x05	; 5
     ada:	4a 95       	dec	r20
     adc:	f1 f7       	brne	.-4      	; 0xada <SoftSPI_LED_TX+0xa>
     ade:	00 00       	nop
        _delay_us(1);
        PORT_SPI &= ~(1<<DD_MOSI);              // Initialize Data Port
     ae0:	2b 98       	cbi	0x05, 3	; 5
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
     ae2:	65 b1       	in	r22, 0x05	; 5
     ae4:	ac 01       	movw	r20, r24
     ae6:	02 2e       	mov	r0, r18
     ae8:	02 c0       	rjmp	.+4      	; 0xaee <SoftSPI_LED_TX+0x1e>
     aea:	55 95       	asr	r21
     aec:	47 95       	ror	r20
     aee:	0a 94       	dec	r0
     af0:	e2 f7       	brpl	.-8      	; 0xaea <SoftSPI_LED_TX+0x1a>
     af2:	41 70       	andi	r20, 0x01	; 1
     af4:	50 70       	andi	r21, 0x00	; 0
     af6:	73 e0       	ldi	r23, 0x03	; 3
     af8:	44 0f       	add	r20, r20
     afa:	55 1f       	adc	r21, r21
     afc:	7a 95       	dec	r23
     afe:	e1 f7       	brne	.-8      	; 0xaf8 <SoftSPI_LED_TX+0x28>
     b00:	64 2b       	or	r22, r20
     b02:	65 b9       	out	0x05, r22	; 5
     b04:	45 e0       	ldi	r20, 0x05	; 5
     b06:	4a 95       	dec	r20
     b08:	f1 f7       	brne	.-4      	; 0xb06 <SoftSPI_LED_TX+0x36>
     b0a:	00 00       	nop
        _delay_us(1);
        PORT_SPI |= (1<<DD_SCK);                // Set SCK "H"
     b0c:	2c 9a       	sbi	0x05, 4	; 5
     b0e:	45 e0       	ldi	r20, 0x05	; 5
     b10:	4a 95       	dec	r20
     b12:	f1 f7       	brne	.-4      	; 0xb10 <SoftSPI_LED_TX+0x40>
     b14:	00 00       	nop
     b16:	21 50       	subi	r18, 0x01	; 1
     b18:	30 40       	sbci	r19, 0x00	; 0
    DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_RCK);
}

void SoftSPI_LED_TX(unsigned char cData){
    unsigned int n;
    for(n=0;n<8;n++){
     b1a:	4f ef       	ldi	r20, 0xFF	; 255
     b1c:	2f 3f       	cpi	r18, 0xFF	; 255
     b1e:	34 07       	cpc	r19, r20
     b20:	d1 f6       	brne	.-76     	; 0xad6 <SoftSPI_LED_TX+0x6>
        PORT_SPI |= (0x01&(cData>>(7-n)))<<DD_MOSI; // Set Data bit
        _delay_us(1);
        PORT_SPI |= (1<<DD_SCK);                // Set SCK "H"
        _delay_us(1);
    }
}
     b22:	08 95       	ret

00000b24 <send_bits_595_LED>:

void send_bits_595_LED(unsigned char DATA){
    unsigned char bits;
    bits = DATA;
    SoftSPI_LED_TX(bits);
     b24:	d5 df       	rcall	.-86     	; 0xad0 <SoftSPI_LED_TX>
     b26:	85 e3       	ldi	r24, 0x35	; 53
     b28:	8a 95       	dec	r24
     b2a:	f1 f7       	brne	.-4      	; 0xb28 <send_bits_595_LED+0x4>
     b2c:	00 00       	nop
    _delay_us(10);
    PORT_SPI &= ~(1<<DD_RCK);   // Set RCK "L"
     b2e:	2d 98       	cbi	0x05, 5	; 5
    PORT_SPI |=  (1<<DD_RCK);   // Set RCK "H"
     b30:	2d 9a       	sbi	0x05, 5	; 5
    PORT_SPI &= ~(1<<DD_RCK);   // Set RCK "L"
     b32:	2d 98       	cbi	0x05, 5	; 5
}
     b34:	08 95       	ret

00000b36 <set_initial_t_id>:
};

// Measure Tarfet ID Declarations
uint8_t     t_id[Ndata];
void set_initial_t_id(void){
    t_id[0] = 6;
     b36:	86 e0       	ldi	r24, 0x06	; 6
     b38:	80 93 f1 02 	sts	0x02F1, r24
    t_id[1] = 5;
     b3c:	85 e0       	ldi	r24, 0x05	; 5
     b3e:	80 93 f2 02 	sts	0x02F2, r24
    t_id[2] = 3;
     b42:	83 e0       	ldi	r24, 0x03	; 3
     b44:	80 93 f3 02 	sts	0x02F3, r24
    t_id[3] = 0;
     b48:	10 92 f4 02 	sts	0x02F4, r1
}
     b4c:	08 95       	ret

00000b4e <__vector_default>:
uint16_t            timer0_cnt_last = 0;
uint16_t            delay_cnt;


// Bad ISR interrput detector for debugging
ISR(BADISR_vect){
     b4e:	1f 92       	push	r1
     b50:	0f 92       	push	r0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	0f 92       	push	r0
     b56:	11 24       	eor	r1, r1
    cli();    // これ以上割り込ませない
     b58:	f8 94       	cli
    lcd_locate(0,0);
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	9a de       	rcall	.-716    	; 0x894 <lcd_locate>
    lcd_set_str("BADISR ERROR");
     b60:	84 e0       	ldi	r24, 0x04	; 4
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	ac de       	rcall	.-680    	; 0x8be <lcd_set_str>
     b66:	ff cf       	rjmp	.-2      	; 0xb66 <__vector_default+0x18>

00000b68 <timer0_init>:


// 8-bit timer intialazation for PWM FuelPump Driver
unsigned long int   Ndiv0;
void timer0_init(void) {
    TCCR0A  = 0b10100001;	// Timer/Counter1 Control Register A
     b68:	81 ea       	ldi	r24, 0xA1	; 161
     b6a:	84 bd       	out	0x24, r24	; 36
    TCCR0B  = 0b00000101;
     b6c:	85 e0       	ldi	r24, 0x05	; 5
     b6e:	85 bd       	out	0x25, r24	; 37
    TIMSK0  = 0b00000001;   // ovfl interrupt is enabled for delay timer
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	80 93 6e 00 	sts	0x006E, r24
    TCNT0   = 0x00;         // Initialize 8-bit counter bit
     b76:	16 bc       	out	0x26, r1	; 38
    OCR0A   = 0x80;         // 8-bit register for compare
     b78:	80 e8       	ldi	r24, 0x80	; 128
     b7a:	87 bd       	out	0x27, r24	; 39

    switch( TCCR0B & 0b00000111 ){
     b7c:	85 b5       	in	r24, 0x25	; 37
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	87 70       	andi	r24, 0x07	; 7
     b82:	90 70       	andi	r25, 0x00	; 0
     b84:	83 30       	cpi	r24, 0x03	; 3
     b86:	91 05       	cpc	r25, r1
     b88:	b1 f0       	breq	.+44     	; 0xbb6 <timer0_init+0x4e>
     b8a:	84 30       	cpi	r24, 0x04	; 4
     b8c:	91 05       	cpc	r25, r1
     b8e:	3c f4       	brge	.+14     	; 0xb9e <timer0_init+0x36>
     b90:	81 30       	cpi	r24, 0x01	; 1
     b92:	91 05       	cpc	r25, r1
     b94:	f9 f0       	breq	.+62     	; 0xbd4 <timer0_init+0x6c>
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	91 05       	cpc	r25, r1
     b9a:	e1 f4       	brne	.+56     	; 0xbd4 <timer0_init+0x6c>
     b9c:	07 c0       	rjmp	.+14     	; 0xbac <timer0_init+0x44>
     b9e:	84 30       	cpi	r24, 0x04	; 4
     ba0:	91 05       	cpc	r25, r1
     ba2:	71 f0       	breq	.+28     	; 0xbc0 <timer0_init+0x58>
     ba4:	85 30       	cpi	r24, 0x05	; 5
     ba6:	91 05       	cpc	r25, r1
     ba8:	a9 f4       	brne	.+42     	; 0xbd4 <timer0_init+0x6c>
     baa:	0f c0       	rjmp	.+30     	; 0xbca <timer0_init+0x62>
        case 0b001 :
            Ndiv0 = 1;
            break;
        case 0b010 :
            Ndiv0 = 8;
     bac:	88 e0       	ldi	r24, 0x08	; 8
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	a0 e0       	ldi	r26, 0x00	; 0
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	13 c0       	rjmp	.+38     	; 0xbdc <timer0_init+0x74>
            break;
        case 0b011 :
            Ndiv0 = 64;
     bb6:	80 e4       	ldi	r24, 0x40	; 64
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	a0 e0       	ldi	r26, 0x00	; 0
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	0e c0       	rjmp	.+28     	; 0xbdc <timer0_init+0x74>
            break;
        case 0b100 :
            Ndiv0 = 256;
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	a0 e0       	ldi	r26, 0x00	; 0
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	09 c0       	rjmp	.+18     	; 0xbdc <timer0_init+0x74>
            break;
        case 0b101 :
            Ndiv0 = 1024;
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	94 e0       	ldi	r25, 0x04	; 4
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	04 c0       	rjmp	.+8      	; 0xbdc <timer0_init+0x74>
            break;
        default :
            Ndiv0 = 1;
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	a0 e0       	ldi	r26, 0x00	; 0
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	80 93 f5 02 	sts	0x02F5, r24
     be0:	90 93 f6 02 	sts	0x02F6, r25
     be4:	a0 93 f7 02 	sts	0x02F7, r26
     be8:	b0 93 f8 02 	sts	0x02F8, r27
     bec:	08 95       	ret

00000bee <timer1_init>:
}

// 16-bit Counter intialazation for Tacho Meter
unsigned long int   Ndiv1;
void timer1_init(void) {
	TCCR1A  = 0b00000000;	// Timer/Counter1 Control Register A
     bee:	10 92 80 00 	sts	0x0080, r1
	TCCR1B  = 0b00000011;
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	80 93 81 00 	sts	0x0081, r24
	TCCR1C  = 0b00000000;
     bf8:	10 92 82 00 	sts	0x0082, r1
	TIMSK1  = 0b00000001;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	80 93 6f 00 	sts	0x006F, r24
	TCNT1   = 0x0000;         // Initialize 16-bit counter bit
     c02:	10 92 85 00 	sts	0x0085, r1
     c06:	10 92 84 00 	sts	0x0084, r1
	OCR1A   = 0xffff;         // 16-bit register for compare
     c0a:	8f ef       	ldi	r24, 0xFF	; 255
     c0c:	9f ef       	ldi	r25, 0xFF	; 255
     c0e:	90 93 89 00 	sts	0x0089, r25
     c12:	80 93 88 00 	sts	0x0088, r24

    switch( TCCR1B & 0b00000111 ){
     c16:	80 91 81 00 	lds	r24, 0x0081
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	87 70       	andi	r24, 0x07	; 7
     c1e:	90 70       	andi	r25, 0x00	; 0
     c20:	83 30       	cpi	r24, 0x03	; 3
     c22:	91 05       	cpc	r25, r1
     c24:	b1 f0       	breq	.+44     	; 0xc52 <timer1_init+0x64>
     c26:	84 30       	cpi	r24, 0x04	; 4
     c28:	91 05       	cpc	r25, r1
     c2a:	3c f4       	brge	.+14     	; 0xc3a <timer1_init+0x4c>
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	91 05       	cpc	r25, r1
     c30:	f9 f0       	breq	.+62     	; 0xc70 <timer1_init+0x82>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	91 05       	cpc	r25, r1
     c36:	e1 f4       	brne	.+56     	; 0xc70 <timer1_init+0x82>
     c38:	07 c0       	rjmp	.+14     	; 0xc48 <timer1_init+0x5a>
     c3a:	84 30       	cpi	r24, 0x04	; 4
     c3c:	91 05       	cpc	r25, r1
     c3e:	71 f0       	breq	.+28     	; 0xc5c <timer1_init+0x6e>
     c40:	85 30       	cpi	r24, 0x05	; 5
     c42:	91 05       	cpc	r25, r1
     c44:	a9 f4       	brne	.+42     	; 0xc70 <timer1_init+0x82>
     c46:	0f c0       	rjmp	.+30     	; 0xc66 <timer1_init+0x78>
        case 0b001 :
            Ndiv1 = 1;
            break;
        case 0b010 :
            Ndiv1 = 8;
     c48:	88 e0       	ldi	r24, 0x08	; 8
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	a0 e0       	ldi	r26, 0x00	; 0
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	13 c0       	rjmp	.+38     	; 0xc78 <timer1_init+0x8a>
            break;
        case 0b011 :
            Ndiv1 = 64;
     c52:	80 e4       	ldi	r24, 0x40	; 64
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	a0 e0       	ldi	r26, 0x00	; 0
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	0e c0       	rjmp	.+28     	; 0xc78 <timer1_init+0x8a>
            break;
        case 0b100 :
            Ndiv1 = 256;
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	a0 e0       	ldi	r26, 0x00	; 0
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	09 c0       	rjmp	.+18     	; 0xc78 <timer1_init+0x8a>
            break;
        case 0b101 :
            Ndiv1 = 1024;
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	94 e0       	ldi	r25, 0x04	; 4
     c6a:	a0 e0       	ldi	r26, 0x00	; 0
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <timer1_init+0x8a>
            break;
        default :
            Ndiv1 = 1;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	a0 e0       	ldi	r26, 0x00	; 0
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	80 93 07 03 	sts	0x0307, r24
     c7c:	90 93 08 03 	sts	0x0308, r25
     c80:	a0 93 09 03 	sts	0x0309, r26
     c84:	b0 93 0a 03 	sts	0x030A, r27
     c88:	08 95       	ret

00000c8a <StrLength>:
    }
    
}

// Count character length
int StrLength(const char *s){
     c8a:	fc 01       	movw	r30, r24
    int n = 0;
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
    while (*s++ != '\0')
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <StrLength+0xc>
        n++;
     c92:	2f 5f       	subi	r18, 0xFF	; 255
     c94:	3f 4f       	sbci	r19, 0xFF	; 255
}

// Count character length
int StrLength(const char *s){
    int n = 0;
    while (*s++ != '\0')
     c96:	81 91       	ld	r24, Z+
     c98:	88 23       	and	r24, r24
     c9a:	d9 f7       	brne	.-10     	; 0xc92 <StrLength+0x8>
        n++;
    return (n);
}
     c9c:	c9 01       	movw	r24, r18
     c9e:	08 95       	ret

00000ca0 <DisplayItemInfo>:

// Display
void DisplayItemInfo(void){
     ca0:	1f 93       	push	r17
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	c1 ef       	ldi	r28, 0xF1	; 241
     ca8:	d2 e0       	ldi	r29, 0x02	; 2
     caa:	10 e0       	ldi	r17, 0x00	; 0
	int k=0;
	for(k=0;k<Ndata;k++){
		lcd_locate(k,0);
     cac:	81 2f       	mov	r24, r17
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	f1 dd       	rcall	.-1054   	; 0x894 <lcd_locate>
		lcd_set_str((unsigned char*)RxName[t_id[k]]);
     cb2:	e9 91       	ld	r30, Y+
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	ee 0f       	add	r30, r30
     cb8:	ff 1f       	adc	r31, r31
     cba:	ed 51       	subi	r30, 0x1D	; 29
     cbc:	fd 4f       	sbci	r31, 0xFD	; 253
     cbe:	80 81       	ld	r24, Z
     cc0:	91 81       	ldd	r25, Z+1	; 0x01
     cc2:	fd dd       	rcall	.-1030   	; 0x8be <lcd_set_str>
     cc4:	1f 5f       	subi	r17, 0xFF	; 255
}

// Display
void DisplayItemInfo(void){
	int k=0;
	for(k=0;k<Ndata;k++){
     cc6:	14 30       	cpi	r17, 0x04	; 4
     cc8:	89 f7       	brne	.-30     	; 0xcac <DisplayItemInfo+0xc>
		lcd_locate(k,0);
		lcd_set_str((unsigned char*)RxName[t_id[k]]);
	}
	
}
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	1f 91       	pop	r17
     cd0:	08 95       	ret

00000cd2 <__vector_18>:

ISR(USART_RX_vect){
     cd2:	1f 92       	push	r1
     cd4:	0f 92       	push	r0
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	0f 92       	push	r0
     cda:	11 24       	eor	r1, r1
     cdc:	ef 92       	push	r14
     cde:	ff 92       	push	r15
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	2f 93       	push	r18
     ce6:	3f 93       	push	r19
     ce8:	4f 93       	push	r20
     cea:	5f 93       	push	r21
     cec:	6f 93       	push	r22
     cee:	7f 93       	push	r23
     cf0:	8f 93       	push	r24
     cf2:	9f 93       	push	r25
     cf4:	af 93       	push	r26
     cf6:	bf 93       	push	r27
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	ef 93       	push	r30
     cfe:	ff 93       	push	r31
    unsigned int    ID;
    unsigned int    n, m;

    ID = USART_receive_woTO(); // Synchronize & Detect receiver ID
     d00:	e3 d0       	rcall	.+454    	; 0xec8 <USART_receive_woTO>
     d02:	e8 2e       	mov	r14, r24
     d04:	ff 24       	eor	r15, r15
     d06:	a1 ef       	ldi	r26, 0xF1	; 241
     d08:	b2 e0       	ldi	r27, 0x02	; 2
    for(n=0;n<Ndata;n++){
     d0a:	c0 e0       	ldi	r28, 0x00	; 0
     d0c:	d0 e0       	ldi	r29, 0x00	; 0
        if ( ID == RxID[t_id[n]] ){
     d0e:	ed 91       	ld	r30, X+
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	e1 55       	subi	r30, 0x51	; 81
     d14:	fe 4f       	sbci	r31, 0xFE	; 254
     d16:	80 81       	ld	r24, Z
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	e8 16       	cp	r14, r24
     d1c:	f9 06       	cpc	r15, r25
     d1e:	f9 f4       	brne	.+62     	; 0xd5e <__vector_18+0x8c>
     d20:	00 e0       	ldi	r16, 0x00	; 0
     d22:	10 e0       	ldi	r17, 0x00	; 0
		lcd_set_str((unsigned char*)RxName[t_id[k]]);
	}
	
}

ISR(USART_RX_vect){
     d24:	cc 0f       	add	r28, r28
     d26:	dd 1f       	adc	r29, r29
     d28:	cc 0f       	add	r28, r28
     d2a:	dd 1f       	adc	r29, r29
     d2c:	c5 5f       	subi	r28, 0xF5	; 245
     d2e:	dc 4f       	sbci	r29, 0xFC	; 252

    ID = USART_receive_woTO(); // Synchronize & Detect receiver ID
    for(n=0;n<Ndata;n++){
        if ( ID == RxID[t_id[n]] ){
            for(m=0;m<4;m++){
                data[n][m] = USART_receive_wTO();
     d30:	e4 d0       	rcall	.+456    	; 0xefa <USART_receive_wTO>
		lcd_set_str((unsigned char*)RxName[t_id[k]]);
	}
	
}

ISR(USART_RX_vect){
     d32:	fe 01       	movw	r30, r28
     d34:	e0 0f       	add	r30, r16
     d36:	f1 1f       	adc	r31, r17

    ID = USART_receive_woTO(); // Synchronize & Detect receiver ID
    for(n=0;n<Ndata;n++){
        if ( ID == RxID[t_id[n]] ){
            for(m=0;m<4;m++){
                data[n][m] = USART_receive_wTO();
     d38:	80 83       	st	Z, r24
    unsigned int    n, m;

    ID = USART_receive_woTO(); // Synchronize & Detect receiver ID
    for(n=0;n<Ndata;n++){
        if ( ID == RxID[t_id[n]] ){
            for(m=0;m<4;m++){
     d3a:	0f 5f       	subi	r16, 0xFF	; 255
     d3c:	1f 4f       	sbci	r17, 0xFF	; 255
     d3e:	04 30       	cpi	r16, 0x04	; 4
     d40:	11 05       	cpc	r17, r1
     d42:	b1 f7       	brne	.-20     	; 0xd30 <__vector_18+0x5e>
                data[n][m] = USART_receive_wTO();
            }
            
            // measure interval time, debug
            if( ID == RxID[t_id[1]] ){
     d44:	e0 91 f2 02 	lds	r30, 0x02F2
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	e1 55       	subi	r30, 0x51	; 81
     d4c:	fe 4f       	sbci	r31, 0xFE	; 254
     d4e:	80 81       	ld	r24, Z
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	e8 16       	cp	r14, r24
     d54:	f9 06       	cpc	r15, r25
     d56:	39 f4       	brne	.+14     	; 0xd66 <__vector_18+0x94>
                unsigned long int time_us;
                time_us = toc();
     d58:	69 d0       	rcall	.+210    	; 0xe2c <toc>
//                lcd_locate(2,14);
//                lcd_set_numeric(time_us/1000.0,3,1,0);
                tic();
     d5a:	59 d0       	rcall	.+178    	; 0xe0e <tic>
     d5c:	04 c0       	rjmp	.+8      	; 0xd66 <__vector_18+0x94>
ISR(USART_RX_vect){
    unsigned int    ID;
    unsigned int    n, m;

    ID = USART_receive_woTO(); // Synchronize & Detect receiver ID
    for(n=0;n<Ndata;n++){
     d5e:	21 96       	adiw	r28, 0x01	; 1
     d60:	c4 30       	cpi	r28, 0x04	; 4
     d62:	d1 05       	cpc	r29, r1
     d64:	a1 f6       	brne	.-88     	; 0xd0e <__vector_18+0x3c>
            }
            
            break;
        }
    }
}
     d66:	ff 91       	pop	r31
     d68:	ef 91       	pop	r30
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	bf 91       	pop	r27
     d70:	af 91       	pop	r26
     d72:	9f 91       	pop	r25
     d74:	8f 91       	pop	r24
     d76:	7f 91       	pop	r23
     d78:	6f 91       	pop	r22
     d7a:	5f 91       	pop	r21
     d7c:	4f 91       	pop	r20
     d7e:	3f 91       	pop	r19
     d80:	2f 91       	pop	r18
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	ff 90       	pop	r15
     d88:	ef 90       	pop	r14
     d8a:	0f 90       	pop	r0
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	0f 90       	pop	r0
     d90:	1f 90       	pop	r1
     d92:	18 95       	reti

00000d94 <__vector_16>:

// 8-bit Timer overflow
ISR(TIMER0_OVF_vect){
     d94:	1f 92       	push	r1
     d96:	0f 92       	push	r0
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	0f 92       	push	r0
     d9c:	11 24       	eor	r1, r1
     d9e:	8f 93       	push	r24
     da0:	9f 93       	push	r25
    timer0_cnt++;
     da2:	80 91 30 03 	lds	r24, 0x0330
     da6:	90 91 31 03 	lds	r25, 0x0331
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	90 93 31 03 	sts	0x0331, r25
     db0:	80 93 30 03 	sts	0x0330, r24
}
     db4:	9f 91       	pop	r25
     db6:	8f 91       	pop	r24
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	0f 90       	pop	r0
     dbe:	1f 90       	pop	r1
     dc0:	18 95       	reti

00000dc2 <tictoc_init>:

double              unit_time_us;
unsigned long int   start_cnt;
unsigned long int   end_cnt;

void tictoc_init(unsigned int fosc_MHz, unsigned int Ndiv){
     dc2:	cf 92       	push	r12
     dc4:	df 92       	push	r13
     dc6:	ef 92       	push	r14
     dc8:	ff 92       	push	r15
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	ec 01       	movw	r28, r24
    
    unit_time_us = Ndiv / ( 1.0*fosc_MHz );
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	cf d5       	rcall	.+2974   	; 0x1974 <__floatunsisf>
     dd6:	6b 01       	movw	r12, r22
     dd8:	7c 01       	movw	r14, r24
     dda:	be 01       	movw	r22, r28
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	c9 d5       	rcall	.+2962   	; 0x1974 <__floatunsisf>
     de2:	9b 01       	movw	r18, r22
     de4:	ac 01       	movw	r20, r24
     de6:	c7 01       	movw	r24, r14
     de8:	b6 01       	movw	r22, r12
     dea:	2b d5       	rcall	.+2646   	; 0x1842 <__divsf3>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	80 93 3c 03 	sts	0x033C, r24
     df4:	90 93 3d 03 	sts	0x033D, r25
     df8:	a0 93 3e 03 	sts	0x033E, r26
     dfc:	b0 93 3f 03 	sts	0x033F, r27
    
}
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	ff 90       	pop	r15
     e06:	ef 90       	pop	r14
     e08:	df 90       	pop	r13
     e0a:	cf 90       	pop	r12
     e0c:	08 95       	ret

00000e0e <tic>:

void tic(){
    
    start_cnt = TCNT1;
     e0e:	80 91 84 00 	lds	r24, 0x0084
     e12:	90 91 85 00 	lds	r25, 0x0085
     e16:	a0 e0       	ldi	r26, 0x00	; 0
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	80 93 34 03 	sts	0x0334, r24
     e1e:	90 93 35 03 	sts	0x0335, r25
     e22:	a0 93 36 03 	sts	0x0336, r26
     e26:	b0 93 37 03 	sts	0x0337, r27
    
}
     e2a:	08 95       	ret

00000e2c <toc>:

unsigned long int toc(){
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
    
    unsigned long int time_us;
    
    end_cnt = TCNT1;
     e30:	80 91 84 00 	lds	r24, 0x0084
     e34:	90 91 85 00 	lds	r25, 0x0085
     e38:	a0 e0       	ldi	r26, 0x00	; 0
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	80 93 38 03 	sts	0x0338, r24
     e40:	90 93 39 03 	sts	0x0339, r25
     e44:	a0 93 3a 03 	sts	0x033A, r26
     e48:	b0 93 3b 03 	sts	0x033B, r27
    if( start_cnt < end_cnt ){
     e4c:	00 91 34 03 	lds	r16, 0x0334
     e50:	10 91 35 03 	lds	r17, 0x0335
     e54:	20 91 36 03 	lds	r18, 0x0336
     e58:	30 91 37 03 	lds	r19, 0x0337
     e5c:	ac 01       	movw	r20, r24
     e5e:	bd 01       	movw	r22, r26
     e60:	40 1b       	sub	r20, r16
     e62:	51 0b       	sbc	r21, r17
     e64:	62 0b       	sbc	r22, r18
     e66:	73 0b       	sbc	r23, r19
     e68:	08 17       	cp	r16, r24
     e6a:	19 07       	cpc	r17, r25
     e6c:	2a 07       	cpc	r18, r26
     e6e:	3b 07       	cpc	r19, r27
     e70:	20 f4       	brcc	.+8      	; 0xe7a <toc+0x4e>
        time_us = ( ( 0x10000 + end_cnt ) - start_cnt ) * unit_time_us;
     e72:	40 50       	subi	r20, 0x00	; 0
     e74:	50 40       	sbci	r21, 0x00	; 0
     e76:	6f 4f       	sbci	r22, 0xFF	; 255
     e78:	7f 4f       	sbci	r23, 0xFF	; 255
    }else{
        time_us = ( end_cnt - start_cnt ) * unit_time_us;
     e7a:	cb 01       	movw	r24, r22
     e7c:	ba 01       	movw	r22, r20
     e7e:	7a d5       	rcall	.+2804   	; 0x1974 <__floatunsisf>
     e80:	20 91 3c 03 	lds	r18, 0x033C
     e84:	30 91 3d 03 	lds	r19, 0x033D
     e88:	40 91 3e 03 	lds	r20, 0x033E
     e8c:	50 91 3f 03 	lds	r21, 0x033F
     e90:	23 d6       	rcall	.+3142   	; 0x1ad8 <__mulsf3>
     e92:	44 d5       	rcall	.+2696   	; 0x191c <__fixunssfsi>
    }
    return time_us;
    
}
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	08 95       	ret

00000e9a <USARTinit>:
#define UBRR FOSC/16/BAUD-1 
*/

// USART initialize
void USARTinit(unsigned int ubrr){
	UBRR0H = (unsigned char)(ubrr>>8);
     e9a:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     e9e:	80 93 c4 00 	sts	0x00C4, r24
								//   '000' : 5bit
								//   '001' : 6bit
								//   '010' : 7bit
								//   '011' : 8bit
	unsigned int U2X = 0;		// Over clocking operation
	UCSR0B = (RCIE<<7)|(TCIE<<6)|(TRIE<<5)|(RE<<4)|(TE<<3)|((Nb>>2)<<2);
     ea2:	80 e9       	ldi	r24, 0x90	; 144
     ea4:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (Mode<<6)|(Pari<<4)|(STPB<<3)|(Nb<<1)|(CLKE);
     ea8:	86 e2       	ldi	r24, 0x26	; 38
     eaa:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0A = U2X<<1;
     eae:	10 92 c0 00 	sts	0x00C0, r1
}
     eb2:	08 95       	ret

00000eb4 <USART_transmit>:

// USART transmit
void USART_transmit(unsigned char data){
	while(!(USART_STATUS & (1<<UDRE0)));	// Wait until tx buffer is empty
     eb4:	90 91 c0 00 	lds	r25, 0x00C0
     eb8:	95 ff       	sbrs	r25, 5
     eba:	fc cf       	rjmp	.-8      	; 0xeb4 <USART_transmit>
	UDR0 = data;
     ebc:	80 93 c6 00 	sts	0x00C6, r24
}
     ec0:	08 95       	ret

00000ec2 <USART_receive>:


// USART receive without wait & Error rejection
unsigned char USART_receive(void){
	return UDR0;
     ec2:	80 91 c6 00 	lds	r24, 0x00C6
}
     ec6:	08 95       	ret

00000ec8 <USART_receive_woTO>:

// USART receive w/o. Time-out
unsigned char USART_receive_woTO(void){
	unsigned char error_data;
	while(!(USART_STATUS & (1<<RXC0)));	// Wait receive process
     ec8:	80 91 c0 00 	lds	r24, 0x00C0
     ecc:	87 ff       	sbrs	r24, 7
     ece:	fc cf       	rjmp	.-8      	; 0xec8 <USART_receive_woTO>
	if ( !( ( USART_STATUS & (1<< FE0))
     ed0:	20 91 c0 00 	lds	r18, 0x00C0
	      | ( USART_STATUS & (1<<UPE0)) ) ){	// detect framing & parity error
     ed4:	80 91 c0 00 	lds	r24, 0x00C0
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	84 70       	andi	r24, 0x04	; 4
     edc:	90 70       	andi	r25, 0x00	; 0

// USART receive w/o. Time-out
unsigned char USART_receive_woTO(void){
	unsigned char error_data;
	while(!(USART_STATUS & (1<<RXC0)));	// Wait receive process
	if ( !( ( USART_STATUS & (1<< FE0))
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	20 71       	andi	r18, 0x10	; 16
     ee2:	30 70       	andi	r19, 0x00	; 0
	      | ( USART_STATUS & (1<<UPE0)) ) ){	// detect framing & parity error
     ee4:	82 2b       	or	r24, r18
     ee6:	93 2b       	or	r25, r19

// USART receive w/o. Time-out
unsigned char USART_receive_woTO(void){
	unsigned char error_data;
	while(!(USART_STATUS & (1<<RXC0)));	// Wait receive process
	if ( !( ( USART_STATUS & (1<< FE0))
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	19 f4       	brne	.+6      	; 0xef2 <USART_receive_woTO+0x2a>
	      | ( USART_STATUS & (1<<UPE0)) ) ){	// detect framing & parity error
		return UDR0;
     eec:	80 91 c6 00 	lds	r24, 0x00C6
     ef0:	08 95       	ret
	}else{
		error_data = UDR0;
     ef2:	80 91 c6 00 	lds	r24, 0x00C6
		return 0xff;
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
     ef8:	08 95       	ret

00000efa <USART_receive_wTO>:
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	95 e0       	ldi	r25, 0x05	; 5
     efe:	20 91 c0 00 	lds	r18, 0x00C0
     f02:	27 ff       	sbrs	r18, 7
     f04:	15 c0       	rjmp	.+42     	; 0xf30 <USART_receive_wTO+0x36>
     f06:	20 91 c0 00 	lds	r18, 0x00C0
     f0a:	80 91 c0 00 	lds	r24, 0x00C0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	84 70       	andi	r24, 0x04	; 4
     f12:	90 70       	andi	r25, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	20 71       	andi	r18, 0x10	; 16
     f18:	30 70       	andi	r19, 0x00	; 0
     f1a:	82 2b       	or	r24, r18
     f1c:	93 2b       	or	r25, r19
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	19 f4       	brne	.+6      	; 0xf28 <USART_receive_wTO+0x2e>
     f22:	80 91 c6 00 	lds	r24, 0x00C6
     f26:	08 95       	ret
     f28:	80 91 c6 00 	lds	r24, 0x00C6
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
     f2e:	08 95       	ret
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	29 f7       	brne	.-54     	; 0xefe <USART_receive_wTO+0x4>
     f34:	8f ef       	ldi	r24, 0xFF	; 255
     f36:	08 95       	ret

00000f38 <main>:
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	c1 56       	subi	r28, 0x61	; 97
     f42:	d0 40       	sbci	r29, 0x00	; 0
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	cd bf       	out	0x3d, r28	; 61
     f4e:	d3 db       	rcall	.-2138   	; 0x6f6 <SoftSPI_Init>
     f50:	bb dd       	rcall	.-1162   	; 0xac8 <SoftSPI_LED_Init>
     f52:	27 dc       	rcall	.-1970   	; 0x7a2 <lcd_init>
     f54:	09 de       	rcall	.-1006   	; 0xb68 <timer0_init>
     f56:	56 9a       	sbi	0x0a, 6	; 10
     f58:	4a de       	rcall	.-876    	; 0xbee <timer1_init>
     f5a:	83 e3       	ldi	r24, 0x33	; 51
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	9d df       	rcall	.-198    	; 0xe9a <USARTinit>
     f60:	36 d9       	rcall	.-3476   	; 0x1ce <ExtInterrupt_init>
     f62:	60 91 07 03 	lds	r22, 0x0307
     f66:	70 91 08 03 	lds	r23, 0x0308
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	94 e2       	ldi	r25, 0x24	; 36
     f6e:	29 df       	rcall	.-430    	; 0xdc2 <tictoc_init>
     f70:	20 91 07 03 	lds	r18, 0x0307
     f74:	30 91 08 03 	lds	r19, 0x0308
     f78:	40 91 09 03 	lds	r20, 0x0309
     f7c:	50 91 0a 03 	lds	r21, 0x030A
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	74 e2       	ldi	r23, 0x24	; 36
     f84:	84 ef       	ldi	r24, 0xF4	; 244
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	40 da       	rcall	.-2944   	; 0x40a <TachoMeter_init>
     f8a:	70 d8       	rcall	.-3872   	; 0x6c <BarMeter_init>
     f8c:	3a db       	rcall	.-2444   	; 0x602 <FaceMark_init>
     f8e:	d3 dd       	rcall	.-1114   	; 0xb36 <set_initial_t_id>
     f90:	60 91 f5 02 	lds	r22, 0x02F5
     f94:	70 91 f6 02 	lds	r23, 0x02F6
     f98:	80 91 f7 02 	lds	r24, 0x02F7
     f9c:	90 91 f8 02 	lds	r25, 0x02F8
     fa0:	e9 d4       	rcall	.+2514   	; 0x1974 <__floatunsisf>
     fa2:	9b 01       	movw	r18, r22
     fa4:	ac 01       	movw	r20, r24
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	74 e2       	ldi	r23, 0x24	; 36
     faa:	84 e7       	ldi	r24, 0x74	; 116
     fac:	9b e4       	ldi	r25, 0x4B	; 75
     fae:	49 d4       	rcall	.+2194   	; 0x1842 <__divsf3>
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	46 e1       	ldi	r20, 0x16	; 22
     fb6:	53 e4       	ldi	r21, 0x43	; 67
     fb8:	8f d5       	rcall	.+2846   	; 0x1ad8 <__mulsf3>
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	4a e7       	ldi	r20, 0x7A	; 122
     fc0:	54 e4       	ldi	r21, 0x44	; 68
     fc2:	3f d4       	rcall	.+2174   	; 0x1842 <__divsf3>
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e8       	ldi	r20, 0x80	; 128
     fca:	5b e3       	ldi	r21, 0x3B	; 59
     fcc:	85 d5       	rcall	.+2826   	; 0x1ad8 <__mulsf3>
     fce:	a6 d4       	rcall	.+2380   	; 0x191c <__fixunssfsi>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	90 93 33 03 	sts	0x0333, r25
     fd8:	80 93 32 03 	sts	0x0332, r24
     fdc:	de 01       	movw	r26, r28
     fde:	d9 96       	adiw	r26, 0x39	; 57
     fe0:	e4 e8       	ldi	r30, 0x84	; 132
     fe2:	f1 e0       	ldi	r31, 0x01	; 1
     fe4:	8e e0       	ldi	r24, 0x0E	; 14
     fe6:	01 90       	ld	r0, Z+
     fe8:	0d 92       	st	X+, r0
     fea:	81 50       	subi	r24, 0x01	; 1
     fec:	e1 f7       	brne	.-8      	; 0xfe6 <main+0xae>
     fee:	de 01       	movw	r26, r28
     ff0:	9b 96       	adiw	r26, 0x2b	; 43
     ff2:	e2 e9       	ldi	r30, 0x92	; 146
     ff4:	f1 e0       	ldi	r31, 0x01	; 1
     ff6:	8e e0       	ldi	r24, 0x0E	; 14
     ff8:	01 90       	ld	r0, Z+
     ffa:	0d 92       	st	X+, r0
     ffc:	81 50       	subi	r24, 0x01	; 1
     ffe:	e1 f7       	brne	.-8      	; 0xff8 <main+0xc0>
    1000:	de 01       	movw	r26, r28
    1002:	94 96       	adiw	r26, 0x24	; 36
    1004:	e0 ea       	ldi	r30, 0xA0	; 160
    1006:	f1 e0       	ldi	r31, 0x01	; 1
    1008:	87 e0       	ldi	r24, 0x07	; 7
    100a:	01 90       	ld	r0, Z+
    100c:	0d 92       	st	X+, r0
    100e:	81 50       	subi	r24, 0x01	; 1
    1010:	e1 f7       	brne	.-8      	; 0x100a <main+0xd2>
    1012:	de 01       	movw	r26, r28
    1014:	5d 96       	adiw	r26, 0x1d	; 29
    1016:	e7 ea       	ldi	r30, 0xA7	; 167
    1018:	f1 e0       	ldi	r31, 0x01	; 1
    101a:	87 e0       	ldi	r24, 0x07	; 7
    101c:	01 90       	ld	r0, Z+
    101e:	0d 92       	st	X+, r0
    1020:	81 50       	subi	r24, 0x01	; 1
    1022:	e1 f7       	brne	.-8      	; 0x101c <main+0xe4>
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	8e 8b       	std	Y+22, r24	; 0x16
    1028:	1f 8a       	std	Y+23, r1	; 0x17
    102a:	18 8e       	std	Y+24, r1	; 0x18
    102c:	19 8e       	std	Y+25, r1	; 0x19
    102e:	1a 8e       	std	Y+26, r1	; 0x1a
    1030:	1b 8e       	std	Y+27, r1	; 0x1b
    1032:	1c 8e       	std	Y+28, r1	; 0x1c
    1034:	80 e5       	ldi	r24, 0x50	; 80
    1036:	91 e0       	ldi	r25, 0x01	; 1
    1038:	90 93 e4 02 	sts	0x02E4, r25
    103c:	80 93 e3 02 	sts	0x02E3, r24
    1040:	86 e5       	ldi	r24, 0x56	; 86
    1042:	91 e0       	ldi	r25, 0x01	; 1
    1044:	90 93 e6 02 	sts	0x02E6, r25
    1048:	80 93 e5 02 	sts	0x02E5, r24
    104c:	8c e5       	ldi	r24, 0x5C	; 92
    104e:	91 e0       	ldi	r25, 0x01	; 1
    1050:	90 93 e8 02 	sts	0x02E8, r25
    1054:	80 93 e7 02 	sts	0x02E7, r24
    1058:	82 e6       	ldi	r24, 0x62	; 98
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	90 93 ea 02 	sts	0x02EA, r25
    1060:	80 93 e9 02 	sts	0x02E9, r24
    1064:	89 e6       	ldi	r24, 0x69	; 105
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	90 93 ec 02 	sts	0x02EC, r25
    106c:	80 93 eb 02 	sts	0x02EB, r24
    1070:	8f e6       	ldi	r24, 0x6F	; 111
    1072:	91 e0       	ldi	r25, 0x01	; 1
    1074:	90 93 ee 02 	sts	0x02EE, r25
    1078:	80 93 ed 02 	sts	0x02ED, r24
    107c:	85 e7       	ldi	r24, 0x75	; 117
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	90 93 f0 02 	sts	0x02F0, r25
    1084:	80 93 ef 02 	sts	0x02EF, r24
    1088:	44 e2       	ldi	r20, 0x24	; 36
    108a:	a4 2e       	mov	r10, r20
    108c:	b1 2c       	mov	r11, r1
    108e:	ac 0e       	add	r10, r28
    1090:	bd 1e       	adc	r11, r29
    1092:	5d e1       	ldi	r21, 0x1D	; 29
    1094:	85 2e       	mov	r8, r21
    1096:	91 2c       	mov	r9, r1
    1098:	8c 0e       	add	r8, r28
    109a:	9d 1e       	adc	r9, r29
    109c:	00 e0       	ldi	r16, 0x00	; 0
    109e:	10 e0       	ldi	r17, 0x00	; 0
    10a0:	6b e0       	ldi	r22, 0x0B	; 11
    10a2:	f6 2e       	mov	r15, r22
    10a4:	2e c0       	rjmp	.+92     	; 0x1102 <main+0x1ca>
    10a6:	4f 5f       	subi	r20, 0xFF	; 255
    10a8:	24 2f       	mov	r18, r20
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	28 17       	cp	r18, r24
    10ae:	39 07       	cpc	r19, r25
    10b0:	d4 f3       	brlt	.-12     	; 0x10a6 <main+0x16e>
    10b2:	f8 01       	movw	r30, r16
    10b4:	ee 0f       	add	r30, r30
    10b6:	ff 1f       	adc	r31, r31
    10b8:	ed 51       	subi	r30, 0x1D	; 29
    10ba:	fd 4f       	sbci	r31, 0xFD	; 253
    10bc:	80 81       	ld	r24, Z
    10be:	91 81       	ldd	r25, Z+1	; 0x01
    10c0:	e4 dd       	rcall	.-1080   	; 0xc8a <StrLength>
    10c2:	f8 01       	movw	r30, r16
    10c4:	e5 5e       	subi	r30, 0xE5	; 229
    10c6:	fc 4f       	sbci	r31, 0xFC	; 252
    10c8:	80 83       	st	Z, r24
    10ca:	af e0       	ldi	r26, 0x0F	; 15
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ac 0f       	add	r26, r28
    10d0:	bd 1f       	adc	r27, r29
    10d2:	a0 0f       	add	r26, r16
    10d4:	b1 1f       	adc	r27, r17
    10d6:	9f 2d       	mov	r25, r15
    10d8:	9e 19       	sub	r25, r14
    10da:	21 e0       	ldi	r18, 0x01	; 1
    10dc:	ec 14       	cp	r14, r12
    10de:	09 f4       	brne	.+2      	; 0x10e2 <main+0x1aa>
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	92 1b       	sub	r25, r18
    10e4:	98 1b       	sub	r25, r24
    10e6:	e6 e1       	ldi	r30, 0x16	; 22
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	ec 0f       	add	r30, r28
    10ec:	fd 1f       	adc	r31, r29
    10ee:	e0 0f       	add	r30, r16
    10f0:	f1 1f       	adc	r31, r17
    10f2:	80 81       	ld	r24, Z
    10f4:	98 1b       	sub	r25, r24
    10f6:	9c 93       	st	X, r25
    10f8:	0f 5f       	subi	r16, 0xFF	; 255
    10fa:	1f 4f       	sbci	r17, 0xFF	; 255
    10fc:	07 30       	cpi	r16, 0x07	; 7
    10fe:	11 05       	cpc	r17, r1
    1100:	61 f0       	breq	.+24     	; 0x111a <main+0x1e2>
    1102:	d5 01       	movw	r26, r10
    1104:	ed 90       	ld	r14, X+
    1106:	5d 01       	movw	r10, r26
    1108:	f4 01       	movw	r30, r8
    110a:	c1 90       	ld	r12, Z+
    110c:	4f 01       	movw	r8, r30
    110e:	8e 2d       	mov	r24, r14
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	8c 19       	sub	r24, r12
    1114:	91 09       	sbc	r25, r1
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	c7 cf       	rjmp	.-114    	; 0x10a8 <main+0x170>
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	9a 87       	std	Y+10, r25	; 0x0a
    1120:	89 87       	std	Y+9, r24	; 0x09
    1122:	80 e1       	ldi	r24, 0x10	; 16
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9c 87       	std	Y+12, r25	; 0x0c
    1128:	8b 87       	std	Y+11, r24	; 0x0b
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	91 e0       	ldi	r25, 0x01	; 1
    112e:	9e 87       	std	Y+14, r25	; 0x0e
    1130:	8d 87       	std	Y+13, r24	; 0x0d
    1132:	00 e0       	ldi	r16, 0x00	; 0
    1134:	10 e0       	ldi	r17, 0x00	; 0
    1136:	21 e0       	ldi	r18, 0x01	; 1
    1138:	e2 2e       	mov	r14, r18
    113a:	f1 2c       	mov	r15, r1
    113c:	c7 01       	movw	r24, r14
    113e:	00 2e       	mov	r0, r16
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <main+0x20e>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <main+0x20a>
    114a:	ec dc       	rcall	.-1576   	; 0xb24 <send_bits_595_LED>
    114c:	2f ef       	ldi	r18, 0xFF	; 255
    114e:	30 e7       	ldi	r19, 0x70	; 112
    1150:	42 e0       	ldi	r20, 0x02	; 2
    1152:	21 50       	subi	r18, 0x01	; 1
    1154:	30 40       	sbci	r19, 0x00	; 0
    1156:	40 40       	sbci	r20, 0x00	; 0
    1158:	e1 f7       	brne	.-8      	; 0x1152 <main+0x21a>
    115a:	00 c0       	rjmp	.+0      	; 0x115c <main+0x224>
    115c:	00 00       	nop
    115e:	0f 5f       	subi	r16, 0xFF	; 255
    1160:	1f 4f       	sbci	r17, 0xFF	; 255
    1162:	09 30       	cpi	r16, 0x09	; 9
    1164:	11 05       	cpc	r17, r1
    1166:	51 f7       	brne	.-44     	; 0x113c <main+0x204>
    1168:	8f ef       	ldi	r24, 0xFF	; 255
    116a:	90 e7       	ldi	r25, 0x70	; 112
    116c:	a2 e0       	ldi	r26, 0x02	; 2
    116e:	81 50       	subi	r24, 0x01	; 1
    1170:	90 40       	sbci	r25, 0x00	; 0
    1172:	a0 40       	sbci	r26, 0x00	; 0
    1174:	e1 f7       	brne	.-8      	; 0x116e <main+0x236>
    1176:	00 c0       	rjmp	.+0      	; 0x1178 <main+0x240>
    1178:	00 00       	nop
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	8a db       	rcall	.-2284   	; 0x894 <lcd_locate>
    1180:	0b e3       	ldi	r16, 0x3B	; 59
    1182:	11 e0       	ldi	r17, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	d8 01       	movw	r26, r16
    1188:	8d 91       	ld	r24, X+
    118a:	8d 01       	movw	r16, r26
    118c:	a2 96       	adiw	r28, 0x22	; 34
    118e:	9f af       	sts	0x7f, r25
    1190:	a2 97       	sbiw	r28, 0x22	; 34
    1192:	70 db       	rcall	.-2336   	; 0x874 <lcd_set_char>
    1194:	2f ef       	ldi	r18, 0xFF	; 255
    1196:	39 ef       	ldi	r19, 0xF9	; 249
    1198:	40 e0       	ldi	r20, 0x00	; 0
    119a:	21 50       	subi	r18, 0x01	; 1
    119c:	30 40       	sbci	r19, 0x00	; 0
    119e:	40 40       	sbci	r20, 0x00	; 0
    11a0:	e1 f7       	brne	.-8      	; 0x119a <main+0x262>
    11a2:	00 c0       	rjmp	.+0      	; 0x11a4 <main+0x26c>
    11a4:	00 00       	nop
    11a6:	a2 96       	adiw	r28, 0x22	; 34
    11a8:	9f ad       	sts	0x6f, r25
    11aa:	a2 97       	sbiw	r28, 0x22	; 34
    11ac:	9f 5f       	subi	r25, 0xFF	; 255
    11ae:	94 31       	cpi	r25, 0x14	; 20
    11b0:	51 f7       	brne	.-44     	; 0x1186 <main+0x24e>
    11b2:	82 e0       	ldi	r24, 0x02	; 2
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	6e db       	rcall	.-2340   	; 0x894 <lcd_locate>
    11b8:	06 e2       	ldi	r16, 0x26	; 38
    11ba:	11 e0       	ldi	r17, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	d8 01       	movw	r26, r16
    11c0:	8d 91       	ld	r24, X+
    11c2:	8d 01       	movw	r16, r26
    11c4:	a2 96       	adiw	r28, 0x22	; 34
    11c6:	9f af       	sts	0x7f, r25
    11c8:	a2 97       	sbiw	r28, 0x22	; 34
    11ca:	54 db       	rcall	.-2392   	; 0x874 <lcd_set_char>
    11cc:	2f ef       	ldi	r18, 0xFF	; 255
    11ce:	39 ef       	ldi	r19, 0xF9	; 249
    11d0:	40 e0       	ldi	r20, 0x00	; 0
    11d2:	21 50       	subi	r18, 0x01	; 1
    11d4:	30 40       	sbci	r19, 0x00	; 0
    11d6:	40 40       	sbci	r20, 0x00	; 0
    11d8:	e1 f7       	brne	.-8      	; 0x11d2 <main+0x29a>
    11da:	00 c0       	rjmp	.+0      	; 0x11dc <main+0x2a4>
    11dc:	00 00       	nop
    11de:	a2 96       	adiw	r28, 0x22	; 34
    11e0:	9f ad       	sts	0x6f, r25
    11e2:	a2 97       	sbiw	r28, 0x22	; 34
    11e4:	9f 5f       	subi	r25, 0xFF	; 255
    11e6:	94 31       	cpi	r25, 0x14	; 20
    11e8:	51 f7       	brne	.-44     	; 0x11be <main+0x286>
    11ea:	83 e0       	ldi	r24, 0x03	; 3
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	52 db       	rcall	.-2396   	; 0x894 <lcd_locate>
    11f0:	01 e1       	ldi	r16, 0x11	; 17
    11f2:	11 e0       	ldi	r17, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	d8 01       	movw	r26, r16
    11f8:	8d 91       	ld	r24, X+
    11fa:	8d 01       	movw	r16, r26
    11fc:	a2 96       	adiw	r28, 0x22	; 34
    11fe:	9f af       	sts	0x7f, r25
    1200:	a2 97       	sbiw	r28, 0x22	; 34
    1202:	38 db       	rcall	.-2448   	; 0x874 <lcd_set_char>
    1204:	2f ef       	ldi	r18, 0xFF	; 255
    1206:	39 ef       	ldi	r19, 0xF9	; 249
    1208:	40 e0       	ldi	r20, 0x00	; 0
    120a:	21 50       	subi	r18, 0x01	; 1
    120c:	30 40       	sbci	r19, 0x00	; 0
    120e:	40 40       	sbci	r20, 0x00	; 0
    1210:	e1 f7       	brne	.-8      	; 0x120a <main+0x2d2>
    1212:	00 c0       	rjmp	.+0      	; 0x1214 <main+0x2dc>
    1214:	00 00       	nop
    1216:	a2 96       	adiw	r28, 0x22	; 34
    1218:	9f ad       	sts	0x6f, r25
    121a:	a2 97       	sbiw	r28, 0x22	; 34
    121c:	9f 5f       	subi	r25, 0xFF	; 255
    121e:	94 31       	cpi	r25, 0x14	; 20
    1220:	51 f7       	brne	.-44     	; 0x11f6 <main+0x2be>
    1222:	00 e0       	ldi	r16, 0x00	; 0
    1224:	10 e0       	ldi	r17, 0x00	; 0
    1226:	9f ef       	ldi	r25, 0xFF	; 255
    1228:	e9 2e       	mov	r14, r25
    122a:	f1 2c       	mov	r15, r1
    122c:	c7 01       	movw	r24, r14
    122e:	00 2e       	mov	r0, r16
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <main+0x2fe>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	0a 94       	dec	r0
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <main+0x2fa>
    123a:	80 95       	com	r24
    123c:	73 dc       	rcall	.-1818   	; 0xb24 <send_bits_595_LED>
    123e:	8f ef       	ldi	r24, 0xFF	; 255
    1240:	96 e7       	ldi	r25, 0x76	; 118
    1242:	a1 e0       	ldi	r26, 0x01	; 1
    1244:	81 50       	subi	r24, 0x01	; 1
    1246:	90 40       	sbci	r25, 0x00	; 0
    1248:	a0 40       	sbci	r26, 0x00	; 0
    124a:	e1 f7       	brne	.-8      	; 0x1244 <main+0x30c>
    124c:	00 c0       	rjmp	.+0      	; 0x124e <main+0x316>
    124e:	00 00       	nop
    1250:	0f 5f       	subi	r16, 0xFF	; 255
    1252:	1f 4f       	sbci	r17, 0xFF	; 255
    1254:	09 30       	cpi	r16, 0x09	; 9
    1256:	11 05       	cpc	r17, r1
    1258:	49 f7       	brne	.-46     	; 0x122c <main+0x2f4>
    125a:	2f ef       	ldi	r18, 0xFF	; 255
    125c:	34 e3       	ldi	r19, 0x34	; 52
    125e:	4c e0       	ldi	r20, 0x0C	; 12
    1260:	21 50       	subi	r18, 0x01	; 1
    1262:	30 40       	sbci	r19, 0x00	; 0
    1264:	40 40       	sbci	r20, 0x00	; 0
    1266:	e1 f7       	brne	.-8      	; 0x1260 <main+0x328>
    1268:	00 c0       	rjmp	.+0      	; 0x126a <main+0x332>
    126a:	00 00       	nop
    126c:	00 e0       	ldi	r16, 0x00	; 0
    126e:	10 e0       	ldi	r17, 0x00	; 0
    1270:	8f ef       	ldi	r24, 0xFF	; 255
    1272:	e8 2e       	mov	r14, r24
    1274:	f1 2c       	mov	r15, r1
    1276:	c7 01       	movw	r24, r14
    1278:	00 2e       	mov	r0, r16
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <main+0x348>
    127c:	95 95       	asr	r25
    127e:	87 95       	ror	r24
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <main+0x344>
    1284:	4f dc       	rcall	.-1890   	; 0xb24 <send_bits_595_LED>
    1286:	8f ef       	ldi	r24, 0xFF	; 255
    1288:	96 e7       	ldi	r25, 0x76	; 118
    128a:	a1 e0       	ldi	r26, 0x01	; 1
    128c:	81 50       	subi	r24, 0x01	; 1
    128e:	90 40       	sbci	r25, 0x00	; 0
    1290:	a0 40       	sbci	r26, 0x00	; 0
    1292:	e1 f7       	brne	.-8      	; 0x128c <main+0x354>
    1294:	00 c0       	rjmp	.+0      	; 0x1296 <main+0x35e>
    1296:	00 00       	nop
    1298:	0f 5f       	subi	r16, 0xFF	; 255
    129a:	1f 4f       	sbci	r17, 0xFF	; 255
    129c:	09 30       	cpi	r16, 0x09	; 9
    129e:	11 05       	cpc	r17, r1
    12a0:	51 f7       	brne	.-44     	; 0x1276 <main+0x33e>
    12a2:	2f ef       	ldi	r18, 0xFF	; 255
    12a4:	30 e7       	ldi	r19, 0x70	; 112
    12a6:	42 e0       	ldi	r20, 0x02	; 2
    12a8:	21 50       	subi	r18, 0x01	; 1
    12aa:	30 40       	sbci	r19, 0x00	; 0
    12ac:	40 40       	sbci	r20, 0x00	; 0
    12ae:	e1 f7       	brne	.-8      	; 0x12a8 <main+0x370>
    12b0:	00 c0       	rjmp	.+0      	; 0x12b2 <main+0x37a>
    12b2:	00 00       	nop
    12b4:	8f ef       	ldi	r24, 0xFF	; 255
    12b6:	36 dc       	rcall	.-1940   	; 0xb24 <send_bits_595_LED>
    12b8:	8f e7       	ldi	r24, 0x7F	; 127
    12ba:	99 ea       	ldi	r25, 0xA9	; 169
    12bc:	a3 e0       	ldi	r26, 0x03	; 3
    12be:	81 50       	subi	r24, 0x01	; 1
    12c0:	90 40       	sbci	r25, 0x00	; 0
    12c2:	a0 40       	sbci	r26, 0x00	; 0
    12c4:	e1 f7       	brne	.-8      	; 0x12be <main+0x386>
    12c6:	00 c0       	rjmp	.+0      	; 0x12c8 <main+0x390>
    12c8:	00 00       	nop
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	2b dc       	rcall	.-1962   	; 0xb24 <send_bits_595_LED>
    12ce:	2f e7       	ldi	r18, 0x7F	; 127
    12d0:	39 ea       	ldi	r19, 0xA9	; 169
    12d2:	43 e0       	ldi	r20, 0x03	; 3
    12d4:	21 50       	subi	r18, 0x01	; 1
    12d6:	30 40       	sbci	r19, 0x00	; 0
    12d8:	40 40       	sbci	r20, 0x00	; 0
    12da:	e1 f7       	brne	.-8      	; 0x12d4 <main+0x39c>
    12dc:	00 c0       	rjmp	.+0      	; 0x12de <main+0x3a6>
    12de:	00 00       	nop
    12e0:	8f ef       	ldi	r24, 0xFF	; 255
    12e2:	20 dc       	rcall	.-1984   	; 0xb24 <send_bits_595_LED>
    12e4:	8f e7       	ldi	r24, 0x7F	; 127
    12e6:	99 ea       	ldi	r25, 0xA9	; 169
    12e8:	a3 e0       	ldi	r26, 0x03	; 3
    12ea:	81 50       	subi	r24, 0x01	; 1
    12ec:	90 40       	sbci	r25, 0x00	; 0
    12ee:	a0 40       	sbci	r26, 0x00	; 0
    12f0:	e1 f7       	brne	.-8      	; 0x12ea <main+0x3b2>
    12f2:	00 c0       	rjmp	.+0      	; 0x12f4 <main+0x3bc>
    12f4:	00 00       	nop
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	15 dc       	rcall	.-2006   	; 0xb24 <send_bits_595_LED>
    12fa:	2f e7       	ldi	r18, 0x7F	; 127
    12fc:	39 ea       	ldi	r19, 0xA9	; 169
    12fe:	43 e0       	ldi	r20, 0x03	; 3
    1300:	21 50       	subi	r18, 0x01	; 1
    1302:	30 40       	sbci	r19, 0x00	; 0
    1304:	40 40       	sbci	r20, 0x00	; 0
    1306:	e1 f7       	brne	.-8      	; 0x1300 <main+0x3c8>
    1308:	00 c0       	rjmp	.+0      	; 0x130a <main+0x3d2>
    130a:	00 00       	nop
    130c:	00 e0       	ldi	r16, 0x00	; 0
    130e:	80 2f       	mov	r24, r16
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	c0 da       	rcall	.-2688   	; 0x894 <lcd_locate>
    1314:	14 e1       	ldi	r17, 0x14	; 20
    1316:	80 e2       	ldi	r24, 0x20	; 32
    1318:	ad da       	rcall	.-2726   	; 0x874 <lcd_set_char>
    131a:	8f e5       	ldi	r24, 0x5F	; 95
    131c:	9a ee       	ldi	r25, 0xEA	; 234
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <main+0x3e6>
    1322:	00 c0       	rjmp	.+0      	; 0x1324 <main+0x3ec>
    1324:	00 00       	nop
    1326:	11 50       	subi	r17, 0x01	; 1
    1328:	b1 f7       	brne	.-20     	; 0x1316 <main+0x3de>
    132a:	0f 5f       	subi	r16, 0xFF	; 255
    132c:	04 30       	cpi	r16, 0x04	; 4
    132e:	79 f7       	brne	.-34     	; 0x130e <main+0x3d6>
    1330:	78 94       	sei
    1332:	80 91 ae 01 	lds	r24, 0x01AE
    1336:	88 23       	and	r24, r24
    1338:	89 f0       	breq	.+34     	; 0x135c <main+0x424>
    133a:	b2 dc       	rcall	.-1692   	; 0xca0 <DisplayItemInfo>
    133c:	20 91 b8 01 	lds	r18, 0x01B8
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	c9 01       	movw	r24, r18
    1344:	83 70       	andi	r24, 0x03	; 3
    1346:	90 70       	andi	r25, 0x00	; 0
    1348:	95 95       	asr	r25
    134a:	87 95       	ror	r24
    134c:	20 ff       	sbrs	r18, 0
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <main+0x41c>
    1350:	68 e0       	ldi	r22, 0x08	; 8
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <main+0x41e>
    1354:	67 e0       	ldi	r22, 0x07	; 7
    1356:	9e da       	rcall	.-2756   	; 0x894 <lcd_locate>
    1358:	10 92 ae 01 	sts	0x01AE, r1
    135c:	a1 ef       	ldi	r26, 0xF1	; 241
    135e:	b2 e0       	ldi	r27, 0x02	; 2
    1360:	6b 96       	adiw	r28, 0x1b	; 27
    1362:	bf af       	sts	0x7f, r27
    1364:	ae af       	sts	0x7e, r26
    1366:	6b 97       	sbiw	r28, 0x1b	; 27
    1368:	fe 01       	movw	r30, r28
    136a:	35 96       	adiw	r30, 0x05	; 5
    136c:	6f 96       	adiw	r28, 0x1f	; 31
    136e:	ff af       	sts	0x7f, r31
    1370:	ee af       	sts	0x7e, r30
    1372:	6f 97       	sbiw	r28, 0x1f	; 31
    1374:	9e 01       	movw	r18, r28
    1376:	29 5b       	subi	r18, 0xB9	; 185
    1378:	3f 4f       	sbci	r19, 0xFF	; 255
    137a:	6d 96       	adiw	r28, 0x1d	; 29
    137c:	3f af       	sts	0x7f, r19
    137e:	2e af       	sts	0x7e, r18
    1380:	6d 97       	sbiw	r28, 0x1d	; 29
    1382:	1b e0       	ldi	r17, 0x0B	; 11
    1384:	61 2e       	mov	r6, r17
    1386:	13 e0       	ldi	r17, 0x03	; 3
    1388:	71 2e       	mov	r7, r17
    138a:	29 01       	movw	r4, r18
    138c:	4f 01       	movw	r8, r30
    138e:	a1 96       	adiw	r28, 0x21	; 33
    1390:	bf af       	sts	0x7f, r27
    1392:	ae af       	sts	0x7e, r26
    1394:	a1 97       	sbiw	r28, 0x21	; 33
    1396:	aa 24       	eor	r10, r10
    1398:	bb 24       	eor	r11, r11
    139a:	33 24       	eor	r3, r3
    139c:	33 94       	inc	r3
    139e:	ae 01       	movw	r20, r28
    13a0:	47 5f       	subi	r20, 0xF7	; 247
    13a2:	5f 4f       	sbci	r21, 0xFF	; 255
    13a4:	69 96       	adiw	r28, 0x19	; 25
    13a6:	5f af       	sts	0x7f, r21
    13a8:	4e af       	sts	0x7e, r20
    13aa:	69 97       	sbiw	r28, 0x19	; 25
    13ac:	a1 96       	adiw	r28, 0x21	; 33
    13ae:	ae ad       	sts	0x6e, r26
    13b0:	bf ad       	sts	0x6f, r27
    13b2:	a1 97       	sbiw	r28, 0x21	; 33
    13b4:	0d 91       	ld	r16, X+
    13b6:	a1 96       	adiw	r28, 0x21	; 33
    13b8:	bf af       	sts	0x7f, r27
    13ba:	ae af       	sts	0x7e, r26
    13bc:	a1 97       	sbiw	r28, 0x21	; 33
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	f3 01       	movw	r30, r6
    13c4:	e8 0f       	add	r30, r24
    13c6:	f9 1f       	adc	r31, r25
    13c8:	21 81       	ldd	r18, Z+1	; 0x01
    13ca:	32 2f       	mov	r19, r18
    13cc:	31 54       	subi	r19, 0x41	; 65
    13ce:	36 30       	cpi	r19, 0x06	; 6
    13d0:	18 f0       	brcs	.+6      	; 0x13d8 <main+0x4a0>
    13d2:	20 53       	subi	r18, 0x30	; 48
    13d4:	2a 30       	cpi	r18, 0x0A	; 10
    13d6:	38 f4       	brcc	.+14     	; 0x13e6 <main+0x4ae>
    13d8:	f4 01       	movw	r30, r8
    13da:	30 82       	st	Z, r3
    13dc:	01 96       	adiw	r24, 0x01	; 1
    13de:	83 30       	cpi	r24, 0x03	; 3
    13e0:	91 05       	cpc	r25, r1
    13e2:	79 f7       	brne	.-34     	; 0x13c2 <main+0x48a>
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <main+0x4b2>
    13e6:	d4 01       	movw	r26, r8
    13e8:	1c 92       	st	X, r1
    13ea:	f4 01       	movw	r30, r8
    13ec:	81 91       	ld	r24, Z+
    13ee:	4f 01       	movw	r8, r30
    13f0:	81 30       	cpi	r24, 0x01	; 1
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <main+0x4be>
    13f4:	6e c0       	rjmp	.+220    	; 0x14d2 <main+0x59a>
    13f6:	f5 01       	movw	r30, r10
    13f8:	ee 0f       	add	r30, r30
    13fa:	ff 1f       	adc	r31, r31
    13fc:	ee 0f       	add	r30, r30
    13fe:	ff 1f       	adc	r31, r31
    1400:	e4 5f       	subi	r30, 0xF4	; 244
    1402:	fc 4f       	sbci	r31, 0xFC	; 252
    1404:	de 01       	movw	r26, r28
    1406:	12 96       	adiw	r26, 0x02	; 2
    1408:	be 01       	movw	r22, r28
    140a:	61 5f       	subi	r22, 0xF1	; 241
    140c:	7f 4f       	sbci	r23, 0xFF	; 255
    140e:	ee 24       	eor	r14, r14
    1410:	ff 24       	eor	r15, r15
    1412:	6f 01       	movw	r12, r30
    1414:	f6 01       	movw	r30, r12
    1416:	81 91       	ld	r24, Z+
    1418:	6f 01       	movw	r12, r30
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	20 7f       	andi	r18, 0xF0	; 240
    1420:	30 70       	andi	r19, 0x00	; 0
    1422:	20 33       	cpi	r18, 0x30	; 48
    1424:	31 05       	cpc	r19, r1
    1426:	11 f4       	brne	.+4      	; 0x142c <main+0x4f4>
    1428:	8f 70       	andi	r24, 0x0F	; 15
    142a:	05 c0       	rjmp	.+10     	; 0x1436 <main+0x4fe>
    142c:	20 34       	cpi	r18, 0x40	; 64
    142e:	31 05       	cpc	r19, r1
    1430:	c9 f4       	brne	.+50     	; 0x1464 <main+0x52c>
    1432:	8f 70       	andi	r24, 0x0F	; 15
    1434:	87 5f       	subi	r24, 0xF7	; 247
    1436:	8c 93       	st	X, r24
    1438:	8d 91       	ld	r24, X+
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	fb 01       	movw	r30, r22
    143e:	32 91       	ld	r19, -Z
    1440:	22 91       	ld	r18, -Z
    1442:	bf 01       	movw	r22, r30
    1444:	82 9f       	mul	r24, r18
    1446:	a0 01       	movw	r20, r0
    1448:	83 9f       	mul	r24, r19
    144a:	50 0d       	add	r21, r0
    144c:	92 9f       	mul	r25, r18
    144e:	50 0d       	add	r21, r0
    1450:	11 24       	eor	r1, r1
    1452:	e4 0e       	add	r14, r20
    1454:	f5 1e       	adc	r15, r21
    1456:	69 96       	adiw	r28, 0x19	; 25
    1458:	2e ad       	sts	0x6e, r18
    145a:	3f ad       	sts	0x6f, r19
    145c:	69 97       	sbiw	r28, 0x19	; 25
    145e:	e2 17       	cp	r30, r18
    1460:	f3 07       	cpc	r31, r19
    1462:	c1 f6       	brne	.-80     	; 0x1414 <main+0x4dc>
    1464:	10 e0       	ldi	r17, 0x00	; 0
    1466:	b7 01       	movw	r22, r14
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	83 d2       	rcall	.+1286   	; 0x1974 <__floatunsisf>
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	43 e1       	ldi	r20, 0x13	; 19
    1474:	55 e4       	ldi	r21, 0x45	; 69
    1476:	e5 d1       	rcall	.+970    	; 0x1842 <__divsf3>
    1478:	6b 01       	movw	r12, r22
    147a:	7c 01       	movw	r14, r24
    147c:	00 0f       	add	r16, r16
    147e:	11 1f       	adc	r17, r17
    1480:	41 e0       	ldi	r20, 0x01	; 1
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	4c 0f       	add	r20, r28
    1486:	5d 1f       	adc	r21, r29
    1488:	04 0f       	add	r16, r20
    148a:	15 1f       	adc	r17, r21
    148c:	d8 01       	movw	r26, r16
    148e:	d8 96       	adiw	r26, 0x38	; 56
    1490:	6d 91       	ld	r22, X+
    1492:	7c 91       	ld	r23, X
    1494:	d9 97       	sbiw	r26, 0x39	; 57
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	6c d2       	rcall	.+1240   	; 0x1974 <__floatunsisf>
    149c:	9b 01       	movw	r18, r22
    149e:	ac 01       	movw	r20, r24
    14a0:	c7 01       	movw	r24, r14
    14a2:	b6 01       	movw	r22, r12
    14a4:	19 d3       	rcall	.+1586   	; 0x1ad8 <__mulsf3>
    14a6:	6b 01       	movw	r12, r22
    14a8:	7c 01       	movw	r14, r24
    14aa:	f8 01       	movw	r30, r16
    14ac:	62 a5       	lds	r22, 0x62
    14ae:	73 a5       	lds	r23, 0x63
    14b0:	88 27       	eor	r24, r24
    14b2:	77 fd       	sbrc	r23, 7
    14b4:	80 95       	com	r24
    14b6:	98 2f       	mov	r25, r24
    14b8:	5f d2       	rcall	.+1214   	; 0x1978 <__floatsisf>
    14ba:	9b 01       	movw	r18, r22
    14bc:	ac 01       	movw	r20, r24
    14be:	c7 01       	movw	r24, r14
    14c0:	b6 01       	movw	r22, r12
    14c2:	57 d1       	rcall	.+686    	; 0x1772 <__addsf3>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	f2 01       	movw	r30, r4
    14ca:	80 83       	st	Z, r24
    14cc:	91 83       	std	Z+1, r25	; 0x01
    14ce:	a2 83       	std	Z+2, r26	; 0x02
    14d0:	b3 83       	std	Z+3, r27	; 0x03
    14d2:	08 94       	sec
    14d4:	a1 1c       	adc	r10, r1
    14d6:	b1 1c       	adc	r11, r1
    14d8:	24 e0       	ldi	r18, 0x04	; 4
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	42 0e       	add	r4, r18
    14de:	53 1e       	adc	r5, r19
    14e0:	62 0e       	add	r6, r18
    14e2:	73 1e       	adc	r7, r19
    14e4:	34 e0       	ldi	r19, 0x04	; 4
    14e6:	a3 16       	cp	r10, r19
    14e8:	b1 04       	cpc	r11, r1
    14ea:	09 f0       	breq	.+2      	; 0x14ee <main+0x5b6>
    14ec:	5f cf       	rjmp	.-322    	; 0x13ac <main+0x474>
    14ee:	a0 d7       	rcall	.+3904   	; 0x2430 <__data_load_end+0x752>
    14f0:	60 93 d0 01 	sts	0x01D0, r22
    14f4:	70 93 d1 01 	sts	0x01D1, r23
    14f8:	80 93 d2 01 	sts	0x01D2, r24
    14fc:	90 93 d3 01 	sts	0x01D3, r25
    1500:	69 38       	cpi	r22, 0x89	; 137
    1502:	43 e1       	ldi	r20, 0x13	; 19
    1504:	74 07       	cpc	r23, r20
    1506:	40 e0       	ldi	r20, 0x00	; 0
    1508:	84 07       	cpc	r24, r20
    150a:	40 e0       	ldi	r20, 0x00	; 0
    150c:	94 07       	cpc	r25, r20
    150e:	90 f4       	brcc	.+36     	; 0x1534 <main+0x5fc>
    1510:	31 d2       	rcall	.+1122   	; 0x1974 <__floatunsisf>
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e4       	ldi	r19, 0x40	; 64
    1516:	4c e9       	ldi	r20, 0x9C	; 156
    1518:	55 e4       	ldi	r21, 0x45	; 69
    151a:	93 d1       	rcall	.+806    	; 0x1842 <__divsf3>
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	4f e7       	ldi	r20, 0x7F	; 127
    1522:	53 e4       	ldi	r21, 0x43	; 67
    1524:	d9 d2       	rcall	.+1458   	; 0x1ad8 <__mulsf3>
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	40 e9       	ldi	r20, 0x90	; 144
    152c:	52 e4       	ldi	r21, 0x42	; 66
    152e:	21 d1       	rcall	.+578    	; 0x1772 <__addsf3>
    1530:	f5 d1       	rcall	.+1002   	; 0x191c <__fixunssfsi>
    1532:	01 c0       	rjmp	.+2      	; 0x1536 <main+0x5fe>
    1534:	6f ef       	ldi	r22, 0xFF	; 255
    1536:	67 bd       	out	0x27, r22	; 39
    1538:	20 91 bc 01 	lds	r18, 0x01BC
    153c:	30 91 bd 01 	lds	r19, 0x01BD
    1540:	b9 01       	movw	r22, r18
    1542:	60 95       	com	r22
    1544:	70 95       	com	r23
    1546:	40 91 32 03 	lds	r20, 0x0332
    154a:	50 91 33 03 	lds	r21, 0x0333
    154e:	46 17       	cp	r20, r22
    1550:	57 07       	cpc	r21, r23
    1552:	48 f4       	brcc	.+18     	; 0x1566 <main+0x62e>
    1554:	80 91 30 03 	lds	r24, 0x0330
    1558:	90 91 31 03 	lds	r25, 0x0331
    155c:	82 1b       	sub	r24, r18
    155e:	93 0b       	sbc	r25, r19
    1560:	48 17       	cp	r20, r24
    1562:	59 07       	cpc	r21, r25
    1564:	70 f0       	brcs	.+28     	; 0x1582 <main+0x64a>
    1566:	64 17       	cp	r22, r20
    1568:	75 07       	cpc	r23, r21
    156a:	08 f0       	brcs	.+2      	; 0x156e <main+0x636>
    156c:	ee c0       	rjmp	.+476    	; 0x174a <main+0x812>
    156e:	80 91 30 03 	lds	r24, 0x0330
    1572:	90 91 31 03 	lds	r25, 0x0331
    1576:	86 0f       	add	r24, r22
    1578:	97 1f       	adc	r25, r23
    157a:	48 17       	cp	r20, r24
    157c:	59 07       	cpc	r21, r25
    157e:	08 f0       	brcs	.+2      	; 0x1582 <main+0x64a>
    1580:	e4 c0       	rjmp	.+456    	; 0x174a <main+0x812>
    1582:	80 91 30 03 	lds	r24, 0x0330
    1586:	90 91 31 03 	lds	r25, 0x0331
    158a:	90 93 bd 01 	sts	0x01BD, r25
    158e:	80 93 bc 01 	sts	0x01BC, r24
    1592:	10 92 31 03 	sts	0x0331, r1
    1596:	10 92 30 03 	sts	0x0330, r1
    159a:	ee 24       	eor	r14, r14
    159c:	4a e0       	ldi	r20, 0x0A	; 10
    159e:	64 2e       	mov	r6, r20
    15a0:	71 2c       	mov	r7, r1
    15a2:	6b 96       	adiw	r28, 0x1b	; 27
    15a4:	ae ad       	sts	0x6e, r26
    15a6:	bf ad       	sts	0x6f, r27
    15a8:	6b 97       	sbiw	r28, 0x1b	; 27
    15aa:	cd 90       	ld	r12, X+
    15ac:	6b 96       	adiw	r28, 0x1b	; 27
    15ae:	bf af       	sts	0x7f, r27
    15b0:	ae af       	sts	0x7e, r26
    15b2:	6b 97       	sbiw	r28, 0x1b	; 27
    15b4:	dd 24       	eor	r13, r13
    15b6:	86 01       	movw	r16, r12
    15b8:	05 5e       	subi	r16, 0xE5	; 229
    15ba:	1c 4f       	sbci	r17, 0xFC	; 252
    15bc:	8e 2d       	mov	r24, r14
    15be:	f8 01       	movw	r30, r16
    15c0:	60 81       	ld	r22, Z
    15c2:	68 d9       	rcall	.-3376   	; 0x894 <lcd_locate>
    15c4:	ff 24       	eor	r15, r15
    15c6:	03 c0       	rjmp	.+6      	; 0x15ce <main+0x696>
    15c8:	80 e2       	ldi	r24, 0x20	; 32
    15ca:	54 d9       	rcall	.-3416   	; 0x874 <lcd_set_char>
    15cc:	f3 94       	inc	r15
    15ce:	d8 01       	movw	r26, r16
    15d0:	6c 91       	ld	r22, X
    15d2:	8f 2d       	mov	r24, r15
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	93 01       	movw	r18, r6
    15d8:	26 1b       	sub	r18, r22
    15da:	31 09       	sbc	r19, r1
    15dc:	28 17       	cp	r18, r24
    15de:	39 07       	cpc	r19, r25
    15e0:	9c f7       	brge	.-26     	; 0x15c8 <main+0x690>
    15e2:	8e 2d       	mov	r24, r14
    15e4:	57 d9       	rcall	.-3410   	; 0x894 <lcd_locate>
    15e6:	ff 24       	eor	r15, r15
    15e8:	0f e0       	ldi	r16, 0x0F	; 15
    15ea:	10 e0       	ldi	r17, 0x00	; 0
    15ec:	0c 0f       	add	r16, r28
    15ee:	1d 1f       	adc	r17, r29
    15f0:	0c 0d       	add	r16, r12
    15f2:	1d 1d       	adc	r17, r13
    15f4:	03 c0       	rjmp	.+6      	; 0x15fc <main+0x6c4>
    15f6:	80 e2       	ldi	r24, 0x20	; 32
    15f8:	3d d9       	rcall	.-3462   	; 0x874 <lcd_set_char>
    15fa:	f3 94       	inc	r15
    15fc:	f8 01       	movw	r30, r16
    15fe:	80 81       	ld	r24, Z
    1600:	f8 16       	cp	r15, r24
    1602:	c8 f3       	brcs	.-14     	; 0x15f6 <main+0x6be>
    1604:	6f 96       	adiw	r28, 0x1f	; 31
    1606:	ae ad       	sts	0x6e, r26
    1608:	bf ad       	sts	0x6f, r27
    160a:	6f 97       	sbiw	r28, 0x1f	; 31
    160c:	8d 91       	ld	r24, X+
    160e:	6f 96       	adiw	r28, 0x1f	; 31
    1610:	bf af       	sts	0x7f, r27
    1612:	ae af       	sts	0x7e, r26
    1614:	6f 97       	sbiw	r28, 0x1f	; 31
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	21 f5       	brne	.+72     	; 0x1662 <main+0x72a>
    161a:	ed e1       	ldi	r30, 0x1D	; 29
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	ec 0f       	add	r30, r28
    1620:	fd 1f       	adc	r31, r29
    1622:	ec 0d       	add	r30, r12
    1624:	fd 1d       	adc	r31, r13
    1626:	40 81       	ld	r20, Z
    1628:	6d 96       	adiw	r28, 0x1d	; 29
    162a:	ee ad       	sts	0x6e, r30
    162c:	ff ad       	sts	0x6f, r31
    162e:	6d 97       	sbiw	r28, 0x1d	; 29
    1630:	60 81       	ld	r22, Z
    1632:	71 81       	ldd	r23, Z+1	; 0x01
    1634:	82 81       	ldd	r24, Z+2	; 0x02
    1636:	93 81       	ldd	r25, Z+3	; 0x03
    1638:	e4 e2       	ldi	r30, 0x24	; 36
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	ec 0f       	add	r30, r28
    163e:	fd 1f       	adc	r31, r29
    1640:	ec 0d       	add	r30, r12
    1642:	fd 1d       	adc	r31, r13
    1644:	20 81       	ld	r18, Z
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	24 1b       	sub	r18, r20
    164a:	31 09       	sbc	r19, r1
    164c:	e6 e1       	ldi	r30, 0x16	; 22
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	ec 0f       	add	r30, r28
    1652:	fd 1f       	adc	r31, r29
    1654:	ec 0d       	add	r30, r12
    1656:	fd 1d       	adc	r31, r13
    1658:	00 81       	ld	r16, Z
    165a:	50 e0       	ldi	r21, 0x00	; 0
    165c:	10 e0       	ldi	r17, 0x00	; 0
    165e:	3a d9       	rcall	.-3468   	; 0x8d4 <lcd_set_numeric>
    1660:	36 c0       	rjmp	.+108    	; 0x16ce <main+0x796>
    1662:	88 23       	and	r24, r24
    1664:	29 f0       	breq	.+10     	; 0x1670 <main+0x738>
    1666:	33 c0       	rjmp	.+102    	; 0x16ce <main+0x796>
    1668:	80 e2       	ldi	r24, 0x20	; 32
    166a:	04 d9       	rcall	.-3576   	; 0x874 <lcd_set_char>
    166c:	1f 5f       	subi	r17, 0xFF	; 255
    166e:	15 c0       	rjmp	.+42     	; 0x169a <main+0x762>
    1670:	10 e0       	ldi	r17, 0x00	; 0
    1672:	24 e2       	ldi	r18, 0x24	; 36
    1674:	a2 2e       	mov	r10, r18
    1676:	b1 2c       	mov	r11, r1
    1678:	ac 0e       	add	r10, r28
    167a:	bd 1e       	adc	r11, r29
    167c:	ac 0c       	add	r10, r12
    167e:	bd 1c       	adc	r11, r13
    1680:	3d e1       	ldi	r19, 0x1D	; 29
    1682:	83 2e       	mov	r8, r19
    1684:	91 2c       	mov	r9, r1
    1686:	8c 0e       	add	r8, r28
    1688:	9d 1e       	adc	r9, r29
    168a:	8c 0c       	add	r8, r12
    168c:	9d 1c       	adc	r9, r13
    168e:	26 e1       	ldi	r18, 0x16	; 22
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	2c 0f       	add	r18, r28
    1694:	3d 1f       	adc	r19, r29
    1696:	c2 0e       	add	r12, r18
    1698:	d3 1e       	adc	r13, r19
    169a:	d5 01       	movw	r26, r10
    169c:	0c 91       	ld	r16, X
    169e:	21 2f       	mov	r18, r17
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	f4 01       	movw	r30, r8
    16a8:	40 81       	ld	r20, Z
    16aa:	04 17       	cp	r16, r20
    16ac:	11 f4       	brne	.+4      	; 0x16b2 <main+0x77a>
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	d6 01       	movw	r26, r12
    16b4:	4c 91       	ld	r20, X
    16b6:	84 0f       	add	r24, r20
    16b8:	91 1d       	adc	r25, r1
    16ba:	28 17       	cp	r18, r24
    16bc:	39 07       	cpc	r19, r25
    16be:	a4 f2       	brlt	.-88     	; 0x1668 <main+0x730>
    16c0:	10 e0       	ldi	r17, 0x00	; 0
    16c2:	03 c0       	rjmp	.+6      	; 0x16ca <main+0x792>
    16c4:	8a e2       	ldi	r24, 0x2A	; 42
    16c6:	d6 d8       	rcall	.-3668   	; 0x874 <lcd_set_char>
    16c8:	1f 5f       	subi	r17, 0xFF	; 255
    16ca:	10 17       	cp	r17, r16
    16cc:	d9 f7       	brne	.-10     	; 0x16c4 <main+0x78c>
    16ce:	e3 94       	inc	r14
    16d0:	6d 96       	adiw	r28, 0x1d	; 29
    16d2:	ee ad       	sts	0x6e, r30
    16d4:	ff ad       	sts	0x6f, r31
    16d6:	6d 97       	sbiw	r28, 0x1d	; 29
    16d8:	34 96       	adiw	r30, 0x04	; 4
    16da:	6d 96       	adiw	r28, 0x1d	; 29
    16dc:	ff af       	sts	0x7f, r31
    16de:	ee af       	sts	0x7e, r30
    16e0:	6d 97       	sbiw	r28, 0x1d	; 29
    16e2:	f4 e0       	ldi	r31, 0x04	; 4
    16e4:	ef 16       	cp	r14, r31
    16e6:	09 f0       	breq	.+2      	; 0x16ea <main+0x7b2>
    16e8:	5c cf       	rjmp	.-328    	; 0x15a2 <main+0x66a>
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	6c e0       	ldi	r22, 0x0C	; 12
    16ee:	d2 d8       	rcall	.-3676   	; 0x894 <lcd_locate>
    16f0:	60 91 d0 01 	lds	r22, 0x01D0
    16f4:	70 91 d1 01 	lds	r23, 0x01D1
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	3b d1       	rcall	.+630    	; 0x1974 <__floatunsisf>
    16fe:	45 e0       	ldi	r20, 0x05	; 5
    1700:	50 e0       	ldi	r21, 0x00	; 0
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	00 e0       	ldi	r16, 0x00	; 0
    1708:	10 e0       	ldi	r17, 0x00	; 0
    170a:	e4 d8       	rcall	.-3640   	; 0x8d4 <lcd_set_numeric>
    170c:	8d e7       	ldi	r24, 0x7D	; 125
    170e:	91 e0       	ldi	r25, 0x01	; 1
    1710:	d6 d8       	rcall	.-3668   	; 0x8be <lcd_set_str>
    1712:	82 e0       	ldi	r24, 0x02	; 2
    1714:	6d e0       	ldi	r22, 0x0D	; 13
    1716:	be d8       	rcall	.-3716   	; 0x894 <lcd_locate>
    1718:	80 91 d0 01 	lds	r24, 0x01D0
    171c:	90 91 d1 01 	lds	r25, 0x01D1
    1720:	2b e0       	ldi	r18, 0x0B	; 11
    1722:	88 3b       	cpi	r24, 0xB8	; 184
    1724:	92 07       	cpc	r25, r18
    1726:	10 f4       	brcc	.+4      	; 0x172c <main+0x7f4>
    1728:	bd d7       	rcall	.+3962   	; 0x26a4 <__data_load_end+0x9c6>
    172a:	0a c0       	rjmp	.+20     	; 0x1740 <main+0x808>
    172c:	33 e1       	ldi	r19, 0x13	; 19
    172e:	88 38       	cpi	r24, 0x88	; 136
    1730:	93 07       	cpc	r25, r19
    1732:	10 f4       	brcc	.+4      	; 0x1738 <main+0x800>
    1734:	c6 d7       	rcall	.+3980   	; 0x26c2 <__data_load_end+0x9e4>
    1736:	04 c0       	rjmp	.+8      	; 0x1740 <main+0x808>
    1738:	d3 d7       	rcall	.+4006   	; 0x26e0 <__data_load_end+0xa02>
    173a:	81 e8       	ldi	r24, 0x81	; 129
    173c:	91 e0       	ldi	r25, 0x01	; 1
    173e:	bf d8       	rcall	.-3714   	; 0x8be <lcd_set_str>
    1740:	82 e0       	ldi	r24, 0x02	; 2
    1742:	6c e0       	ldi	r22, 0x0C	; 12
    1744:	a7 d8       	rcall	.-3762   	; 0x894 <lcd_locate>
    1746:	8f ef       	ldi	r24, 0xFF	; 255
    1748:	04 c0       	rjmp	.+8      	; 0x1752 <main+0x81a>
    174a:	82 e0       	ldi	r24, 0x02	; 2
    174c:	6c e0       	ldi	r22, 0x0C	; 12
    174e:	a2 d8       	rcall	.-3772   	; 0x894 <lcd_locate>
    1750:	80 e2       	ldi	r24, 0x20	; 32
    1752:	90 d8       	rcall	.-3808   	; 0x874 <lcd_set_char>
    1754:	83 e0       	ldi	r24, 0x03	; 3
    1756:	6c e0       	ldi	r22, 0x0C	; 12
    1758:	9d d8       	rcall	.-3782   	; 0x894 <lcd_locate>
    175a:	80 91 d0 01 	lds	r24, 0x01D0
    175e:	90 91 d1 01 	lds	r25, 0x01D1
    1762:	c3 d4       	rcall	.+2438   	; 0x20ea <__data_load_end+0x40c>
    1764:	80 91 d0 01 	lds	r24, 0x01D0
    1768:	90 91 d1 01 	lds	r25, 0x01D1
    176c:	3e d5       	rcall	.+2684   	; 0x21ea <__data_load_end+0x50c>
    176e:	e1 cd       	rjmp	.-1086   	; 0x1332 <main+0x3fa>

00001770 <__subsf3>:
    1770:	50 58       	subi	r21, 0x80	; 128

00001772 <__addsf3>:
    1772:	bb 27       	eor	r27, r27
    1774:	aa 27       	eor	r26, r26
    1776:	0e d0       	rcall	.+28     	; 0x1794 <__addsf3x>
    1778:	75 c1       	rjmp	.+746    	; 0x1a64 <__fp_round>
    177a:	66 d1       	rcall	.+716    	; 0x1a48 <__fp_pscA>
    177c:	30 f0       	brcs	.+12     	; 0x178a <__addsf3+0x18>
    177e:	6b d1       	rcall	.+726    	; 0x1a56 <__fp_pscB>
    1780:	20 f0       	brcs	.+8      	; 0x178a <__addsf3+0x18>
    1782:	31 f4       	brne	.+12     	; 0x1790 <__addsf3+0x1e>
    1784:	9f 3f       	cpi	r25, 0xFF	; 255
    1786:	11 f4       	brne	.+4      	; 0x178c <__addsf3+0x1a>
    1788:	1e f4       	brtc	.+6      	; 0x1790 <__addsf3+0x1e>
    178a:	5b c1       	rjmp	.+694    	; 0x1a42 <__fp_nan>
    178c:	0e f4       	brtc	.+2      	; 0x1790 <__addsf3+0x1e>
    178e:	e0 95       	com	r30
    1790:	e7 fb       	bst	r30, 7
    1792:	51 c1       	rjmp	.+674    	; 0x1a36 <__fp_inf>

00001794 <__addsf3x>:
    1794:	e9 2f       	mov	r30, r25
    1796:	77 d1       	rcall	.+750    	; 0x1a86 <__fp_split3>
    1798:	80 f3       	brcs	.-32     	; 0x177a <__addsf3+0x8>
    179a:	ba 17       	cp	r27, r26
    179c:	62 07       	cpc	r22, r18
    179e:	73 07       	cpc	r23, r19
    17a0:	84 07       	cpc	r24, r20
    17a2:	95 07       	cpc	r25, r21
    17a4:	18 f0       	brcs	.+6      	; 0x17ac <__addsf3x+0x18>
    17a6:	71 f4       	brne	.+28     	; 0x17c4 <__addsf3x+0x30>
    17a8:	9e f5       	brtc	.+102    	; 0x1810 <__addsf3x+0x7c>
    17aa:	8f c1       	rjmp	.+798    	; 0x1aca <__fp_zero>
    17ac:	0e f4       	brtc	.+2      	; 0x17b0 <__addsf3x+0x1c>
    17ae:	e0 95       	com	r30
    17b0:	0b 2e       	mov	r0, r27
    17b2:	ba 2f       	mov	r27, r26
    17b4:	a0 2d       	mov	r26, r0
    17b6:	0b 01       	movw	r0, r22
    17b8:	b9 01       	movw	r22, r18
    17ba:	90 01       	movw	r18, r0
    17bc:	0c 01       	movw	r0, r24
    17be:	ca 01       	movw	r24, r20
    17c0:	a0 01       	movw	r20, r0
    17c2:	11 24       	eor	r1, r1
    17c4:	ff 27       	eor	r31, r31
    17c6:	59 1b       	sub	r21, r25
    17c8:	99 f0       	breq	.+38     	; 0x17f0 <__addsf3x+0x5c>
    17ca:	59 3f       	cpi	r21, 0xF9	; 249
    17cc:	50 f4       	brcc	.+20     	; 0x17e2 <__addsf3x+0x4e>
    17ce:	50 3e       	cpi	r21, 0xE0	; 224
    17d0:	68 f1       	brcs	.+90     	; 0x182c <__addsf3x+0x98>
    17d2:	1a 16       	cp	r1, r26
    17d4:	f0 40       	sbci	r31, 0x00	; 0
    17d6:	a2 2f       	mov	r26, r18
    17d8:	23 2f       	mov	r18, r19
    17da:	34 2f       	mov	r19, r20
    17dc:	44 27       	eor	r20, r20
    17de:	58 5f       	subi	r21, 0xF8	; 248
    17e0:	f3 cf       	rjmp	.-26     	; 0x17c8 <__addsf3x+0x34>
    17e2:	46 95       	lsr	r20
    17e4:	37 95       	ror	r19
    17e6:	27 95       	ror	r18
    17e8:	a7 95       	ror	r26
    17ea:	f0 40       	sbci	r31, 0x00	; 0
    17ec:	53 95       	inc	r21
    17ee:	c9 f7       	brne	.-14     	; 0x17e2 <__addsf3x+0x4e>
    17f0:	7e f4       	brtc	.+30     	; 0x1810 <__addsf3x+0x7c>
    17f2:	1f 16       	cp	r1, r31
    17f4:	ba 0b       	sbc	r27, r26
    17f6:	62 0b       	sbc	r22, r18
    17f8:	73 0b       	sbc	r23, r19
    17fa:	84 0b       	sbc	r24, r20
    17fc:	ba f0       	brmi	.+46     	; 0x182c <__addsf3x+0x98>
    17fe:	91 50       	subi	r25, 0x01	; 1
    1800:	a1 f0       	breq	.+40     	; 0x182a <__addsf3x+0x96>
    1802:	ff 0f       	add	r31, r31
    1804:	bb 1f       	adc	r27, r27
    1806:	66 1f       	adc	r22, r22
    1808:	77 1f       	adc	r23, r23
    180a:	88 1f       	adc	r24, r24
    180c:	c2 f7       	brpl	.-16     	; 0x17fe <__addsf3x+0x6a>
    180e:	0e c0       	rjmp	.+28     	; 0x182c <__addsf3x+0x98>
    1810:	ba 0f       	add	r27, r26
    1812:	62 1f       	adc	r22, r18
    1814:	73 1f       	adc	r23, r19
    1816:	84 1f       	adc	r24, r20
    1818:	48 f4       	brcc	.+18     	; 0x182c <__addsf3x+0x98>
    181a:	87 95       	ror	r24
    181c:	77 95       	ror	r23
    181e:	67 95       	ror	r22
    1820:	b7 95       	ror	r27
    1822:	f7 95       	ror	r31
    1824:	9e 3f       	cpi	r25, 0xFE	; 254
    1826:	08 f0       	brcs	.+2      	; 0x182a <__addsf3x+0x96>
    1828:	b3 cf       	rjmp	.-154    	; 0x1790 <__addsf3+0x1e>
    182a:	93 95       	inc	r25
    182c:	88 0f       	add	r24, r24
    182e:	08 f0       	brcs	.+2      	; 0x1832 <__addsf3x+0x9e>
    1830:	99 27       	eor	r25, r25
    1832:	ee 0f       	add	r30, r30
    1834:	97 95       	ror	r25
    1836:	87 95       	ror	r24
    1838:	08 95       	ret

0000183a <__cmpsf2>:
    183a:	d9 d0       	rcall	.+434    	; 0x19ee <__fp_cmp>
    183c:	08 f4       	brcc	.+2      	; 0x1840 <__cmpsf2+0x6>
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	08 95       	ret

00001842 <__divsf3>:
    1842:	0c d0       	rcall	.+24     	; 0x185c <__divsf3x>
    1844:	0f c1       	rjmp	.+542    	; 0x1a64 <__fp_round>
    1846:	07 d1       	rcall	.+526    	; 0x1a56 <__fp_pscB>
    1848:	40 f0       	brcs	.+16     	; 0x185a <__divsf3+0x18>
    184a:	fe d0       	rcall	.+508    	; 0x1a48 <__fp_pscA>
    184c:	30 f0       	brcs	.+12     	; 0x185a <__divsf3+0x18>
    184e:	21 f4       	brne	.+8      	; 0x1858 <__divsf3+0x16>
    1850:	5f 3f       	cpi	r21, 0xFF	; 255
    1852:	19 f0       	breq	.+6      	; 0x185a <__divsf3+0x18>
    1854:	f0 c0       	rjmp	.+480    	; 0x1a36 <__fp_inf>
    1856:	51 11       	cpse	r21, r1
    1858:	39 c1       	rjmp	.+626    	; 0x1acc <__fp_szero>
    185a:	f3 c0       	rjmp	.+486    	; 0x1a42 <__fp_nan>

0000185c <__divsf3x>:
    185c:	14 d1       	rcall	.+552    	; 0x1a86 <__fp_split3>
    185e:	98 f3       	brcs	.-26     	; 0x1846 <__divsf3+0x4>

00001860 <__divsf3_pse>:
    1860:	99 23       	and	r25, r25
    1862:	c9 f3       	breq	.-14     	; 0x1856 <__divsf3+0x14>
    1864:	55 23       	and	r21, r21
    1866:	b1 f3       	breq	.-20     	; 0x1854 <__divsf3+0x12>
    1868:	95 1b       	sub	r25, r21
    186a:	55 0b       	sbc	r21, r21
    186c:	bb 27       	eor	r27, r27
    186e:	aa 27       	eor	r26, r26
    1870:	62 17       	cp	r22, r18
    1872:	73 07       	cpc	r23, r19
    1874:	84 07       	cpc	r24, r20
    1876:	38 f0       	brcs	.+14     	; 0x1886 <__divsf3_pse+0x26>
    1878:	9f 5f       	subi	r25, 0xFF	; 255
    187a:	5f 4f       	sbci	r21, 0xFF	; 255
    187c:	22 0f       	add	r18, r18
    187e:	33 1f       	adc	r19, r19
    1880:	44 1f       	adc	r20, r20
    1882:	aa 1f       	adc	r26, r26
    1884:	a9 f3       	breq	.-22     	; 0x1870 <__divsf3_pse+0x10>
    1886:	33 d0       	rcall	.+102    	; 0x18ee <__divsf3_pse+0x8e>
    1888:	0e 2e       	mov	r0, r30
    188a:	3a f0       	brmi	.+14     	; 0x189a <__divsf3_pse+0x3a>
    188c:	e0 e8       	ldi	r30, 0x80	; 128
    188e:	30 d0       	rcall	.+96     	; 0x18f0 <__divsf3_pse+0x90>
    1890:	91 50       	subi	r25, 0x01	; 1
    1892:	50 40       	sbci	r21, 0x00	; 0
    1894:	e6 95       	lsr	r30
    1896:	00 1c       	adc	r0, r0
    1898:	ca f7       	brpl	.-14     	; 0x188c <__divsf3_pse+0x2c>
    189a:	29 d0       	rcall	.+82     	; 0x18ee <__divsf3_pse+0x8e>
    189c:	fe 2f       	mov	r31, r30
    189e:	27 d0       	rcall	.+78     	; 0x18ee <__divsf3_pse+0x8e>
    18a0:	66 0f       	add	r22, r22
    18a2:	77 1f       	adc	r23, r23
    18a4:	88 1f       	adc	r24, r24
    18a6:	bb 1f       	adc	r27, r27
    18a8:	26 17       	cp	r18, r22
    18aa:	37 07       	cpc	r19, r23
    18ac:	48 07       	cpc	r20, r24
    18ae:	ab 07       	cpc	r26, r27
    18b0:	b0 e8       	ldi	r27, 0x80	; 128
    18b2:	09 f0       	breq	.+2      	; 0x18b6 <__divsf3_pse+0x56>
    18b4:	bb 0b       	sbc	r27, r27
    18b6:	80 2d       	mov	r24, r0
    18b8:	bf 01       	movw	r22, r30
    18ba:	ff 27       	eor	r31, r31
    18bc:	93 58       	subi	r25, 0x83	; 131
    18be:	5f 4f       	sbci	r21, 0xFF	; 255
    18c0:	2a f0       	brmi	.+10     	; 0x18cc <__divsf3_pse+0x6c>
    18c2:	9e 3f       	cpi	r25, 0xFE	; 254
    18c4:	51 05       	cpc	r21, r1
    18c6:	68 f0       	brcs	.+26     	; 0x18e2 <__divsf3_pse+0x82>
    18c8:	b6 c0       	rjmp	.+364    	; 0x1a36 <__fp_inf>
    18ca:	00 c1       	rjmp	.+512    	; 0x1acc <__fp_szero>
    18cc:	5f 3f       	cpi	r21, 0xFF	; 255
    18ce:	ec f3       	brlt	.-6      	; 0x18ca <__divsf3_pse+0x6a>
    18d0:	98 3e       	cpi	r25, 0xE8	; 232
    18d2:	dc f3       	brlt	.-10     	; 0x18ca <__divsf3_pse+0x6a>
    18d4:	86 95       	lsr	r24
    18d6:	77 95       	ror	r23
    18d8:	67 95       	ror	r22
    18da:	b7 95       	ror	r27
    18dc:	f7 95       	ror	r31
    18de:	9f 5f       	subi	r25, 0xFF	; 255
    18e0:	c9 f7       	brne	.-14     	; 0x18d4 <__divsf3_pse+0x74>
    18e2:	88 0f       	add	r24, r24
    18e4:	91 1d       	adc	r25, r1
    18e6:	96 95       	lsr	r25
    18e8:	87 95       	ror	r24
    18ea:	97 f9       	bld	r25, 7
    18ec:	08 95       	ret
    18ee:	e1 e0       	ldi	r30, 0x01	; 1
    18f0:	66 0f       	add	r22, r22
    18f2:	77 1f       	adc	r23, r23
    18f4:	88 1f       	adc	r24, r24
    18f6:	bb 1f       	adc	r27, r27
    18f8:	62 17       	cp	r22, r18
    18fa:	73 07       	cpc	r23, r19
    18fc:	84 07       	cpc	r24, r20
    18fe:	ba 07       	cpc	r27, r26
    1900:	20 f0       	brcs	.+8      	; 0x190a <__divsf3_pse+0xaa>
    1902:	62 1b       	sub	r22, r18
    1904:	73 0b       	sbc	r23, r19
    1906:	84 0b       	sbc	r24, r20
    1908:	ba 0b       	sbc	r27, r26
    190a:	ee 1f       	adc	r30, r30
    190c:	88 f7       	brcc	.-30     	; 0x18f0 <__divsf3_pse+0x90>
    190e:	e0 95       	com	r30
    1910:	08 95       	ret

00001912 <__fixsfsi>:
    1912:	04 d0       	rcall	.+8      	; 0x191c <__fixunssfsi>
    1914:	68 94       	set
    1916:	b1 11       	cpse	r27, r1
    1918:	d9 c0       	rjmp	.+434    	; 0x1acc <__fp_szero>
    191a:	08 95       	ret

0000191c <__fixunssfsi>:
    191c:	bc d0       	rcall	.+376    	; 0x1a96 <__fp_splitA>
    191e:	88 f0       	brcs	.+34     	; 0x1942 <__fixunssfsi+0x26>
    1920:	9f 57       	subi	r25, 0x7F	; 127
    1922:	90 f0       	brcs	.+36     	; 0x1948 <__fixunssfsi+0x2c>
    1924:	b9 2f       	mov	r27, r25
    1926:	99 27       	eor	r25, r25
    1928:	b7 51       	subi	r27, 0x17	; 23
    192a:	a0 f0       	brcs	.+40     	; 0x1954 <__fixunssfsi+0x38>
    192c:	d1 f0       	breq	.+52     	; 0x1962 <__fixunssfsi+0x46>
    192e:	66 0f       	add	r22, r22
    1930:	77 1f       	adc	r23, r23
    1932:	88 1f       	adc	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	1a f0       	brmi	.+6      	; 0x193e <__fixunssfsi+0x22>
    1938:	ba 95       	dec	r27
    193a:	c9 f7       	brne	.-14     	; 0x192e <__fixunssfsi+0x12>
    193c:	12 c0       	rjmp	.+36     	; 0x1962 <__fixunssfsi+0x46>
    193e:	b1 30       	cpi	r27, 0x01	; 1
    1940:	81 f0       	breq	.+32     	; 0x1962 <__fixunssfsi+0x46>
    1942:	c3 d0       	rcall	.+390    	; 0x1aca <__fp_zero>
    1944:	b1 e0       	ldi	r27, 0x01	; 1
    1946:	08 95       	ret
    1948:	c0 c0       	rjmp	.+384    	; 0x1aca <__fp_zero>
    194a:	67 2f       	mov	r22, r23
    194c:	78 2f       	mov	r23, r24
    194e:	88 27       	eor	r24, r24
    1950:	b8 5f       	subi	r27, 0xF8	; 248
    1952:	39 f0       	breq	.+14     	; 0x1962 <__fixunssfsi+0x46>
    1954:	b9 3f       	cpi	r27, 0xF9	; 249
    1956:	cc f3       	brlt	.-14     	; 0x194a <__fixunssfsi+0x2e>
    1958:	86 95       	lsr	r24
    195a:	77 95       	ror	r23
    195c:	67 95       	ror	r22
    195e:	b3 95       	inc	r27
    1960:	d9 f7       	brne	.-10     	; 0x1958 <__fixunssfsi+0x3c>
    1962:	3e f4       	brtc	.+14     	; 0x1972 <__fixunssfsi+0x56>
    1964:	90 95       	com	r25
    1966:	80 95       	com	r24
    1968:	70 95       	com	r23
    196a:	61 95       	neg	r22
    196c:	7f 4f       	sbci	r23, 0xFF	; 255
    196e:	8f 4f       	sbci	r24, 0xFF	; 255
    1970:	9f 4f       	sbci	r25, 0xFF	; 255
    1972:	08 95       	ret

00001974 <__floatunsisf>:
    1974:	e8 94       	clt
    1976:	09 c0       	rjmp	.+18     	; 0x198a <__floatsisf+0x12>

00001978 <__floatsisf>:
    1978:	97 fb       	bst	r25, 7
    197a:	3e f4       	brtc	.+14     	; 0x198a <__floatsisf+0x12>
    197c:	90 95       	com	r25
    197e:	80 95       	com	r24
    1980:	70 95       	com	r23
    1982:	61 95       	neg	r22
    1984:	7f 4f       	sbci	r23, 0xFF	; 255
    1986:	8f 4f       	sbci	r24, 0xFF	; 255
    1988:	9f 4f       	sbci	r25, 0xFF	; 255
    198a:	99 23       	and	r25, r25
    198c:	a9 f0       	breq	.+42     	; 0x19b8 <__floatsisf+0x40>
    198e:	f9 2f       	mov	r31, r25
    1990:	96 e9       	ldi	r25, 0x96	; 150
    1992:	bb 27       	eor	r27, r27
    1994:	93 95       	inc	r25
    1996:	f6 95       	lsr	r31
    1998:	87 95       	ror	r24
    199a:	77 95       	ror	r23
    199c:	67 95       	ror	r22
    199e:	b7 95       	ror	r27
    19a0:	f1 11       	cpse	r31, r1
    19a2:	f8 cf       	rjmp	.-16     	; 0x1994 <__floatsisf+0x1c>
    19a4:	fa f4       	brpl	.+62     	; 0x19e4 <__floatsisf+0x6c>
    19a6:	bb 0f       	add	r27, r27
    19a8:	11 f4       	brne	.+4      	; 0x19ae <__floatsisf+0x36>
    19aa:	60 ff       	sbrs	r22, 0
    19ac:	1b c0       	rjmp	.+54     	; 0x19e4 <__floatsisf+0x6c>
    19ae:	6f 5f       	subi	r22, 0xFF	; 255
    19b0:	7f 4f       	sbci	r23, 0xFF	; 255
    19b2:	8f 4f       	sbci	r24, 0xFF	; 255
    19b4:	9f 4f       	sbci	r25, 0xFF	; 255
    19b6:	16 c0       	rjmp	.+44     	; 0x19e4 <__floatsisf+0x6c>
    19b8:	88 23       	and	r24, r24
    19ba:	11 f0       	breq	.+4      	; 0x19c0 <__floatsisf+0x48>
    19bc:	96 e9       	ldi	r25, 0x96	; 150
    19be:	11 c0       	rjmp	.+34     	; 0x19e2 <__floatsisf+0x6a>
    19c0:	77 23       	and	r23, r23
    19c2:	21 f0       	breq	.+8      	; 0x19cc <__floatsisf+0x54>
    19c4:	9e e8       	ldi	r25, 0x8E	; 142
    19c6:	87 2f       	mov	r24, r23
    19c8:	76 2f       	mov	r23, r22
    19ca:	05 c0       	rjmp	.+10     	; 0x19d6 <__floatsisf+0x5e>
    19cc:	66 23       	and	r22, r22
    19ce:	71 f0       	breq	.+28     	; 0x19ec <__floatsisf+0x74>
    19d0:	96 e8       	ldi	r25, 0x86	; 134
    19d2:	86 2f       	mov	r24, r22
    19d4:	70 e0       	ldi	r23, 0x00	; 0
    19d6:	60 e0       	ldi	r22, 0x00	; 0
    19d8:	2a f0       	brmi	.+10     	; 0x19e4 <__floatsisf+0x6c>
    19da:	9a 95       	dec	r25
    19dc:	66 0f       	add	r22, r22
    19de:	77 1f       	adc	r23, r23
    19e0:	88 1f       	adc	r24, r24
    19e2:	da f7       	brpl	.-10     	; 0x19da <__floatsisf+0x62>
    19e4:	88 0f       	add	r24, r24
    19e6:	96 95       	lsr	r25
    19e8:	87 95       	ror	r24
    19ea:	97 f9       	bld	r25, 7
    19ec:	08 95       	ret

000019ee <__fp_cmp>:
    19ee:	99 0f       	add	r25, r25
    19f0:	00 08       	sbc	r0, r0
    19f2:	55 0f       	add	r21, r21
    19f4:	aa 0b       	sbc	r26, r26
    19f6:	e0 e8       	ldi	r30, 0x80	; 128
    19f8:	fe ef       	ldi	r31, 0xFE	; 254
    19fa:	16 16       	cp	r1, r22
    19fc:	17 06       	cpc	r1, r23
    19fe:	e8 07       	cpc	r30, r24
    1a00:	f9 07       	cpc	r31, r25
    1a02:	c0 f0       	brcs	.+48     	; 0x1a34 <__fp_cmp+0x46>
    1a04:	12 16       	cp	r1, r18
    1a06:	13 06       	cpc	r1, r19
    1a08:	e4 07       	cpc	r30, r20
    1a0a:	f5 07       	cpc	r31, r21
    1a0c:	98 f0       	brcs	.+38     	; 0x1a34 <__fp_cmp+0x46>
    1a0e:	62 1b       	sub	r22, r18
    1a10:	73 0b       	sbc	r23, r19
    1a12:	84 0b       	sbc	r24, r20
    1a14:	95 0b       	sbc	r25, r21
    1a16:	39 f4       	brne	.+14     	; 0x1a26 <__fp_cmp+0x38>
    1a18:	0a 26       	eor	r0, r26
    1a1a:	61 f0       	breq	.+24     	; 0x1a34 <__fp_cmp+0x46>
    1a1c:	23 2b       	or	r18, r19
    1a1e:	24 2b       	or	r18, r20
    1a20:	25 2b       	or	r18, r21
    1a22:	21 f4       	brne	.+8      	; 0x1a2c <__fp_cmp+0x3e>
    1a24:	08 95       	ret
    1a26:	0a 26       	eor	r0, r26
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <__fp_cmp+0x3e>
    1a2a:	a1 40       	sbci	r26, 0x01	; 1
    1a2c:	a6 95       	lsr	r26
    1a2e:	8f ef       	ldi	r24, 0xFF	; 255
    1a30:	81 1d       	adc	r24, r1
    1a32:	81 1d       	adc	r24, r1
    1a34:	08 95       	ret

00001a36 <__fp_inf>:
    1a36:	97 f9       	bld	r25, 7
    1a38:	9f 67       	ori	r25, 0x7F	; 127
    1a3a:	80 e8       	ldi	r24, 0x80	; 128
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	60 e0       	ldi	r22, 0x00	; 0
    1a40:	08 95       	ret

00001a42 <__fp_nan>:
    1a42:	9f ef       	ldi	r25, 0xFF	; 255
    1a44:	80 ec       	ldi	r24, 0xC0	; 192
    1a46:	08 95       	ret

00001a48 <__fp_pscA>:
    1a48:	00 24       	eor	r0, r0
    1a4a:	0a 94       	dec	r0
    1a4c:	16 16       	cp	r1, r22
    1a4e:	17 06       	cpc	r1, r23
    1a50:	18 06       	cpc	r1, r24
    1a52:	09 06       	cpc	r0, r25
    1a54:	08 95       	ret

00001a56 <__fp_pscB>:
    1a56:	00 24       	eor	r0, r0
    1a58:	0a 94       	dec	r0
    1a5a:	12 16       	cp	r1, r18
    1a5c:	13 06       	cpc	r1, r19
    1a5e:	14 06       	cpc	r1, r20
    1a60:	05 06       	cpc	r0, r21
    1a62:	08 95       	ret

00001a64 <__fp_round>:
    1a64:	09 2e       	mov	r0, r25
    1a66:	03 94       	inc	r0
    1a68:	00 0c       	add	r0, r0
    1a6a:	11 f4       	brne	.+4      	; 0x1a70 <__fp_round+0xc>
    1a6c:	88 23       	and	r24, r24
    1a6e:	52 f0       	brmi	.+20     	; 0x1a84 <__fp_round+0x20>
    1a70:	bb 0f       	add	r27, r27
    1a72:	40 f4       	brcc	.+16     	; 0x1a84 <__fp_round+0x20>
    1a74:	bf 2b       	or	r27, r31
    1a76:	11 f4       	brne	.+4      	; 0x1a7c <__fp_round+0x18>
    1a78:	60 ff       	sbrs	r22, 0
    1a7a:	04 c0       	rjmp	.+8      	; 0x1a84 <__fp_round+0x20>
    1a7c:	6f 5f       	subi	r22, 0xFF	; 255
    1a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a80:	8f 4f       	sbci	r24, 0xFF	; 255
    1a82:	9f 4f       	sbci	r25, 0xFF	; 255
    1a84:	08 95       	ret

00001a86 <__fp_split3>:
    1a86:	57 fd       	sbrc	r21, 7
    1a88:	90 58       	subi	r25, 0x80	; 128
    1a8a:	44 0f       	add	r20, r20
    1a8c:	55 1f       	adc	r21, r21
    1a8e:	59 f0       	breq	.+22     	; 0x1aa6 <__fp_splitA+0x10>
    1a90:	5f 3f       	cpi	r21, 0xFF	; 255
    1a92:	71 f0       	breq	.+28     	; 0x1ab0 <__fp_splitA+0x1a>
    1a94:	47 95       	ror	r20

00001a96 <__fp_splitA>:
    1a96:	88 0f       	add	r24, r24
    1a98:	97 fb       	bst	r25, 7
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	61 f0       	breq	.+24     	; 0x1ab6 <__fp_splitA+0x20>
    1a9e:	9f 3f       	cpi	r25, 0xFF	; 255
    1aa0:	79 f0       	breq	.+30     	; 0x1ac0 <__fp_splitA+0x2a>
    1aa2:	87 95       	ror	r24
    1aa4:	08 95       	ret
    1aa6:	12 16       	cp	r1, r18
    1aa8:	13 06       	cpc	r1, r19
    1aaa:	14 06       	cpc	r1, r20
    1aac:	55 1f       	adc	r21, r21
    1aae:	f2 cf       	rjmp	.-28     	; 0x1a94 <__fp_split3+0xe>
    1ab0:	46 95       	lsr	r20
    1ab2:	f1 df       	rcall	.-30     	; 0x1a96 <__fp_splitA>
    1ab4:	08 c0       	rjmp	.+16     	; 0x1ac6 <__fp_splitA+0x30>
    1ab6:	16 16       	cp	r1, r22
    1ab8:	17 06       	cpc	r1, r23
    1aba:	18 06       	cpc	r1, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	f1 cf       	rjmp	.-30     	; 0x1aa2 <__fp_splitA+0xc>
    1ac0:	86 95       	lsr	r24
    1ac2:	71 05       	cpc	r23, r1
    1ac4:	61 05       	cpc	r22, r1
    1ac6:	08 94       	sec
    1ac8:	08 95       	ret

00001aca <__fp_zero>:
    1aca:	e8 94       	clt

00001acc <__fp_szero>:
    1acc:	bb 27       	eor	r27, r27
    1ace:	66 27       	eor	r22, r22
    1ad0:	77 27       	eor	r23, r23
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	97 f9       	bld	r25, 7
    1ad6:	08 95       	ret

00001ad8 <__mulsf3>:
    1ad8:	0b d0       	rcall	.+22     	; 0x1af0 <__mulsf3x>
    1ada:	c4 cf       	rjmp	.-120    	; 0x1a64 <__fp_round>
    1adc:	b5 df       	rcall	.-150    	; 0x1a48 <__fp_pscA>
    1ade:	28 f0       	brcs	.+10     	; 0x1aea <__mulsf3+0x12>
    1ae0:	ba df       	rcall	.-140    	; 0x1a56 <__fp_pscB>
    1ae2:	18 f0       	brcs	.+6      	; 0x1aea <__mulsf3+0x12>
    1ae4:	95 23       	and	r25, r21
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <__mulsf3+0x12>
    1ae8:	a6 cf       	rjmp	.-180    	; 0x1a36 <__fp_inf>
    1aea:	ab cf       	rjmp	.-170    	; 0x1a42 <__fp_nan>
    1aec:	11 24       	eor	r1, r1
    1aee:	ee cf       	rjmp	.-36     	; 0x1acc <__fp_szero>

00001af0 <__mulsf3x>:
    1af0:	ca df       	rcall	.-108    	; 0x1a86 <__fp_split3>
    1af2:	a0 f3       	brcs	.-24     	; 0x1adc <__mulsf3+0x4>

00001af4 <__mulsf3_pse>:
    1af4:	95 9f       	mul	r25, r21
    1af6:	d1 f3       	breq	.-12     	; 0x1aec <__mulsf3+0x14>
    1af8:	95 0f       	add	r25, r21
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	55 1f       	adc	r21, r21
    1afe:	62 9f       	mul	r22, r18
    1b00:	f0 01       	movw	r30, r0
    1b02:	72 9f       	mul	r23, r18
    1b04:	bb 27       	eor	r27, r27
    1b06:	f0 0d       	add	r31, r0
    1b08:	b1 1d       	adc	r27, r1
    1b0a:	63 9f       	mul	r22, r19
    1b0c:	aa 27       	eor	r26, r26
    1b0e:	f0 0d       	add	r31, r0
    1b10:	b1 1d       	adc	r27, r1
    1b12:	aa 1f       	adc	r26, r26
    1b14:	64 9f       	mul	r22, r20
    1b16:	66 27       	eor	r22, r22
    1b18:	b0 0d       	add	r27, r0
    1b1a:	a1 1d       	adc	r26, r1
    1b1c:	66 1f       	adc	r22, r22
    1b1e:	82 9f       	mul	r24, r18
    1b20:	22 27       	eor	r18, r18
    1b22:	b0 0d       	add	r27, r0
    1b24:	a1 1d       	adc	r26, r1
    1b26:	62 1f       	adc	r22, r18
    1b28:	73 9f       	mul	r23, r19
    1b2a:	b0 0d       	add	r27, r0
    1b2c:	a1 1d       	adc	r26, r1
    1b2e:	62 1f       	adc	r22, r18
    1b30:	83 9f       	mul	r24, r19
    1b32:	a0 0d       	add	r26, r0
    1b34:	61 1d       	adc	r22, r1
    1b36:	22 1f       	adc	r18, r18
    1b38:	74 9f       	mul	r23, r20
    1b3a:	33 27       	eor	r19, r19
    1b3c:	a0 0d       	add	r26, r0
    1b3e:	61 1d       	adc	r22, r1
    1b40:	23 1f       	adc	r18, r19
    1b42:	84 9f       	mul	r24, r20
    1b44:	60 0d       	add	r22, r0
    1b46:	21 1d       	adc	r18, r1
    1b48:	82 2f       	mov	r24, r18
    1b4a:	76 2f       	mov	r23, r22
    1b4c:	6a 2f       	mov	r22, r26
    1b4e:	11 24       	eor	r1, r1
    1b50:	9f 57       	subi	r25, 0x7F	; 127
    1b52:	50 40       	sbci	r21, 0x00	; 0
    1b54:	8a f0       	brmi	.+34     	; 0x1b78 <__mulsf3_pse+0x84>
    1b56:	e1 f0       	breq	.+56     	; 0x1b90 <__mulsf3_pse+0x9c>
    1b58:	88 23       	and	r24, r24
    1b5a:	4a f0       	brmi	.+18     	; 0x1b6e <__mulsf3_pse+0x7a>
    1b5c:	ee 0f       	add	r30, r30
    1b5e:	ff 1f       	adc	r31, r31
    1b60:	bb 1f       	adc	r27, r27
    1b62:	66 1f       	adc	r22, r22
    1b64:	77 1f       	adc	r23, r23
    1b66:	88 1f       	adc	r24, r24
    1b68:	91 50       	subi	r25, 0x01	; 1
    1b6a:	50 40       	sbci	r21, 0x00	; 0
    1b6c:	a9 f7       	brne	.-22     	; 0x1b58 <__mulsf3_pse+0x64>
    1b6e:	9e 3f       	cpi	r25, 0xFE	; 254
    1b70:	51 05       	cpc	r21, r1
    1b72:	70 f0       	brcs	.+28     	; 0x1b90 <__mulsf3_pse+0x9c>
    1b74:	60 cf       	rjmp	.-320    	; 0x1a36 <__fp_inf>
    1b76:	aa cf       	rjmp	.-172    	; 0x1acc <__fp_szero>
    1b78:	5f 3f       	cpi	r21, 0xFF	; 255
    1b7a:	ec f3       	brlt	.-6      	; 0x1b76 <__mulsf3_pse+0x82>
    1b7c:	98 3e       	cpi	r25, 0xE8	; 232
    1b7e:	dc f3       	brlt	.-10     	; 0x1b76 <__mulsf3_pse+0x82>
    1b80:	86 95       	lsr	r24
    1b82:	77 95       	ror	r23
    1b84:	67 95       	ror	r22
    1b86:	b7 95       	ror	r27
    1b88:	f7 95       	ror	r31
    1b8a:	e7 95       	ror	r30
    1b8c:	9f 5f       	subi	r25, 0xFF	; 255
    1b8e:	c1 f7       	brne	.-16     	; 0x1b80 <__mulsf3_pse+0x8c>
    1b90:	fe 2b       	or	r31, r30
    1b92:	88 0f       	add	r24, r24
    1b94:	91 1d       	adc	r25, r1
    1b96:	96 95       	lsr	r25
    1b98:	87 95       	ror	r24
    1b9a:	97 f9       	bld	r25, 7
    1b9c:	08 95       	ret

00001b9e <__mulsi3>:
    1b9e:	62 9f       	mul	r22, r18
    1ba0:	d0 01       	movw	r26, r0
    1ba2:	73 9f       	mul	r23, r19
    1ba4:	f0 01       	movw	r30, r0
    1ba6:	82 9f       	mul	r24, r18
    1ba8:	e0 0d       	add	r30, r0
    1baa:	f1 1d       	adc	r31, r1
    1bac:	64 9f       	mul	r22, r20
    1bae:	e0 0d       	add	r30, r0
    1bb0:	f1 1d       	adc	r31, r1
    1bb2:	92 9f       	mul	r25, r18
    1bb4:	f0 0d       	add	r31, r0
    1bb6:	83 9f       	mul	r24, r19
    1bb8:	f0 0d       	add	r31, r0
    1bba:	74 9f       	mul	r23, r20
    1bbc:	f0 0d       	add	r31, r0
    1bbe:	65 9f       	mul	r22, r21
    1bc0:	f0 0d       	add	r31, r0
    1bc2:	99 27       	eor	r25, r25
    1bc4:	72 9f       	mul	r23, r18
    1bc6:	b0 0d       	add	r27, r0
    1bc8:	e1 1d       	adc	r30, r1
    1bca:	f9 1f       	adc	r31, r25
    1bcc:	63 9f       	mul	r22, r19
    1bce:	b0 0d       	add	r27, r0
    1bd0:	e1 1d       	adc	r30, r1
    1bd2:	f9 1f       	adc	r31, r25
    1bd4:	bd 01       	movw	r22, r26
    1bd6:	cf 01       	movw	r24, r30
    1bd8:	11 24       	eor	r1, r1
    1bda:	08 95       	ret

00001bdc <__udivmodsi4>:
    1bdc:	a1 e2       	ldi	r26, 0x21	; 33
    1bde:	1a 2e       	mov	r1, r26
    1be0:	aa 1b       	sub	r26, r26
    1be2:	bb 1b       	sub	r27, r27
    1be4:	fd 01       	movw	r30, r26
    1be6:	0d c0       	rjmp	.+26     	; 0x1c02 <__udivmodsi4_ep>

00001be8 <__udivmodsi4_loop>:
    1be8:	aa 1f       	adc	r26, r26
    1bea:	bb 1f       	adc	r27, r27
    1bec:	ee 1f       	adc	r30, r30
    1bee:	ff 1f       	adc	r31, r31
    1bf0:	a2 17       	cp	r26, r18
    1bf2:	b3 07       	cpc	r27, r19
    1bf4:	e4 07       	cpc	r30, r20
    1bf6:	f5 07       	cpc	r31, r21
    1bf8:	20 f0       	brcs	.+8      	; 0x1c02 <__udivmodsi4_ep>
    1bfa:	a2 1b       	sub	r26, r18
    1bfc:	b3 0b       	sbc	r27, r19
    1bfe:	e4 0b       	sbc	r30, r20
    1c00:	f5 0b       	sbc	r31, r21

00001c02 <__udivmodsi4_ep>:
    1c02:	66 1f       	adc	r22, r22
    1c04:	77 1f       	adc	r23, r23
    1c06:	88 1f       	adc	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	1a 94       	dec	r1
    1c0c:	69 f7       	brne	.-38     	; 0x1be8 <__udivmodsi4_loop>
    1c0e:	60 95       	com	r22
    1c10:	70 95       	com	r23
    1c12:	80 95       	com	r24
    1c14:	90 95       	com	r25
    1c16:	9b 01       	movw	r18, r22
    1c18:	ac 01       	movw	r20, r24
    1c1a:	bd 01       	movw	r22, r26
    1c1c:	cf 01       	movw	r24, r30
    1c1e:	08 95       	ret

00001c20 <_exit>:
    1c20:	f8 94       	cli

00001c22 <__stop_program>:
    1c22:	ff cf       	rjmp	.-2      	; 0x1c22 <__stop_program>
